{"metadata":{"title":"SwiftUI Previews","roleHeading":"Article","role":"article","modules":[{"name":"FactoryKit"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look.","type":"text"}],"type":"paragraph"},{"text":"SwiftUI Integrations","level":2,"type":"heading","anchor":"SwiftUI-Integrations"},{"inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"text":"Keep in mind that if you assign to an ","type":"text"},{"type":"codeVoice","code":"ObservedObject"},{"text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes).","type":"text"}],"type":"paragraph"},{"text":"SwiftUI Previews","level":2,"type":"heading","anchor":"SwiftUI-Previews"},{"inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"inlineContent":[{"type":"text","text":"If we can control where and how the view model gets its data then we can put the view model into pretty much any state we choose."}],"type":"paragraph"},{"text":"SwiftUI #Previews","level":2,"type":"heading","anchor":"SwiftUI-Previews"},{"inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15."}],"type":"paragraph"},{"code":["#Preview {","    let _ = Container.shared.myService.register { MockServiceN(4) }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In fact, this ","type":"text"},{"code":"let _ = Container.shared.xxx.register","type":"codeVoice"},{"text":" syntax happens so frequently that Factory 2.5 added some sugar to make it a bit easier.","type":"text"}],"type":"paragraph"},{"code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"preview"},{"text":" modifier wraps ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" and also returns an EmptyView, satisfying SwiftUI’s ViewBuilder and eliminating the need for ","type":"text"},{"type":"codeVoice","code":"let _ ="},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Multiple-Registrations","type":"heading","text":"Multiple Registrations","level":2},{"inlineContent":[{"type":"text","text":"There’s also a variant for Containers if you need to do multiple registrations."}],"type":"paragraph"},{"code":["#Preview {","    Container.preview {","        $0.myService.register { MockServiceN(4) }","        $0.anotherService.register { MockAnotherService() }","    }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Multiple-Previews","type":"heading","text":"Multiple Previews","level":2},{"inlineContent":[{"text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to Xcode 15 and given the ContentView we used above, we’d need to do:"}]},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview as each one runs in its own context.."}]},{"code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}","#Preview {","    Container.shared.myService.preview { MockServiceN(0) }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the #Preview macro has been back-ported to iOS 13, there’s really no need to use the old syntax."}]},{"anchor":"Common-Setup","type":"heading","level":2,"text":"Common Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","#Preview {","    let _ = Container.shared.setupMocks()","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you want to roll with the cool kids and continue with the preview syntax…"}]},{"code":["extension Container {","    func setupMocks() -> EmptyView {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","        return EmptyView()","    }","}","","#Preview {","    Container.shared.setupMocks()","    ContentView()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing","generated":true,"anchor":"Development-and-Testing"}],"abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/previews"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Debugging":{"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","kind":"article","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","url":"\/documentation\/factorykit\/chains","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"type":"topic","title":"Contexts","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article"}}}
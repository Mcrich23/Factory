{"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"generated":true,"anchor":"Development-and-Testing","title":"Development and Testing"}],"variants":[{"paths":["\/documentation\/factorykit\/previews"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}]},{"type":"heading","level":2,"anchor":"SwiftUI-Previews","text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview."}]},{"type":"codeListing","code":["\/\/ the view model","class ContentViewModel: ObservableObject {","    @Injected(\\.myService) private var service","    ...","    func load() async {","        let results = await service.load()","        ...","    }","}","","\/\/ the view","struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","\/\/ the preview","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where and how the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"type":"heading","level":2,"anchor":"SwiftUI-Previews","text":"SwiftUI #Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15."}]},{"type":"codeListing","code":["#Preview {","    let _ = Container.shared.myService.register { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In fact, this ","type":"text"},{"code":"let _ = Container.shared.xxx.register","type":"codeVoice"},{"text":" syntax happens so frequently that Factory 2.5 added some sugar to make it a bit easier.","type":"text"}]},{"type":"codeListing","code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"preview"},{"type":"text","text":" modifier wraps "},{"type":"codeVoice","code":"register"},{"type":"text","text":" and also returns an EmptyView, satisfying SwiftUI’s ViewBuilder and eliminating the need for "},{"type":"codeVoice","code":"let _ ="},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Multiple Registrations","type":"heading","level":2,"anchor":"Multiple-Registrations"},{"inlineContent":[{"type":"text","text":"There’s also a variant for Containers if you need to do multiple registrations."}],"type":"paragraph"},{"code":["#Preview {","    Container.preview {","        $0.myService.register { MockServiceN(4) }","        $0.anotherService.register { MockAnotherService() }","    }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"text":"Multiple Previews","type":"heading","level":2,"anchor":"Multiple-Previews"},{"inlineContent":[{"text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Prior to Xcode 15 and given the ContentView we used above, we’d need to do:"}],"type":"paragraph"},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview as each one runs in its own context.."}],"type":"paragraph"},{"code":["#Preview {","    Container.shared.myService.preview { MockServiceN(4) }","    ContentView()","}","#Preview {","    Container.shared.myService.preview { MockServiceN(0) }","    ContentView()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Since the #Preview macro has been back-ported to iOS 13, there’s really no need to use the old syntax.","type":"text"}]},{"type":"heading","text":"Common Setup","anchor":"Common-Setup","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","#Preview {","    let _ = Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or if you want to roll with the cool kids and continue with the preview syntax…"}]},{"type":"codeListing","code":["extension Container {","    func setupMocks() -> EmptyView {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","        return EmptyView()","    }","}","","#Preview {","    Container.shared.setupMocks()","    ContentView()","}"],"syntax":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"FactoryKit"}],"title":"SwiftUI Previews"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","type":"topic","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","type":"topic","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factorykit\/chains","role":"article"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","type":"topic","kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"title":"Contexts","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"type":"topic","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}
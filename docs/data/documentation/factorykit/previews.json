{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}]},{"type":"heading","anchor":"SwiftUI-Integrations","level":2,"text":"SwiftUI Integrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"code":"StateObject","type":"codeVoice"},{"type":"text","text":" or "},{"code":"ObservedObject","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes)."}]},{"type":"heading","anchor":"SwiftUI-Previews","level":2,"text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose.","type":"text"}]},{"type":"heading","anchor":"SwiftUI-Previews","level":2,"text":"SwiftUI #Previews"},{"inlineContent":[{"text":"The same can be done using the new macro-based #Preview option added to Xcode 15 and iOS 17… but there’s a problem. Attempting to do the above gives us an error.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    ContentView() \/\/ error: Result of 'ContentView' initializer is unused","}"]},{"inlineContent":[{"type":"text","text":"The solution lies in recognizing the fact that the #Preview closure is not a ViewBuilder. To fix it we just need to explicitly return our view."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    return ContentView()","}"]},{"inlineContent":[{"type":"text","text":"Or we could simply turn the expression into a ViewBuilder using our old friend, Group."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"inlineContent":[{"type":"text","text":"Group actually has a few additional uses…"}],"type":"paragraph"},{"anchor":"Multiple-Previews","type":"heading","text":"Multiple Previews","level":2},{"inlineContent":[{"text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Given the ContentView we used above…","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview."}]},{"type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Since #Preview has been back-ported to iOS 13, I’d use it from now on. (Assuming of course that you can migrate your project to Xcode 15.)","type":"text"}]},{"anchor":"InjectedObject","type":"heading","level":2,"text":"InjectedObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you prefer, you can also use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject"},{"type":"text","text":", an immediate injection property wrapper for SwiftUI ObservableObjects."}]},{"type":"paragraph","inlineContent":[{"text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject","type":"text"},{"text":" ","type":"text"},{"text":"and @EnvironmentObject.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath"},{"type":"text","text":" "},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}]},{"type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service"},{"type":"text","text":" "},{"type":"text","text":"or dependency."}]},{"type":"codeListing","code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have a service that could be consumed from a view or a view model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","type":"reference"},{"text":" for more details on graph.","type":"text"}]}]}],"type":"orderedList"},{"anchor":"InjectedObject-Previews","type":"heading","level":2,"text":"InjectedObject Previews"},{"type":"paragraph","inlineContent":[{"text":"Single previews work exactly the same.","type":"text"}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier."}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing the model to the view directly, we need to create the entire "},{"code":"InjectedObject(model1)","type":"codeVoice"},{"type":"text","text":" pair and pass that."}]},{"type":"paragraph","inlineContent":[{"text":"That said, and as we’ve shown before, it’s even easier with #Preview.","type":"text"}]},{"type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"],"syntax":"swift"},{"anchor":"Common-Setup","type":"heading","level":2,"text":"Common Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"],"syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/factorykit\/previews"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"metadata":{"role":"article","modules":[{"name":"FactoryKit"}],"roleHeading":"Article","title":"SwiftUI Previews"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","interfaceLanguage":"swift"},"kind":"article","seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"generated":true,"anchor":"Development-and-Testing"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"url":"\/documentation\/factorykit\/injectedobject","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","title":"InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}]},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"title":"Contexts","role":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"url":"\/documentation\/factorykit\/debugging","type":"topic","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"title":"Circular Dependency Chains","kind":"article","role":"article","url":"\/documentation\/factorykit\/chains"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","kind":"article","url":"\/documentation\/factorykit\/testing","title":"Testing","type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"role":"collectionGroup","url":"\/documentation\/factorykit\/scopes","type":"topic","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","title":"Scopes"}}}
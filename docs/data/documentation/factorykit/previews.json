{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","interfaceLanguage":"swift"},"abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look.","type":"text"}]},{"level":2,"type":"heading","text":"SwiftUI Integrations","anchor":"SwiftUI-Integrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes)."}]},{"level":2,"type":"heading","text":"SwiftUI Previews","anchor":"SwiftUI-Previews"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"level":2,"type":"heading","text":"SwiftUI #Previews","anchor":"SwiftUI-Previews"},{"inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15 and iOS 17… but there’s a problem. Attempting to do the above gives us an error."}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    ContentView() \/\/ error: Result of 'ContentView' initializer is unused","}"],"type":"codeListing"},{"inlineContent":[{"text":"The solution lies in recognizing the fact that the #Preview closure is not a ViewBuilder. To fix it we just need to explicitly return our view.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    return ContentView()","}"],"type":"codeListing"},{"inlineContent":[{"text":"Or we could simply turn the expression into a ViewBuilder using our old friend, Group.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","    Group {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Group actually has a few additional uses…","type":"text"}],"type":"paragraph"},{"text":"Multiple Previews","level":2,"type":"heading","anchor":"Multiple-Previews"},{"inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}],"type":"paragraph"},{"inlineContent":[{"text":"Given the ContentView we used above…","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview."}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since #Preview has been back-ported to iOS 13, I’d use it from now on. (Assuming of course that you can migrate your project to Xcode 15.)"}]},{"anchor":"InjectedObject","text":"InjectedObject","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Should you prefer, you can also use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject"},{"text":", an immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"type":"text","text":" "},{"type":"text","text":"and @EnvironmentObject."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath"},{"type":"text","text":" "},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service"},{"type":"text","text":" "},{"type":"text","text":"or dependency."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You have a service that could be consumed from a view or a view model.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","type":"reference"},{"text":" for more details on graph.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"InjectedObject-Previews","text":"InjectedObject Previews","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Single previews work exactly the same.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing the model to the view directly, we need to create the entire "},{"type":"codeVoice","code":"InjectedObject(model1)"},{"type":"text","text":" pair and pass that."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, and as we’ve shown before, it’s even easier with #Preview."}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"]},{"anchor":"Common-Setup","text":"Common Setup","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/previews"]}],"kind":"article","sections":[],"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"generated":true,"anchor":"Development-and-Testing"}],"metadata":{"title":"SwiftUI Previews","roleHeading":"Article","modules":[{"name":"FactoryKit"}],"role":"article"},"references":{"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","kind":"article","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","url":"\/documentation\/factorykit\/testing"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"kind":"symbol","title":"InjectedObject","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"role":"symbol","url":"\/documentation\/factorykit\/injectedobject"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","type":"topic","url":"\/documentation\/factorykit\/chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","title":"Circular Dependency Chains"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","url":"\/documentation\/factorykit\/debugging","role":"article","kind":"article","title":"Debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}]},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"kind":"article","url":"\/documentation\/factorykit\/scopes","title":"Scopes","type":"topic","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","title":"Contexts","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"}}}
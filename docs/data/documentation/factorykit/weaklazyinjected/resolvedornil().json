{"sections":[],"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}]}],"kind":"declarations"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve","type":"text"},{"text":" ","type":"text"},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}],"type":"paragraph"},{"code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/weaklazyinjected\/resolvedornil()"]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]]},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"externalID":"s:10FactoryKit16WeakLazyInjectedV13resolvedOrNilxSgyF","modules":[{"name":"FactoryKit"}],"title":"resolvedOrNil()","roleHeading":"Instance Method","role":"symbol","symbolKind":"method"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected/resolvedOrNil()":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected\/resolvedOrNil()","role":"symbol","abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"title":"resolvedOrNil()","url":"\/documentation\/factorykit\/weaklazyinjected\/resolvedornil()"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"type":"topic","kind":"symbol"}}}
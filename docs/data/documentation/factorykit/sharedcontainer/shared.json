{"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This container is used by the various @Injected property wrappers to resolve the keyPath to a given Factory. Care should be taken in","type":"text"},{"text":" ","type":"text"},{"text":"mixed environments where you’re passing container references AND using the @Injected property wrappers.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note this should be defined as a @TaskLocal variable to be able to use its isolation mechanism, which is especially useful for test parallelization."},{"type":"text","text":" "},{"type":"text","text":"If you don’t want to use the @TaskLocal isolation mechanism, then you should define a ‘let’ variable, not ‘var’."},{"type":"text","text":" "},{"type":"text","text":"Using ‘static var’ (without @TaskLocal being attached to it) will cause Swift to issue concurrency warnings in the future whenever the container is accessed."}]}],"kind":"content"}],"abstract":[{"text":"Defines a single “shared” container for that container type.","type":"text"}],"variants":[{"paths":["\/documentation\/factorykit\/sharedcontainer\/shared"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer\/shared"},"sections":[],"metadata":{"modules":[{"name":"FactoryKit"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"symbolKind":"property","roleHeading":"Type Property","title":"shared","required":true,"externalID":"s:10FactoryKit15SharedContainerP6sharedxvpZ"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"]]},"kind":"symbol","references":{"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"url":"\/documentation\/factorykit\/sharedcontainer","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","kind":"symbol","title":"SharedContainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/SharedContainer/shared":{"type":"topic","title":"shared","url":"\/documentation\/factorykit\/sharedcontainer\/shared","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Defines a single “shared” container for that container type.","type":"text"}],"required":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer\/shared"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"}}}
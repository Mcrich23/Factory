{"abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"variants":[{"paths":["\/documentation\/factorykit\/chains"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Circular Dependency Chains","modules":[{"name":"FactoryKit"}],"role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging"],"generated":true,"title":"Development and Testing"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Circular-Dependency-Chain-Detection","text":"Circular Dependency Chain Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?"}]},{"type":"paragraph","inlineContent":[{"text":"Examine the following class definitions.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"]},{"type":"paragraph","inlineContent":[{"text":"Attempting make an instance of ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"text":" is going to result in an infinite loop.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is a circular dependency chain.","type":"text"}]},{"type":"heading","level":2,"anchor":"Resolution","text":"Resolution"},{"type":"paragraph","inlineContent":[{"text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}]},{"type":"codeListing","syntax":null,"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the above information in hand we should be able to find the problem and fix it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"type":"codeVoice","code":"LazyInjected"},{"type":"text","text":" or, better yet, "},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}]},{"type":"paragraph","inlineContent":[{"text":"But a better solution would probably entail finding and breaking out the functionality that ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CircularC","type":"codeVoice"},{"text":" are depending upon into a ","type":"text"},{"inlineContent":[{"type":"text","text":"third"}],"type":"emphasis"},{"text":" object they both could include.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance."}],"type":"paragraph"}],"type":"aside","style":"important","name":"Important"},{"type":"heading","level":2,"anchor":"Disabling-CDC-Detection","text":"Disabling CDC Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.dependencyChainTestMax = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value for "},{"code":"dependencyChainTestMax","type":"codeVoice"},{"type":"text","text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This value can be increased (or decreased) as needed."}]}]}],"sections":[],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/Debugging":{"abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"title":"SwiftUI Previews","kind":"article","role":"article","url":"\/documentation\/factorykit\/previews","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","type":"topic","kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"title":"Contexts","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"type":"topic","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","type":"topic","title":"Testing","kind":"article"}}}
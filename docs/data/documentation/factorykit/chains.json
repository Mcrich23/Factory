{"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Article","role":"article","title":"Circular Dependency Chains"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/chains"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Circular Dependency Chain Detection","anchor":"Circular-Dependency-Chain-Detection","level":2},{"inlineContent":[{"type":"text","text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Examine the following class definitions."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"]},{"inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"code":"CircularA","type":"codeVoice"},{"type":"text","text":" is going to result in an infinite loop."}],"type":"paragraph"},{"inlineContent":[{"text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is a circular dependency chain."}],"type":"paragraph"},{"type":"heading","text":"Resolution","anchor":"Resolution","level":2},{"inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}],"type":"paragraph"},{"inlineContent":[{"text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the above information in hand we should be able to find the problem and fix it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"type":"codeVoice","code":"LazyInjected"},{"type":"text","text":" or, better yet, "},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But a better solution would probably entail finding and breaking out the functionality that "},{"code":"CircularA","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CircularC","type":"codeVoice"},{"type":"text","text":" are depending upon into a "},{"inlineContent":[{"text":"third","type":"text"}],"type":"emphasis"},{"type":"text","text":" object they both could include."}]},{"type":"paragraph","inlineContent":[{"text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided.","type":"text"}]},{"type":"aside","style":"important","name":"Important","content":[{"inlineContent":[{"text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance.","type":"text"}],"type":"paragraph"}]},{"type":"heading","text":"Disabling CDC Detection","anchor":"Disabling-CDC-Detection","level":2},{"type":"paragraph","inlineContent":[{"text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.dependencyChainTestMax = 0"]},{"type":"paragraph","inlineContent":[{"text":"The default value for ","type":"text"},{"code":"dependencyChainTestMax","type":"codeVoice"},{"text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This value can be increased (or decreased) as needed."}]}]}],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging"],"generated":true,"anchor":"Development-and-Testing","title":"Development and Testing"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"},"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"references":{"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","kind":"article","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","url":"\/documentation\/factorykit\/testing"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","url":"\/documentation\/factorykit\/debugging","role":"article","kind":"article","title":"Debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}]},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","title":"Contexts","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","url":"\/documentation\/factorykit\/previews","type":"topic","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article","title":"SwiftUI Previews"}}}
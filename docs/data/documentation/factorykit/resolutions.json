{"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Shared Class Container","type":"heading","level":3,"anchor":"Shared-Class-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"text":"Initialization from Passed Container","type":"heading","level":3,"anchor":"Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"text":"Lazy Initialization from Passed Container","type":"heading","level":3,"anchor":"Lazy-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"text":"Injected Property Wrappers","type":"heading","level":3,"anchor":"Injected-Property-Wrappers"},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"code":"EnvironmentObject","type":"codeVoice"},{"text":" in SwiftUI.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]},{"type":"paragraph","inlineContent":[{"text":"One can also inject the view model itself.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","type":"reference"},{"text":" for more.","type":"text"}]},{"text":"Global Keypath Resolution from Shared Container","type":"heading","level":3,"anchor":"Global-Keypath-Resolution-from-Shared-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"text":"Parameterized Initialization from Passed Container","type":"heading","level":3,"anchor":"Parameterized-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},{"type":"text","text":" for more details."}]},{"text":"Classic Factory from Static Class Member","type":"heading","level":3,"anchor":"Classic-Factory-from-Static-Class-Member"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","isActive":true,"type":"reference"}]},{"text":"Composition Root","type":"heading","level":3,"anchor":"Composition-Root"},{"type":"paragraph","inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}]}],"variants":[{"paths":["\/documentation\/factorykit\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"FactoryKit"}],"title":"Sample Resolutions","roleHeading":"Article","role":"article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"seeAlsoSections":[{"generated":true,"anchor":"Examples","title":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","kind":"symbol","title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"title":"Getting Started","role":"collectionGroup","kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/dynamicinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"type":"topic","title":"DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"role":"symbol","url":"\/documentation\/factorykit\/injectedobject","type":"topic","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","kind":"article","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"role":"article","title":"Sample Registrations","type":"topic","url":"\/documentation\/factorykit\/registrations"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"title":"WeakLazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}]}}}
{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"},"seeAlsoSections":[{"title":"Examples","generated":true,"anchor":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"]}],"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/resolutions"]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"metadata":{"role":"article","title":"Sample Resolutions","modules":[{"name":"FactoryKit"}],"roleHeading":"Article"},"kind":"article","primaryContentSections":[{"content":[{"level":3,"type":"heading","text":"Shared Class Container","anchor":"Shared-Class-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"level":3,"type":"heading","text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and initializing service from that container.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"level":3,"type":"heading","text":"Lazy Initialization from Passed Container","anchor":"Lazy-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"level":3,"type":"heading","text":"Injected Property Wrappers","anchor":"Injected-Property-Wrappers"},{"inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@LazyInjected"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"type":"codeVoice","code":"EnvironmentObject"},{"text":" in SwiftUI.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"One can also inject the view model itself."}],"type":"paragraph"},{"code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject"},{"type":"text","text":" for more."}],"type":"paragraph"},{"type":"heading","text":"Global Keypath Resolution from Shared Container","level":3,"anchor":"Global-Keypath-Resolution-from-Shared-Container"},{"inlineContent":[{"text":"Factory provides two global functions that utilize keypaths for resolution.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The end result is identical to using a keypath with the @Injected property wrapper.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Parameterized Initialization from Passed Container","level":3,"anchor":"Parameterized-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference","isActive":true},{"text":" for more details.","type":"text"}]},{"anchor":"Classic-Factory-from-Static-Class-Member","text":"Classic Factory from Static Class Member","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"reference"}]},{"anchor":"Composition-Root","text":"Composition Root","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","title":"WeakLazyInjected","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","kind":"article","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started","url":"\/documentation\/factorykit\/gettingstarted","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"title":"Injected","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"kind":"article","role":"article","url":"\/documentation\/factorykit\/registrations","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"title":"Sample Registrations","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","title":"LazyInjected","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/lazyinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"topic","navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/dynamicinjected","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"url":"\/documentation\/factorykit\/injectedobject","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","title":"InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/parameterfactory","title":"ParameterFactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"role":"symbol"}}}
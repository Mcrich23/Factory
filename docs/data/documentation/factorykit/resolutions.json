{"metadata":{"modules":[{"name":"FactoryKit"}],"role":"article","roleHeading":"Article","title":"Sample Resolutions"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/resolutions"]}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","level":3,"text":"Shared Class Container","anchor":"Shared-Class-Container"},{"inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container"},{"inlineContent":[{"text":"Passing an instance of a container to our view model and initializing service from that container.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"type":"heading","level":3,"text":"Lazy Initialization from Passed Container","anchor":"Lazy-Initialization-from-Passed-Container"},{"inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"type":"heading","level":3,"text":"Injected Property Wrappers","anchor":"Injected-Property-Wrappers"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"type":"codeVoice","code":"EnvironmentObject"},{"type":"text","text":" in SwiftUI."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]},{"inlineContent":[{"type":"text","text":"One can also inject the view model itself."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","type":"reference"},{"text":" for more.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Global Keypath Resolution from Shared Container","anchor":"Global-Keypath-Resolution-from-Shared-Container"},{"inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Parameterized Initialization from Passed Container","anchor":"Parameterized-Initialization-from-Passed-Container"},{"inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","isActive":true},{"type":"text","text":" for more details."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Classic Factory from Static Class Member","anchor":"Classic-Factory-from-Static-Class-Member"},{"inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"reference","isActive":true}],"type":"paragraph"},{"type":"heading","level":3,"text":"Composition Root","anchor":"Composition-Root"},{"inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Examples","anchor":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"]}],"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"references":{"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","url":"\/documentation\/factorykit\/lazyinjected","type":"topic","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","title":"LazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factorykit\/injectedobject","title":"InjectedObject","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"url":"\/documentation\/factorykit\/weaklazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"kind":"symbol","type":"topic","title":"WeakLazyInjected"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"title":"ParameterFactory","role":"symbol","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","url":"\/documentation\/factorykit\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","url":"\/documentation\/factorykit\/injected","title":"Injected","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}]},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","type":"topic","url":"\/documentation\/factorykit\/gettingstarted","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","title":"Getting Started","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","role":"article","url":"\/documentation\/factorykit\/registrations","title":"Sample Registrations","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"kind":"article","type":"topic"}}}
{"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Article","title":"Sample Resolutions","role":"article"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"variants":[{"paths":["\/documentation\/factorykit\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"],"title":"Examples","anchor":"Examples","generated":true}],"primaryContentSections":[{"content":[{"text":"Shared Class Container","anchor":"Shared-Class-Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Here we instantiate our dependency from a shared class container.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and initializing service from that container.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"text":"Lazy Initialization from Passed Container","anchor":"Lazy-Initialization-from-Passed-Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"text":"Injected Property Wrappers","anchor":"Injected-Property-Wrappers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" and "},{"code":"@LazyInjected","type":"codeVoice"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"code":"EnvironmentObject","type":"codeVoice"},{"type":"text","text":" in SwiftUI."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","isActive":true},{"type":"text","text":" for more."}]},{"text":"Global Keypath Resolution from Shared Container","anchor":"Global-Keypath-Resolution-from-Shared-Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Factory provides two global functions that utilize keypaths for resolution.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"text":"Parameterized Initialization from Passed Container","anchor":"Parameterized-Initialization-from-Passed-Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference","isActive":true},{"text":" for more details.","type":"text"}]},{"text":"Classic Factory from Static Class Member","anchor":"Classic-Factory-from-Static-Class-Member","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This was discussed in greater detail in "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"reference","isActive":true}]},{"text":"Composition Root","anchor":"Composition-Root","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"references":{"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"title":"InjectedObject","url":"\/documentation\/factorykit\/injectedobject","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","url":"\/documentation\/factorykit\/registrations","role":"article","type":"topic","kind":"article","title":"Sample Registrations"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","url":"\/documentation\/factorykit\/lazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"title":"LazyInjected","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}]},"doc://FactoryKit/documentation/FactoryKit/Injected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"url":"\/documentation\/factorykit\/dynamicinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"type":"topic","title":"DynamicInjected","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","role":"symbol","title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","title":"Getting Started","kind":"article","role":"collectionGroup"}}}
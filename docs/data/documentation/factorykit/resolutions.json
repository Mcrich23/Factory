{"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"seeAlsoSections":[{"title":"Examples","anchor":"Examples","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"]}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","interfaceLanguage":"swift"},"metadata":{"title":"Sample Resolutions","modules":[{"name":"FactoryKit"}],"role":"article","roleHeading":"Article"},"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Shared Class Container","level":3,"anchor":"Shared-Class-Container","type":"heading"},{"inlineContent":[{"text":"Here we instantiate our dependency from a shared class container.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This is the classic Service Locator pattern updated for Factory 2.0.","type":"text"}],"type":"paragraph"},{"text":"Initialization from Passed Container","level":3,"anchor":"Initialization-from-Passed-Container","type":"heading"},{"inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"syntax":"swift","type":"codeListing"},{"text":"Lazy Initialization from Passed Container","level":3,"anchor":"Lazy-Initialization-from-Passed-Container","type":"heading"},{"inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"],"syntax":"swift","type":"codeListing"},{"text":"Injected Property Wrappers","level":3,"anchor":"Injected-Property-Wrappers","type":"heading"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"type":"codeVoice","code":"EnvironmentObject"},{"type":"text","text":" in SwiftUI."}],"type":"paragraph"},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"syntax":"swift"},{"inlineContent":[{"text":"One can also inject the view model itself.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","isActive":true,"type":"reference"},{"text":" for more.","type":"text"}],"type":"paragraph"},{"anchor":"Global-Keypath-Resolution-from-Shared-Container","type":"heading","level":3,"text":"Global Keypath Resolution from Shared Container"},{"inlineContent":[{"text":"Factory provides two global functions that utilize keypaths for resolution.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"],"syntax":"swift"},{"inlineContent":[{"text":"The end result is identical to using a keypath with the @Injected property wrapper.","type":"text"}],"type":"paragraph"},{"anchor":"Parameterized-Initialization-from-Passed-Container","type":"heading","level":3,"text":"Parameterized Initialization from Passed Container"},{"inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference","isActive":true},{"text":" for more details.","type":"text"}],"type":"paragraph"},{"anchor":"Classic-Factory-from-Static-Class-Member","text":"Classic Factory from Static Class Member","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This was discussed in greater detail in "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","isActive":true}],"type":"paragraph"},{"anchor":"Composition-Root","text":"Composition Root","type":"heading","level":3},{"inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/resolutions"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"title":"DynamicInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}],"navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"url":"\/documentation\/factorykit\/parameterfactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"doc://FactoryKit/documentation/FactoryKit/Injected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factorykit\/injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"title":"LazyInjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"url":"\/documentation\/factorykit\/lazyinjected","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"kind":"symbol","title":"InjectedObject","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"role":"symbol","url":"\/documentation\/factorykit\/injectedobject"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"role":"collectionGroup","type":"topic","kind":"article","title":"Getting Started","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","url":"\/documentation\/factorykit\/gettingstarted","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","title":"WeakLazyInjected","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/weaklazyinjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}]},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Registrations":{"kind":"article","title":"Sample Registrations","url":"\/documentation\/factorykit\/registrations","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","type":"topic","role":"article"}}}
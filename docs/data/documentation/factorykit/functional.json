{"metadata":{"modules":[{"name":"FactoryKit"}],"role":"article","title":"Functional Injection","roleHeading":"Article"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}]},{"text":"Example","anchor":"Example","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Consider the following typealias and Factory.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"text":"Testing","anchor":"Testing","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}]},{"syntax":"swift","type":"codeListing","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"inlineContent":[{"type":"text","text":"Or test specific error cases."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"inlineContent":[{"text":"Here’s an article that goes into the technique in more detail: ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"}],"type":"paragraph"}]}],"abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/functional"]}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"generated":true,"title":"Advanced Topics"}],"references":{"doc://FactoryKit/documentation/FactoryKit/Optionals":{"url":"\/documentation\/factorykit\/optionals","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"role":"article","title":"Optionals and Dynamic Registration","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","kind":"article","type":"topic","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Design":{"url":"\/documentation\/factorykit\/design","kind":"article","type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article","title":"Designing Factory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"kind":"article","url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","type":"topic","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","kind":"article","type":"topic","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","title":"Tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}],"type":"link","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","kind":"article","type":"topic","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"}}}
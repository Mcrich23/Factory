{"metadata":{"title":"Functional Injection","roleHeading":"Article","modules":[{"name":"FactoryKit"}],"role":"article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"seeAlsoSections":[{"generated":true,"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Example","anchor":"Example","type":"heading"},{"inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"level":2,"type":"heading","anchor":"Testing","text":"Testing"},{"inlineContent":[{"text":"Now consider how easy it is to write a test with mock accounts…","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"inlineContent":[{"text":"Or test edge cases like no accounts found.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"inlineContent":[{"text":"Or test specific error cases.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"inlineContent":[{"text":"Here’s an article that goes into the technique in more detail: ","type":"text"},{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","isActive":true,"type":"reference"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/functional"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Tags":{"kind":"article","type":"topic","title":"Tags","url":"\/documentation\/factorykit\/tags","role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"type":"link","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}]},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","type":"topic","title":"Optionals and Dynamic Registration","kind":"article","url":"\/documentation\/factorykit\/optionals","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","kind":"article","type":"topic","url":"\/documentation\/factorykit\/modules"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","role":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","kind":"article","role":"article","url":"\/documentation\/factorykit\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"}}}
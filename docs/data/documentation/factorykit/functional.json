{"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"generated":true,"anchor":"Advanced-Topics","title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"sections":[],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing.","type":"text"}]},{"level":2,"anchor":"Example","type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"text":"Consider the following typealias and Factory.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, here’s the view model that uses it."}]},{"type":"codeListing","syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"level":2,"anchor":"Testing","type":"heading","text":"Testing"},{"type":"paragraph","inlineContent":[{"text":"Now consider how easy it is to write a test with mock accounts…","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}]},{"type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test specific error cases."}]},{"type":"codeListing","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","type":"reference","isActive":true}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factorykit\/functional"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"metadata":{"role":"article","modules":[{"name":"FactoryKit"}],"roleHeading":"Article","title":"Functional Injection"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","url":"\/documentation\/factorykit\/modules","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","type":"link","titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}],"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","kind":"article","url":"\/documentation\/factorykit\/design"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","type":"topic","kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","url":"\/documentation\/factorykit\/optionals","title":"Optionals and Dynamic Registration","type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"}}}
{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"},"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","generated":true}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Example","anchor":"Example"},{"inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"inlineContent":[{"type":"text","text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now, here’s the view model that uses it."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"type":"heading","level":2,"text":"Testing","anchor":"Testing"},{"inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}]},{"code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test specific error cases."}]},{"code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"type":"reference","isActive":true,"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"}]}]}],"metadata":{"modules":[{"name":"FactoryKit"}],"title":"Functional Injection","roleHeading":"Article","role":"article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/functional"]}],"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"references":{"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"role":"article","url":"\/documentation\/factorykit\/modules","type":"topic","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","kind":"article","type":"topic","url":"\/documentation\/factorykit\/cycle"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"type":"link","title":"Factory and Functional Dependency Injection","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"text":"Factory and Functional Dependency Injection","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","kind":"article","type":"topic","title":"Factory Modifiers","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Design":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","title":"Optionals and Dynamic Registration","type":"topic","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/optionals","kind":"article"}}}
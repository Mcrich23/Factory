{"metadata":{"roleHeading":"Article","title":"Sample Registrations","modules":[{"name":"FactoryKit"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/registrations"]}],"primaryContentSections":[{"content":[{"text":"Basic","level":3,"type":"heading","anchor":"Basic"},{"type":"paragraph","inlineContent":[{"text":"Example of a basic dependency registration in a Factory 2.0 container.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This registered dependency returns a new, unique version of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}]},{"type":"paragraph","inlineContent":[{"text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We prefer the more concise version, and that’s what we’ll use going forward."}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"The container helper functions are ","type":"text"},{"code":"@inlinable","type":"codeVoice"},{"text":" and as such there’s no performance penalty incurred when calling them.","type":"text"}],"type":"paragraph"}]},{"text":"Scopes","level":3,"type":"heading","anchor":"Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}]},{"type":"codeListing","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"syntax":"swift"},{"text":"Constructor Injection","level":3,"type":"heading","anchor":"Constructor-Injection"},{"type":"paragraph","inlineContent":[{"text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift"},{"text":"Parameters","level":3,"type":"heading","anchor":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","isActive":true},{"type":"text","text":"."}]},{"type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that we also needed to specify the type of our parameter.","type":"text"}]},{"text":"Same Types","level":3,"type":"heading","anchor":"Same-Types"},{"type":"paragraph","inlineContent":[{"text":"Example of correctly handling multiple instances of the same type.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"syntax":"swift"},{"text":"Inside Custom Containers","level":3,"type":"heading","anchor":"Inside-Custom-Containers"},{"type":"paragraph","inlineContent":[{"text":"You’ve seen factory registrations done within container ","type":"text"},{"inlineContent":[{"text":"extensions","type":"text"}],"type":"emphasis"},{"text":", but it should also be noted that we can also create them within our own custom containers.","type":"text"}]},{"type":"codeListing","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"type":"codeVoice","code":"service2"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem."}]},{"name":"Warning","style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}]},{"text":"Static Factory’s","level":3,"type":"heading","anchor":"Static-Factorys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a static Factory 2.0 registration container."}]},{"type":"codeListing","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}]},{"type":"paragraph","inlineContent":[{"text":"While you ","type":"text"},{"inlineContent":[{"text":"can","type":"text"}],"type":"emphasis"},{"text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","isActive":true,"type":"reference"},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}]},{"type":"codeListing","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"],"syntax":"swift"}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"seeAlsoSections":[{"generated":true,"title":"Examples","anchor":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"title":"Sample Resolutions","url":"\/documentation\/factorykit\/resolutions","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","kind":"article","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","role":"collectionGroup","kind":"article","url":"\/documentation\/factorykit\/gettingstarted"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"kind":"symbol","url":"\/documentation\/factorykit\/injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","title":"Injected"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"}}}
{"abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"seeAlsoSections":[{"title":"Examples","generated":true,"anchor":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Basic","level":3,"text":"Basic","type":"heading"},{"inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This registered dependency returns a new, unique version of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We prefer the more concise version, and that’s what we’ll use going forward.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The container helper functions are "},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":" and as such there’s no performance penalty incurred when calling them."}]}]},{"anchor":"Scopes","level":3,"text":"Scopes","type":"heading"},{"inlineContent":[{"text":"Examples of defining scoped services in a Factory 2.0 container.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Constructor-Injection","level":3,"text":"Constructor Injection","type":"heading"},{"inlineContent":[{"text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Parameters","level":3,"text":"Parameters","type":"heading"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Note that we also needed to specify the type of our parameter.","type":"text"}],"type":"paragraph"},{"anchor":"Same-Types","level":3,"text":"Same Types","type":"heading"},{"inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type."}],"type":"paragraph"},{"code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Inside-Custom-Containers","level":3,"text":"Inside Custom Containers","type":"heading"},{"inlineContent":[{"type":"text","text":"You’ve seen factory registrations done within container "},{"inlineContent":[{"text":"extensions","type":"text"}],"type":"emphasis"},{"type":"text","text":", but it should also be noted that we can also create them within our own custom containers."}],"type":"paragraph"},{"code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"type":"codeVoice","code":"service2"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}],"type":"paragraph"},{"inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}],"type":"paragraph"},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle."}]}]},{"inlineContent":[{"text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands.","type":"text"}],"type":"paragraph"},{"anchor":"Static-Factorys","level":3,"text":"Static Factory’s","type":"heading"},{"inlineContent":[{"text":"Example of a static Factory 2.0 registration container.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}],"type":"paragraph"},{"inlineContent":[{"text":"While you ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"can","type":"text"}]},{"text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","type":"reference","isActive":true},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/registrations"]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"metadata":{"title":"Sample Registrations","modules":[{"name":"FactoryKit"}],"roleHeading":"Article","role":"article"},"references":{"doc://FactoryKit/documentation/FactoryKit/Injected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factorykit\/injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","role":"article","url":"\/documentation\/factorykit\/resolutions","kind":"article","type":"topic","title":"Sample Resolutions"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"url":"\/documentation\/factorykit\/parameterfactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"role":"collectionGroup","type":"topic","kind":"article","title":"Getting Started","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","url":"\/documentation\/factorykit\/gettingstarted","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}]}}}
{"metadata":{"roleHeading":"Article","title":"Sample Registrations","role":"article","modules":[{"name":"FactoryKit"}]},"seeAlsoSections":[{"title":"Examples","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"],"anchor":"Examples"}],"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Basic","text":"Basic","level":3},{"type":"paragraph","inlineContent":[{"text":"Example of a basic dependency registration in a Factory 2.0 container.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This registered dependency returns a new, unique version of ","type":"text"},{"type":"codeVoice","code":"MyServiceType"},{"text":" whenever it’s asked to do so.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container."}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We prefer the more concise version, and that’s what we’ll use going forward."}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The container helper functions are ","type":"text"},{"type":"codeVoice","code":"@inlinable"},{"text":" and as such there’s no performance penalty incurred when calling them.","type":"text"}]}]},{"type":"heading","anchor":"Scopes","text":"Scopes","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}]},{"type":"codeListing","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"syntax":"swift"},{"text":"Constructor Injection","anchor":"Constructor-Injection","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}],"type":"paragraph"},{"code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Parameters","anchor":"Parameters","type":"heading","level":3},{"inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that we also needed to specify the type of our parameter."}],"type":"paragraph"},{"text":"Same Types","anchor":"Same-Types","type":"heading","level":3},{"inlineContent":[{"text":"Example of correctly handling multiple instances of the same type.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Inside Custom Containers","anchor":"Inside-Custom-Containers"},{"type":"paragraph","inlineContent":[{"text":"You’ve seen factory registrations done within container ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"extensions","type":"text"}]},{"text":", but it should also be noted that we can also create them within our own custom containers.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"type":"codeVoice","code":"service2"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}]},{"type":"paragraph","inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}]},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}]},{"level":3,"type":"heading","text":"Static Factory’s","anchor":"Static-Factorys"},{"type":"paragraph","inlineContent":[{"text":"Example of a static Factory 2.0 registration container.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"can"}]},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","type":"reference"},{"type":"text","text":" property wrappers due to the lack of keyPaths."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"]}]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/registrations"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations"},"references":{"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","title":"Getting Started","kind":"article","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","url":"\/documentation\/factorykit\/resolutions","role":"article","type":"topic","kind":"article","title":"Sample Resolutions"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","role":"symbol","title":"ParameterFactory"}}}
{"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted"]]},"sections":[],"seeAlsoSections":[{"anchor":"Examples","generated":true,"title":"Examples","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Article","role":"article","title":"Sample Registrations"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Basic","level":3,"type":"heading","text":"Basic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}]},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This registered dependency returns a new, unique version of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}]},{"type":"paragraph","inlineContent":[{"text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container.","type":"text"}]},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We prefer the more concise version, and that’s what we’ll use going forward.","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The container helper functions are "},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":" and as such there’s no performance penalty incurred when calling them."}],"type":"paragraph"}],"type":"aside","name":"Note"},{"anchor":"Scopes","level":3,"type":"heading","text":"Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}]},{"code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Constructor-Injection","text":"Constructor Injection","type":"heading"},{"inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Parameters","text":"Parameters","type":"heading"},{"inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note that we also needed to specify the type of our parameter.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Same-Types","text":"Same Types","type":"heading"},{"inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"type":"codeListing"},{"text":"Inside Custom Containers","anchor":"Inside-Custom-Containers","level":3,"type":"heading"},{"inlineContent":[{"text":"You’ve seen factory registrations done within container ","type":"text"},{"inlineContent":[{"type":"text","text":"extensions"}],"type":"emphasis"},{"text":", but it should also be noted that we can also create them within our own custom containers.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"type":"codeVoice","code":"service2"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}],"type":"paragraph"},{"inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}],"type":"paragraph"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle."}]}],"name":"Warning","type":"aside"},{"inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}],"type":"paragraph"},{"text":"Static Factory’s","anchor":"Static-Factorys","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Example of a static Factory 2.0 registration container."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"can"}]},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","isActive":true},{"type":"text","text":" property wrappers due to the lack of keyPaths."}],"type":"paragraph"},{"inlineContent":[{"text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/factorykit\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Registrations","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","kind":"symbol","title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"title":"Getting Started","role":"collectionGroup","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Resolutions":{"title":"Sample Resolutions","url":"\/documentation\/factorykit\/resolutions","abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolutions","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory"}}}
{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper instance if it hasn’t already been resolved."}]},{"type":"codeListing","syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/lazyinjected\/resolvedornil()"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected"]]},"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected\/resolvedOrNil()"},"metadata":{"modules":[{"name":"FactoryKit"}],"role":"symbol","roleHeading":"Instance Method","title":"resolvedOrNil()","externalID":"s:10FactoryKit12LazyInjectedV13resolvedOrNilxSgyF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"symbolKind":"method"},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected/resolvedOrNil()":{"role":"symbol","abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"url":"\/documentation\/factorykit\/lazyinjected\/resolvedornil()","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected\/resolvedOrNil()","type":"topic","title":"resolvedOrNil()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected"}}}
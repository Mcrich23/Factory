{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"seeAlsoSections":[{"title":"Advanced Topics","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"],"anchor":"Advanced-Topics"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some dependency injection systems offer functionality known as tagging. Once tagged, you can ask the system for a list of all registered dependencies that conform to that tag."}]},{"syntax":"swift","type":"codeListing","code":["let processors = container.resolve(tagged: \"processor\")"]},{"type":"paragraph","inlineContent":[{"text":"Sometimes the tag is explicitly defined during the registration process, like .tag(“processors”). In other systems, you might ask the system for everything registered that conforms to a specific type.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let processors = container.resolve(Processing.self)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Doing this sort of thing in Factory is somewhat problematic, in that in most cases for most instances there "},{"inlineContent":[{"text":"isn’t","type":"text"}],"type":"emphasis"},{"type":"text","text":" a registration phase. Factory’s are lazy creatures, and they’re not evaluated until the Factory is requested."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So what can we do?"}]},{"anchor":"Simple-Solution","type":"heading","level":2,"text":"Simple Solution"},{"type":"paragraph","inlineContent":[{"text":"Consider the following Factory registrations.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension SharedContainer {","    var processor1: Factory<Processor> { self { Processor1() } }","    var processor2: Factory<Processor> { self { Processor2() } }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now the following container extension added to our main application."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    public static var processors: [KeyPath<Container, Factory<Processor>>] = [","        \\.processor1,","        \\.processor2,","    ]","}"]},{"type":"paragraph","inlineContent":[{"text":"Here we build a simple list of keyPaths that defines all known processors. As discussed in multiple module support, the root application should know what systems are available to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Once that’s done, accomplishing the lookup and getting the list of actual processors is a piece of cake.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    public func processors() -> [Processor] {","        Container.processors.map { self[keyPath: $0]() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"And since the keyPath definition guarantees the type of the object, the array will also be type safe, something that can be difficult to accomplish with simple string-based tagging systems.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But we can do more."}]},{"anchor":"Appending-New-Processors","type":"heading","level":2,"text":"Appending New Processors"},{"type":"paragraph","inlineContent":[{"text":"First, note that anything could be added to the array at any point in time.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors.append(\\.processor3)","    }","    var processor3: Factory<Processor> { self { Processor3() } }","}"]},{"anchor":"Multiple-Modules-and-Anonymous-Processors","type":"heading","level":2,"text":"Multiple Modules and Anonymous Processors"},{"type":"paragraph","inlineContent":[{"text":"Above we mentioned that that main app should know what processors are available to it. That said, sometime you may not.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In that case you could ask a set of modules for their own, anonymous contributions.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors += ModuleA.availableProcessors()","        Container.processors += ModuleB.availableProcessors()","        Container.processors += ModuleC.availableProcessors()","    }","}"]},{"anchor":"Priority","type":"heading","level":2,"text":"Priority"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The basic solution can obviously be expanded as needed, perhaps by creating a struct that allows for tag priority."}]},{"syntax":"swift","type":"codeListing","code":["struct Tag<T> {","    let path: KeyPath<Container, Factory<T>>","    let priority: Int","}","","extension Container {","    static var processors: [Tag<Processor>] = [","        Tag(path: \\.processor1, priority: 20),","        Tag(path: \\.processor2, priority: 10),","    ]","    func processors() -> [Processor] {","        Container.processors","            .sorted(by: { $0.priority < $1.priority })","            .map { self[keyPath: $0.path]() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While Factory doesn’t currently support tags out of the box, there are a lot of ways to roll your own solutions using the tools Factory provides."}]}],"kind":"content"}],"metadata":{"roleHeading":"Article","modules":[{"name":"FactoryKit"}],"role":"article","title":"Tags"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/tags"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","kind":"article","type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"url":"\/documentation\/factorykit\/optionals","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","role":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","url":"\/documentation\/factorykit\/modules","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","type":"topic","url":"\/documentation\/factorykit\/functional","title":"Functional Injection","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Design":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","kind":"article","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","type":"topic"}}}
{"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"],"anchor":"Advanced-Topics","title":"Advanced Topics"}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Some dependency injection systems offer functionality known as tagging. Once tagged, you can ask the system for a list of all registered dependencies that conform to that tag.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let processors = container.resolve(tagged: \"processor\")"]},{"inlineContent":[{"text":"Sometimes the tag is explicitly defined during the registration process, like .tag(“processors”). In other systems, you might ask the system for everything registered that conforms to a specific type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let processors = container.resolve(Processing.self)"]},{"inlineContent":[{"text":"Doing this sort of thing in Factory is somewhat problematic, in that in most cases for most instances there ","type":"text"},{"inlineContent":[{"text":"isn’t","type":"text"}],"type":"emphasis"},{"text":" a registration phase. Factory’s are lazy creatures, and they’re not evaluated until the Factory is requested.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"So what can we do?"}],"type":"paragraph"},{"text":"Simple Solution","level":2,"type":"heading","anchor":"Simple-Solution"},{"inlineContent":[{"type":"text","text":"Consider the following Factory registrations."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension SharedContainer {","    var processor1: Factory<Processor> { self { Processor1() } }","    var processor2: Factory<Processor> { self { Processor2() } }","}"]},{"inlineContent":[{"type":"text","text":"And now the following container extension added to our main application."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    public static var processors: [KeyPath<Container, Factory<Processor>>] = [","        \\.processor1,","        \\.processor2,","    ]","}"]},{"inlineContent":[{"type":"text","text":"Here we build a simple list of keyPaths that defines all known processors. As discussed in multiple module support, the root application should know what systems are available to it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Once that’s done, accomplishing the lookup and getting the list of actual processors is a piece of cake."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    public func processors() -> [Processor] {","        Container.processors.map { self[keyPath: $0]() }","    }","}"]},{"inlineContent":[{"type":"text","text":"And since the keyPath definition guarantees the type of the object, the array will also be type safe, something that can be difficult to accomplish with simple string-based tagging systems."}],"type":"paragraph"},{"inlineContent":[{"text":"But we can do more.","type":"text"}],"type":"paragraph"},{"text":"Appending New Processors","level":2,"type":"heading","anchor":"Appending-New-Processors"},{"inlineContent":[{"type":"text","text":"First, note that anything could be added to the array at any point in time."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors.append(\\.processor3)","    }","    var processor3: Factory<Processor> { self { Processor3() } }","}"]},{"text":"Multiple Modules and Anonymous Processors","level":2,"type":"heading","anchor":"Multiple-Modules-and-Anonymous-Processors"},{"inlineContent":[{"text":"Above we mentioned that that main app should know what processors are available to it. That said, sometime you may not.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In that case you could ask a set of modules for their own, anonymous contributions.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors += ModuleA.availableProcessors()","        Container.processors += ModuleB.availableProcessors()","        Container.processors += ModuleC.availableProcessors()","    }","}"]},{"text":"Priority","level":2,"type":"heading","anchor":"Priority"},{"inlineContent":[{"text":"The basic solution can obviously be expanded as needed, perhaps by creating a struct that allows for tag priority.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Tag<T> {","    let path: KeyPath<Container, Factory<T>>","    let priority: Int","}","","extension Container {","    static var processors: [Tag<Processor>] = [","        Tag(path: \\.processor1, priority: 20),","        Tag(path: \\.processor2, priority: 10),","    ]","    func processors() -> [Processor] {","        Container.processors","            .sorted(by: { $0.priority < $1.priority })","            .map { self[keyPath: $0.path]() }","    }","}"]},{"inlineContent":[{"type":"text","text":"While Factory doesn’t currently support tags out of the box, there are a lot of ways to roll your own solutions using the tools Factory provides."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/tags"]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Tags","modules":[{"name":"FactoryKit"}]},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"references":{"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","kind":"article","url":"\/documentation\/factorykit\/design"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","type":"topic","kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","url":"\/documentation\/factorykit\/modules","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","url":"\/documentation\/factorykit\/optionals","title":"Optionals and Dynamic Registration","type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"type":"topic","title":"Functional Injection","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","kind":"article","url":"\/documentation\/factorykit\/functional"}}}
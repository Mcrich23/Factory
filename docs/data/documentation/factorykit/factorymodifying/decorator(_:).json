{"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decorator"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"decorator"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying\/T","preciseIdentifier":"s:10FactoryKit0A9ModifyingP1TQa","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"This includes previously created items that may have been cached by a scope.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var decoratedService: Factory<ParentChildService> {","   self { ParentChildService() }","       .decorated {","           $0.child.parent = $0","       }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown, decorator can come in handy when you need to perform some operation or manipulation after the fact."}]}]}],"variants":[{"paths":["\/documentation\/factorykit\/factorymodifying\/decorator(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying\/decorator(_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Adds a factory specific decorator. The decorator will ","type":"text"},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"text":" be called with the resolved dependency","type":"text"},{"text":" ","type":"text"},{"text":"for further examination or manipulation.","type":"text"}],"metadata":{"symbolKind":"method","extendedModule":"FactoryKit","title":"decorator(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decorator","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A9ModifyingP1TQa"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"externalID":"s:10FactoryKit0A9ModifyingPAAE9decoratoryxy1TQzYbcF","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"FactoryKit"}]},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying"]]},"kind":"symbol","references":{"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"title":"FactoryModifying","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying/decorator(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decorator"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A9ModifyingP1TQa","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","role":"symbol","type":"topic","title":"decorator(_:)","url":"\/documentation\/factorykit\/factorymodifying\/decorator(_:)","abstract":[{"text":"Adds a factory specific decorator. The decorator will ","type":"text"},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"text":" be called with the resolved dependency","type":"text"},{"text":" ","type":"text"},{"text":"for further examination or manipulation.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying\/decorator(_:)"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying/T":{"abstract":[{"type":"text","text":"The return type of the Factory’s dependency."}],"type":"topic","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"T"}],"kind":"symbol","title":"T","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying\/T","role":"symbol","url":"\/documentation\/factorykit\/factorymodifying\/t"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"}}}
{"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"]]},"sections":[],"abstract":[{"type":"text","text":"Syntactic sugar defines defines unique scope. See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","isActive":true},{"type":"text","text":"."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unique","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"syntax":"swift","code":["var service: Factory<ServiceType> {","    self { MyService() }","        .unique","}"],"type":"codeListing"},{"inlineContent":[{"text":"While you can add the modifier, Factoryâ€™s are unique by default.","type":"text"}],"type":"paragraph"}]}],"metadata":{"symbolKind":"property","modules":[{"name":"FactoryKit"}],"externalID":"s:10FactoryKit0A9ModifyingPAAE6uniquexvp::SYNTHESIZED::s:10FactoryKit09ParameterA0V","title":"unique","role":"symbol","roleHeading":"Instance Property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unique","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"extendedModule":"FactoryKit"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/parameterfactory\/unique"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/unique","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit/Scope":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","url":"\/documentation\/factorykit\/scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"code":"Singleton","type":"codeVoice"},{"type":"text","text":", "},{"code":"Cached","type":"codeVoice"},{"type":"text","text":", "},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"Scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/unique":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/unique","abstract":[{"text":"Syntactic sugar defines defines unique scope. See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","isActive":true,"type":"reference"},{"text":".","type":"text"}],"title":"unique","role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unique","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/factorykit\/parameterfactory\/unique","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"}}}
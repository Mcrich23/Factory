{"seeAlsoSections":[{"generated":true,"anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing"}],"sections":[],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current ","type":"text"},{"inlineContent":[{"type":"text","text":"context"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"What if, for example, you ","type":"text"},{"inlineContent":[{"text":"never","type":"text"}],"type":"strong"},{"text":" want your application’s analytics library to be called when running unit tests?","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Piece of cake. Just register a new override for that particular context.","type":"text"}]},{"type":"codeListing","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Factory makes it easy.","type":"text"}]},{"type":"heading","level":2,"anchor":"Contexts","text":"Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"arg(String)","type":"text"}],"type":"strong"},{"text":" - application is launched with a particular argument.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"args([String])"}],"type":"strong"},{"type":"text","text":" - application is launched with one of several arguments."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" - application is running in Xcode Preview mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"test"}],"type":"strong"},{"text":" - application is running in Xcode Unit Test mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"debug"}]},{"type":"text","text":" - application is running in Xcode DEBUG mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"simulator"}],"type":"strong"},{"text":" - application is running within an Xcode simulator","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]},{"type":"text","text":" - application is running on an actual device"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"type":"heading","level":2,"anchor":"Some-Examples","text":"Some Examples"},{"type":"heading","level":3,"anchor":"-onTest","text":"• onTest"},{"type":"paragraph","inlineContent":[{"text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest.","type":"text"}]},{"type":"codeListing","code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}]},{"type":"codeListing","code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}]},{"type":"codeListing","code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Using onTest is much easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"type":"heading","level":3,"anchor":"-onPreview","text":"• onPreview"},{"type":"paragraph","inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}]},{"type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can, of course, still use the mechanisms shown in ","type":"text"},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":3,"anchor":"-onDebug","text":"• onDebug"},{"type":"paragraph","inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"That there’s no ","type":"text"},{"type":"codeVoice","code":"release"},{"text":" context. Just use the standard ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" syntax in that case.","type":"text"}]}]},{"type":"heading","level":3,"anchor":"-onSimulator--onDevice","text":"•  onSimulator \/ onDevice"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds."}]},{"type":"heading","level":3,"anchor":"-onArg","text":"• onArg"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"arg","type":"codeVoice"},{"text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown in the "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","type":"reference","isActive":true},{"type":"text","text":" section the test case itself is pretty standard."}]},{"type":"codeListing","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change."}]},{"type":"codeListing","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"-onArgs","text":"• onArgs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed."}]},{"type":"codeListing","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Runtime-Arguments","text":"Runtime Arguments"},{"type":"paragraph","inlineContent":[{"text":"You can also add and remove your own arguments at runtime. Consider this…","type":"text"}]},{"type":"codeListing","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Multiple-Contexts","text":"Multiple Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you may have noticed above in the "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of specifying separate services depending on context."}]},{"type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}]},{"type":"codeListing","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Which brings us to…","type":"text"}]},{"type":"heading","level":2,"anchor":"Context-Precedence","text":"Context Precedence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"arg[s]","type":"text"}],"type":"strong"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"preview","type":"text"}]},{"type":"text","text":" *"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"simulator"}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"text":" *","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"registered factory","type":"text"}]},{"text":" (if any)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"original factory","type":"text"}]}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds.","type":"text"}]},{"type":"heading","level":2,"anchor":"Global-Context","text":"Global Context"},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"onArg","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"onDebug","type":"codeVoice"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}]},{"type":"heading","level":2,"anchor":"Changing-a-Context","text":"Changing a Context"},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"manually"}]},{"text":" clear the scope cache for that object.","type":"text"}]},{"type":"codeListing","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"syntax":"swift"},{"type":"aside","name":"Warning","style":"warning","content":[{"inlineContent":[{"type":"text","text":"With "},{"code":"reset","type":"codeVoice"},{"type":"text","text":" make sure you specify that you only want to clear the scope. Calling "},{"code":"reset","type":"codeVoice"},{"type":"text","text":" without a parameter clears everything, including contexts like the one you just set!"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"See the section on ","type":"text"},{"inlineContent":[{"text":"The Factory Wins","type":"text"}],"type":"emphasis"},{"text":" in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","type":"reference"},{"text":" for more information on this and other scenarios.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/contexts"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Article","title":"Contexts","role":"article"},"references":{"doc://FactoryKit/documentation/FactoryKit/Previews":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","url":"\/documentation\/factorykit\/previews","type":"topic","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article","title":"SwiftUI Previews"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","url":"\/documentation\/factorykit\/debugging","role":"article","kind":"article","title":"Debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}]},"doc://FactoryKit/documentation/FactoryKit/Chains":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","type":"topic","url":"\/documentation\/factorykit\/chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","title":"Circular Dependency Chains"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","kind":"article","type":"topic","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","kind":"article","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","url":"\/documentation\/factorykit\/testing"}}}
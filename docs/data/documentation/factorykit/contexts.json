{"metadata":{"roleHeading":"Article","title":"Contexts","modules":[{"name":"FactoryKit"}],"role":"article"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/contexts"]}],"kind":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"seeAlsoSections":[{"anchor":"Development-and-Testing","title":"Development and Testing","generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current ","type":"text"},{"inlineContent":[{"type":"text","text":"context"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, you "},{"type":"strong","inlineContent":[{"text":"never","type":"text"}]},{"type":"text","text":" want your application’s analytics library to be called when running unit tests?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}]},{"syntax":"swift","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes it easy."}]},{"text":"Contexts","anchor":"Contexts","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg(String)"}]},{"text":" - application is launched with a particular argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"args([String])"}]},{"type":"text","text":" - application is launched with one of several arguments."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"preview","type":"text"}],"type":"strong"},{"type":"text","text":" - application is running in Xcode Preview mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"debug"}],"type":"strong"},{"text":" - application is running in Xcode DEBUG mode","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"simulator","type":"text"}],"type":"strong"},{"text":" - application is running within an Xcode simulator","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]},{"type":"text","text":" - application is running on an actual device"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"text":"Some Examples","anchor":"Some-Examples","type":"heading","level":2},{"text":"• onTest","anchor":"-onTest","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}]},{"syntax":"swift","code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}]},{"syntax":"swift","code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}]},{"syntax":"swift","code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Using onTest is much easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow.","type":"text"}]}]},{"text":"• onPreview","anchor":"-onPreview","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews."}]},{"syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Which obviously makes your preview code itself much simpler.","type":"text"}]},{"syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can, of course, still use the mechanisms shown in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"text":"• onDebug","anchor":"-onDebug","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests."}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"That there’s no ","type":"text"},{"type":"codeVoice","code":"release"},{"text":" context. Just use the standard ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" syntax in that case.","type":"text"}]}]},{"text":"•  onSimulator \/ onDevice","anchor":"-onSimulator--onDevice","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds.","type":"text"}]},{"text":"• onArg","anchor":"-onArg","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}]},{"type":"paragraph","inlineContent":[{"text":"As shown in the ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","isActive":true,"type":"reference"},{"text":" section the test case itself is pretty standard.","type":"text"}]},{"syntax":"swift","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change."}]},{"syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"type":"codeListing"},{"text":"• onArgs","anchor":"-onArgs","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed."}]},{"syntax":"swift","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"type":"codeListing"},{"text":"Runtime Arguments","anchor":"Runtime-Arguments","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}]},{"syntax":"swift","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"],"type":"codeListing"},{"text":"Multiple Contexts","anchor":"Multiple-Contexts","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you may have noticed above in the "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of specifying separate services depending on context.","type":"text"}]},{"syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}]},{"syntax":"swift","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Which brings us to…","type":"text"}]},{"text":"Context Precedence","anchor":"Context-Precedence","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg[s]"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"preview","type":"text"}],"type":"strong"},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"test"}],"type":"strong"},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"registered factory"}]},{"type":"text","text":" (if any)"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"original factory"}],"type":"strong"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds.","type":"text"}]},{"text":"Global Context","anchor":"Global-Context","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"onArg"},{"type":"text","text":" and "},{"type":"codeVoice","code":"onDebug"},{"type":"text","text":" and other context modifiers basically define how the app should respond to that particular context."}]},{"text":"Changing a Context","anchor":"Changing-a-Context","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to ","type":"text"},{"inlineContent":[{"text":"manually","type":"text"}],"type":"strong"},{"text":" clear the scope cache for that object.","type":"text"}]},{"syntax":"swift","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"type":"codeListing"},{"name":"Warning","type":"aside","style":"warning","content":[{"inlineContent":[{"text":"With ","type":"text"},{"code":"reset","type":"codeVoice"},{"text":" make sure you specify that you only want to clear the scope. Calling ","type":"text"},{"code":"reset","type":"codeVoice"},{"text":" without a parameter clears everything, including contexts like the one you just set!","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the section on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"The Factory Wins"}]},{"type":"text","text":" in "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","isActive":true},{"type":"text","text":" for more information on this and other scenarios."}]}],"kind":"content"}],"references":{"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","role":"article","type":"topic","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"title":"Debugging","type":"topic","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factorykit\/debugging","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"role":"article","kind":"article","title":"Circular Dependency Chains","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","url":"\/documentation\/factorykit\/chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}]},"doc://FactoryKit/documentation/FactoryKit/Previews":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","title":"SwiftUI Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"url":"\/documentation\/factorykit\/previews"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","kind":"article","title":"Testing","type":"topic","role":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"url":"\/documentation\/factorykit\/testing"}}}
{"variants":[{"paths":["\/documentation\/factorykit\/contexts"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing","anchor":"Development-and-Testing","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current "},{"type":"emphasis","inlineContent":[{"text":"context","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"What if, for example, you ","type":"text"},{"type":"strong","inlineContent":[{"text":"never","type":"text"}]},{"text":" want your application’s analytics library to be called when running unit tests?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"]},{"inlineContent":[{"text":"Factory makes it easy.","type":"text"}],"type":"paragraph"},{"anchor":"Contexts","level":2,"type":"heading","text":"Contexts"},{"inlineContent":[{"text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg(String)"}]},{"type":"text","text":" - application is launched with a particular argument."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"args([String])"}]},{"type":"text","text":" - application is launched with one of several arguments."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"preview","type":"text"}],"type":"strong"},{"text":" - application is running in Xcode Preview mode","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"type":"text","text":" - application is running in Xcode DEBUG mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]},{"text":" - application is running within an Xcode simulator","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]},{"type":"text","text":" - application is running on an actual device"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Let’s dive in.","type":"text"}],"type":"paragraph"},{"anchor":"Some-Examples","level":2,"type":"heading","text":"Some Examples"},{"anchor":"-onTest","level":3,"type":"heading","text":"• onTest"},{"inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"]},{"inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.analytics","    .onTest { MockAnalyticsEngine() }"]},{"inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"]},{"inlineContent":[{"text":"Using onTest is much easier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow.","type":"text"}]}],"type":"paragraph"},{"anchor":"-onPreview","level":3,"type":"heading","text":"• onPreview"},{"inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }"]},{"inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"]},{"inlineContent":[{"type":"text","text":"You can, of course, still use the mechanisms shown in "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"-onDebug","level":3,"type":"heading","text":"• onDebug"},{"inlineContent":[{"type":"text","text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"That there’s no "},{"code":"release","type":"codeVoice"},{"type":"text","text":" context. Just use the standard "},{"code":"register","type":"codeVoice"},{"type":"text","text":" syntax in that case."}]}],"style":"note","type":"aside"},{"anchor":"-onSimulator--onDevice","level":3,"type":"heading","text":"•  onSimulator \/ onDevice"},{"inlineContent":[{"text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds.","type":"text"}],"type":"paragraph"},{"anchor":"-onArg","level":3,"type":"heading","text":"• onArg"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}],"type":"paragraph"},{"inlineContent":[{"text":"As shown in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","type":"reference"},{"text":" section the test case itself is pretty standard.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "]},{"inlineContent":[{"type":"text","text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"]},{"anchor":"-onArgs","level":3,"type":"heading","text":"• onArgs"},{"inlineContent":[{"text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"]},{"anchor":"Runtime-Arguments","level":2,"type":"heading","text":"Runtime Arguments"},{"inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"]},{"anchor":"Multiple-Contexts","level":2,"type":"heading","text":"Multiple Contexts"},{"inlineContent":[{"text":"As you may have noticed above in the ","type":"text"},{"code":"arg","type":"codeVoice"},{"text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example of specifying separate services depending on context."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"]},{"inlineContent":[{"text":"And here’s an example saying we want the same dependency under multiple contexts.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"]},{"inlineContent":[{"type":"text","text":"Which brings us to…"}],"type":"paragraph"},{"anchor":"Context-Precedence","level":2,"type":"heading","text":"Context Precedence"},{"inlineContent":[{"text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg[s]"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" *"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"simulator"}],"type":"strong"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"debug","type":"text"}],"type":"strong"},{"text":" *","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"registered factory"}],"type":"strong"},{"text":" (if any)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"original factory"}]}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds.","type":"text"}],"type":"paragraph"},{"anchor":"Global-Context","level":2,"type":"heading","text":"Global Context"},{"inlineContent":[{"type":"text","text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"onArg","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"onDebug","type":"codeVoice"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}],"type":"paragraph"},{"anchor":"Changing-a-Context","level":2,"type":"heading","text":"Changing a Context"},{"inlineContent":[{"type":"text","text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to "},{"type":"strong","inlineContent":[{"type":"text","text":"manually"}]},{"type":"text","text":" clear the scope cache for that object."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"]},{"name":"Warning","content":[{"inlineContent":[{"type":"text","text":"With "},{"type":"codeVoice","code":"reset"},{"type":"text","text":" make sure you specify that you only want to clear the scope. Calling "},{"type":"codeVoice","code":"reset"},{"type":"text","text":" without a parameter clears everything, including contexts like the one you just set!"}],"type":"paragraph"}],"style":"warning","type":"aside"},{"inlineContent":[{"text":"See the section on ","type":"text"},{"inlineContent":[{"text":"The Factory Wins","type":"text"}],"type":"emphasis"},{"text":" in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","isActive":true,"type":"reference"},{"text":" for more information on this and other scenarios.","type":"text"}],"type":"paragraph"}]}],"metadata":{"role":"article","modules":[{"name":"FactoryKit"}],"roleHeading":"Article","title":"Contexts"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","interfaceLanguage":"swift"},"references":{"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"title":"SwiftUI Previews","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","url":"\/documentation\/factorykit\/previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","kind":"article","type":"topic","title":"Factory Modifiers","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","kind":"article","url":"\/documentation\/factorykit\/testing","title":"Testing","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"title":"Circular Dependency Chains","kind":"article","role":"article","url":"\/documentation\/factorykit\/chains"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"url":"\/documentation\/factorykit\/debugging","type":"topic","title":"Debugging"}}}
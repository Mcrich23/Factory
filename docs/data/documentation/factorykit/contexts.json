{"sections":[],"abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/contexts"]}],"metadata":{"role":"article","title":"Contexts","roleHeading":"Article","modules":[{"name":"FactoryKit"}]},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing","generated":true,"anchor":"Development-and-Testing"}],"kind":"article","primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current "},{"type":"emphasis","inlineContent":[{"text":"context","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"What if, for example, you ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"strong"},{"text":" want your application’s analytics library to be called when running unit tests?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}]},{"code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes it easy."}]},{"level":2,"text":"Contexts","type":"heading","anchor":"Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"arg(String)","type":"text"}]},{"type":"text","text":" - application is launched with a particular argument."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"args([String])","type":"text"}]},{"type":"text","text":" - application is launched with one of several arguments."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" - application is running in Xcode Preview mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"test","type":"text"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"type":"text","text":" - application is running in Xcode DEBUG mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]},{"text":" - application is running within an Xcode simulator","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]},{"text":" - application is running on an actual device","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"level":2,"text":"Some Examples","type":"heading","anchor":"Some-Examples"},{"level":3,"anchor":"-onTest","type":"heading","text":"• onTest"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}]},{"code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There’s also a shortcut version:","type":"text"}]},{"code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself.","type":"text"}]},{"code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Using onTest is much easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"level":3,"anchor":"-onPreview","type":"heading","text":"• onPreview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews."}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }"]},{"type":"paragraph","inlineContent":[{"text":"Which obviously makes your preview code itself much simpler.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"You can, of course, still use the mechanisms shown in ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"anchor":"-onDebug","text":"• onDebug","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"That there’s no "},{"type":"codeVoice","code":"release"},{"type":"text","text":" context. Just use the standard "},{"type":"codeVoice","code":"register"},{"type":"text","text":" syntax in that case."}],"type":"paragraph"}]},{"anchor":"-onSimulator--onDevice","text":"•  onSimulator \/ onDevice","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds.","type":"text"}]},{"type":"heading","anchor":"-onArg","level":3,"text":"• onArg"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"arg"},{"text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"As shown in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing"},{"text":" section the test case itself is pretty standard.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"]},{"type":"heading","anchor":"-onArgs","level":3,"text":"• onArgs"},{"type":"paragraph","inlineContent":[{"text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"]},{"type":"heading","anchor":"Runtime-Arguments","level":2,"text":"Runtime Arguments"},{"type":"paragraph","inlineContent":[{"text":"You can also add and remove your own arguments at runtime. Consider this…","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"]},{"type":"heading","anchor":"Multiple-Contexts","level":2,"text":"Multiple Contexts"},{"type":"paragraph","inlineContent":[{"text":"As you may have noticed above in the ","type":"text"},{"type":"codeVoice","code":"arg"},{"text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of specifying separate services depending on context.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"]},{"type":"paragraph","inlineContent":[{"text":"And here’s an example saying we want the same dependency under multiple contexts.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"]},{"type":"paragraph","inlineContent":[{"text":"Which brings us to…","type":"text"}]},{"type":"heading","anchor":"Context-Precedence","level":2,"text":"Context Precedence"},{"type":"paragraph","inlineContent":[{"text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"arg[s]","type":"text"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"preview","type":"text"}]},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"test","type":"text"}]},{"text":" *","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"device","type":"text"}],"type":"strong"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"debug","type":"text"}],"type":"strong"},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"registered factory"}]},{"text":" (if any)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"original factory"}]}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds.","type":"text"}]},{"type":"heading","anchor":"Global-Context","level":2,"text":"Global Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"onArg","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"onDebug","type":"codeVoice"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}]},{"type":"heading","anchor":"Changing-a-Context","level":2,"text":"Changing a Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to "},{"type":"strong","inlineContent":[{"text":"manually","type":"text"}]},{"type":"text","text":" clear the scope cache for that object."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"]},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"With ","type":"text"},{"code":"reset","type":"codeVoice"},{"text":" make sure you specify that you only want to clear the scope. Calling ","type":"text"},{"code":"reset","type":"codeVoice"},{"text":" without a parameter clears everything, including contexts like the one you just set!","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the section on "},{"type":"emphasis","inlineContent":[{"text":"The Factory Wins","type":"text"}]},{"type":"text","text":" in "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","isActive":true},{"type":"text","text":" for more information on this and other scenarios."}]}],"kind":"content"}],"references":{"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","type":"topic","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","type":"topic","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factorykit\/chains","role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"title":"SwiftUI Previews","kind":"article","role":"article","url":"\/documentation\/factorykit\/previews","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","type":"topic","kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","role":"article"}}}
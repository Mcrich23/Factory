{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts"},"seeAlsoSections":[{"title":"Development and Testing","generated":true,"anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current "},{"type":"emphasis","inlineContent":[{"type":"text","text":"context"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, you "},{"type":"strong","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" want your application’s analytics library to be called when running unit tests?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}]},{"code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes it easy."}]},{"anchor":"Contexts","text":"Contexts","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"arg(String)","type":"text"}]},{"text":" - application is launched with a particular argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"args([String])"}],"type":"strong"},{"type":"text","text":" - application is launched with one of several arguments."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"text":" - application is running in Xcode Preview mode","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"test","type":"text"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"text":" - application is running in Xcode DEBUG mode","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]},{"type":"text","text":" - application is running within an Xcode simulator"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"device","type":"text"}]},{"text":" - application is running on an actual device","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"anchor":"Some-Examples","text":"Some Examples","type":"heading","level":2},{"anchor":"-onTest","text":"• onTest","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest.","type":"text"}]},{"code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"There’s also a shortcut version:","type":"text"}]},{"code":["container.analytics","    .onTest { MockAnalyticsEngine() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}]},{"code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Using onTest is much easier.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"anchor":"-onPreview","text":"• onPreview","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}]},{"code":["container.myServiceType","    .onPreview { MockService() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Which obviously makes your preview code itself much simpler.","type":"text"}]},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can, of course, still use the mechanisms shown in "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","isActive":true},{"type":"text","text":"."}]},{"anchor":"-onDebug","text":"• onDebug","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"That there’s no ","type":"text"},{"type":"codeVoice","code":"release"},{"text":" context. Just use the standard ","type":"text"},{"type":"codeVoice","code":"register"},{"text":" syntax in that case.","type":"text"}]}],"type":"aside","name":"Note"},{"anchor":"-onSimulator--onDevice","text":"•  onSimulator \/ onDevice","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds."}]},{"anchor":"-onArg","text":"• onArg","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}]},{"type":"paragraph","inlineContent":[{"text":"As shown in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","isActive":true},{"text":" section the test case itself is pretty standard.","type":"text"}]},{"code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change.","type":"text"}]},{"code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"-onArgs","text":"• onArgs","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed."}]},{"code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"syntax":"swift","type":"codeListing"},{"anchor":"Runtime-Arguments","text":"Runtime Arguments","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}]},{"code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"],"syntax":"swift","type":"codeListing"},{"anchor":"Multiple-Contexts","text":"Multiple Contexts","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"As you may have noticed above in the ","type":"text"},{"code":"arg","type":"codeVoice"},{"text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of specifying separate services depending on context."}]},{"code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}]},{"code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which brings us to…"}]},{"anchor":"Context-Precedence","text":"Context Precedence","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg[s]"}]}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"preview","type":"text"}]},{"text":" *","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"test","type":"text"}],"type":"strong"},{"type":"text","text":" *"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"device","type":"text"}],"type":"strong"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"debug","type":"text"}]},{"text":" *","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"registered factory","type":"text"}]},{"text":" (if any)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"original factory","type":"text"}],"type":"strong"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds."}]},{"anchor":"Global-Context","text":"Global Context","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"onArg","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"onDebug","type":"codeVoice"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}]},{"anchor":"Changing-a-Context","text":"Changing a Context","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to "},{"type":"strong","inlineContent":[{"type":"text","text":"manually"}]},{"type":"text","text":" clear the scope cache for that object."}]},{"code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"syntax":"swift","type":"codeListing"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"text":"With ","type":"text"},{"type":"codeVoice","code":"reset"},{"text":" make sure you specify that you only want to clear the scope. Calling ","type":"text"},{"type":"codeVoice","code":"reset"},{"text":" without a parameter clears everything, including contexts like the one you just set!","type":"text"}]}],"type":"aside","name":"Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the section on "},{"type":"emphasis","inlineContent":[{"type":"text","text":"The Factory Wins"}]},{"type":"text","text":" in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},{"type":"text","text":" for more information on this and other scenarios."}]}]}],"variants":[{"paths":["\/documentation\/factorykit\/contexts"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"sections":[],"metadata":{"modules":[{"name":"FactoryKit"}],"title":"Contexts","roleHeading":"Article","role":"article"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://FactoryKit/documentation/FactoryKit/Debugging":{"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","type":"topic","kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","title":"SwiftUI Previews","role":"article","type":"topic","url":"\/documentation\/factorykit\/previews"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","kind":"article","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","url":"\/documentation\/factorykit\/chains","type":"topic"}}}
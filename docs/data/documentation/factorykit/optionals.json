{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Let’s take a look.","type":"text"}]},{"text":"Dynamic Registration","level":2,"type":"heading","anchor":"Dynamic-Registration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"type":"paragraph","inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Now let’s take a look at a dynamic registration in action.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example:"}]},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"text":"Explicitly Unwrapped Optionals","level":2,"type":"heading","anchor":"Explicitly-Unwrapped-Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you "},{"inlineContent":[{"type":"text","text":"could"}],"type":"emphasis"},{"type":"text","text":" explicitly unwrap the optional…"}]},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"text":"Your code is guaranteed to be safe.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}]},{"text":"Optionals and Multiple Modules","level":2,"type":"heading","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","isActive":true,"type":"reference"},{"text":" for more.","type":"text"}]}],"kind":"content"}],"sections":[],"metadata":{"title":"Optionals and Dynamic Registration","modules":[{"name":"FactoryKit"}],"role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics","generated":true}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","kind":"article","url":"\/documentation\/factorykit\/design"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"type":"topic","title":"Functional Injection","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","kind":"article","url":"\/documentation\/factorykit\/functional"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","url":"\/documentation\/factorykit\/modules","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","type":"topic","kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article"}}}
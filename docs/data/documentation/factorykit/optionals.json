{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"sections":[],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"level":2,"type":"heading","anchor":"Dynamic-Registration","text":"Dynamic Registration"},{"type":"paragraph","inlineContent":[{"text":"Consider the following optional factory.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"type":"paragraph","inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example:"}]},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"level":2,"type":"heading","anchor":"Explicitly-Unwrapped-Optionals","text":"Explicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"type":"text","text":" explicitly unwrap the optional…"}]},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"type":"codeVoice","code":"@OptionalInjected"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"type":"codeVoice","code":"@LazyInjected"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}]},{"level":2,"type":"heading","anchor":"Optionals-and-Multiple-Modules","text":"Optionals and Multiple Modules"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},{"type":"text","text":" for more."}]}]}],"metadata":{"role":"article","roleHeading":"Article","title":"Optionals and Dynamic Registration","modules":[{"name":"FactoryKit"}]},"references":{"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","type":"topic","url":"\/documentation\/factorykit\/functional","title":"Functional Injection","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"title":"Tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","role":"article","kind":"article","url":"\/documentation\/factorykit\/tags","type":"topic","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}]},"doc://FactoryKit/documentation/FactoryKit/Design":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","url":"\/documentation\/factorykit\/modules","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","kind":"article","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","kind":"article","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","type":"topic"}}}
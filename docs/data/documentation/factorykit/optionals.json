{"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"generated":true,"anchor":"Advanced-Topics"}],"metadata":{"modules":[{"name":"FactoryKit"}],"roleHeading":"Article","role":"article","title":"Optionals and Dynamic Registration"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Let’s take a look.","type":"text"}]},{"anchor":"Dynamic-Registration","level":2,"text":"Dynamic Registration","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Now let’s take a look at a dynamic registration in action.","type":"text"}]},{"code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"type":"heading","level":2,"anchor":"Explicitly-Unwrapped-Optionals","text":"Explicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you "},{"inlineContent":[{"type":"text","text":"could"}],"type":"emphasis"},{"type":"text","text":" explicitly unwrap the optional…"}]},{"type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Your code is guaranteed to be safe.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d advise against it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}]},{"level":2,"text":"Optionals and Multiple Modules","type":"heading","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},{"type":"text","text":" for more."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","role":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","kind":"article","type":"topic","url":"\/documentation\/factorykit\/modules"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","type":"topic","title":"Functional Injection","url":"\/documentation\/factorykit\/functional","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","kind":"article","role":"article","url":"\/documentation\/factorykit\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"kind":"article","type":"topic","title":"Tags","url":"\/documentation\/factorykit\/tags","role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic"}}}
{"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics","generated":true}],"metadata":{"title":"Optionals and Dynamic Registration","role":"article","modules":[{"name":"FactoryKit"}],"roleHeading":"Article"},"sections":[],"abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Let’s take a look.","type":"text"}]},{"level":2,"anchor":"Dynamic-Registration","type":"heading","text":"Dynamic Registration"},{"type":"paragraph","inlineContent":[{"text":"Consider the following optional factory.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"type":"codeListing","syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"text":"Explicitly Unwrapped Optionals","type":"heading","anchor":"Explicitly-Unwrapped-Optionals","level":2},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"type":"text","text":"could"}],"type":"emphasis"},{"text":" explicitly unwrap the optional…","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}]},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}]},{"level":2,"text":"Optionals and Multiple Modules","type":"heading","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","type":"reference"},{"text":" for more.","type":"text"}]}],"kind":"content"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"references":{"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","kind":"article","type":"topic","url":"\/documentation\/factorykit\/cycle"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Design":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"role":"article","url":"\/documentation\/factorykit\/modules","type":"topic","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","kind":"article","type":"topic","title":"Factory Modifiers","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article","title":"Functional Injection","url":"\/documentation\/factorykit\/functional","role":"article","type":"topic"}}}
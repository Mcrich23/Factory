{"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Let’s take a look.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Dynamic-Registration","text":"Dynamic Registration"},{"inlineContent":[{"text":"Consider the following optional factory.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"anchor":"Explicitly-Unwrapped-Optionals","level":2,"type":"heading","text":"Explicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"text":"could","type":"text"}],"type":"emphasis"},{"text":" explicitly unwrap the optional…","type":"text"}]},{"code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Your code is guaranteed to be safe.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d advise against it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"code":"@OptionalInjected","type":"codeVoice"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"code":"@LazyInjected","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"text":"removes any cached dependency from its associated scope.","type":"text"}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"type":"heading","level":2,"text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},{"type":"text","text":" for more."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"anchor":"Advanced-Topics","title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"generated":true}],"abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"sections":[],"metadata":{"role":"article","modules":[{"name":"FactoryKit"}],"title":"Optionals and Dynamic Registration","roleHeading":"Article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","references":{"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","kind":"article","type":"topic","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","title":"Tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","kind":"article","type":"topic","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","kind":"article","type":"topic","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"kind":"article","url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","type":"topic","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/Design":{"url":"\/documentation\/factorykit\/design","kind":"article","type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article","title":"Designing Factory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"url":"\/documentation\/factorykit\/functional","kind":"article","type":"topic","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article","title":"Functional Injection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"}}}
{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/optionals"]}],"metadata":{"roleHeading":"Article","role":"article","title":"Optionals and Dynamic Registration","modules":[{"name":"FactoryKit"}]},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Let’s take a look.","type":"text"}],"type":"paragraph"},{"anchor":"Dynamic-Registration","text":"Dynamic Registration","type":"heading","level":2},{"inlineContent":[{"text":"Consider the following optional factory.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"text":"Explicitly Unwrapped Optionals","type":"heading","level":2,"anchor":"Explicitly-Unwrapped-Optionals"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"text":" explicitly unwrap the optional…","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}]},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And also note that calling register also "},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"type":"heading","text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules","level":2},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","isActive":true},{"type":"text","text":" for more."}]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"seeAlsoSections":[{"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"generated":true}],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"references":{"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","title":"Resolution Cycles","url":"\/documentation\/factorykit\/cycle","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"title":"Tags","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","url":"\/documentation\/factorykit\/design","title":"Designing Factory","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","role":"article","type":"topic","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}]},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","title":"Functional Injection","role":"article","type":"topic","url":"\/documentation\/factorykit\/functional","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"kind":"article"}}}
{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"]]},"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"metadata":{"externalID":"s:10FactoryKit0A0V14callAsFunctionxyF","modules":[{"name":"FactoryKit"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"title":"callAsFunction()","role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"An object or service of the desired type."}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the "},{"code":"shared","type":"codeVoice"},{"type":"text","text":" container that’s provided for each"},{"type":"text","text":" "},{"type":"text","text":"and every container type."}]},{"type":"codeListing","code":["let service = Container.shared.service()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resolved instance may be brand new or Factory may return a cached value from the specified "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you’re passing an instance of a container around to your views or view models, just call it directly.","type":"text"}]},{"type":"codeListing","code":["let service = container.service()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency."}]},{"type":"codeListing","code":["@Injected(\\.service) var service: ServiceType"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,"},{"type":"text","text":" "},{"type":"text","text":"so the above example is functionally identical to the "},{"type":"codeVoice","code":"Container.shared.service()"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"type":"text","text":" "},{"type":"text","text":"your own container."}]},{"type":"codeListing","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/factorykit\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()"},"references":{"doc://FactoryKit/documentation/FactoryKit/Scope":{"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"code":"Singleton","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Cached","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Graph","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Shared","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factorykit\/scope","title":"Scope","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory/callAsFunction()":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","url":"\/documentation\/factorykit\/factory\/callasfunction()","type":"topic","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"callAsFunction()","kind":"symbol","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"title":"Factory","url":"\/documentation\/factorykit\/factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"}}}
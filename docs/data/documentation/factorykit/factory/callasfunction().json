{"metadata":{"role":"symbol","title":"callAsFunction()","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"externalID":"s:10FactoryKit0A0V14callAsFunctionxyF","modules":[{"name":"FactoryKit"}]},"variants":[{"paths":["\/documentation\/factorykit\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"An object or service of the desired type.","type":"text"}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the ","type":"text"},{"code":"shared","type":"codeVoice"},{"text":" container that’s provided for each","type":"text"},{"text":" ","type":"text"},{"text":"and every container type.","type":"text"}]},{"code":["let service = Container.shared.service()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resolved instance may be brand new or Factory may return a cached value from the specified "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you’re passing an instance of a container around to your views or view models, just call it directly.","type":"text"}]},{"code":["let service = container.service()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency.","type":"text"}]},{"code":["@Injected(\\.service) var service: ServiceType"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,","type":"text"},{"text":" ","type":"text"},{"text":"so the above example is functionally identical to the ","type":"text"},{"code":"Container.shared.service()","type":"codeVoice"},{"text":" example shown earlier. Here’s one pointing to","type":"text"},{"text":" ","type":"text"},{"text":"your own container.","type":"text"}]},{"code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"syntax":"swift","type":"codeListing"}]}],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"]]},"kind":"symbol","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"references":{"doc://FactoryKit/documentation/FactoryKit/Factory":{"title":"Factory","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Scope":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","title":"Scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/scope","abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Singleton"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Cached"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Graph"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":".","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Factory/callAsFunction()":{"role":"symbol","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"title":"callAsFunction()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factorykit\/factory\/callasfunction()","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()"}}}
{"sections":[],"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"variants":[{"paths":["\/documentation\/factorykit\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"An object or service of the desired type."}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the "},{"code":"shared","type":"codeVoice"},{"type":"text","text":" container that’s provided for each"},{"type":"text","text":" "},{"type":"text","text":"and every container type."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let service = Container.shared.service()"]},{"inlineContent":[{"type":"text","text":"The resolved instance may be brand new or Factory may return a cached value from the specified "},{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you’re passing an instance of a container around to your views or view models, just call it directly.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let service = container.service()"]},{"inlineContent":[{"text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.service) var service: ServiceType"]},{"inlineContent":[{"type":"text","text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,"},{"type":"text","text":" "},{"type":"text","text":"so the above example is functionally identical to the "},{"code":"Container.shared.service()","type":"codeVoice"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"type":"text","text":" "},{"type":"text","text":"your own container."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"]}]}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","role":"symbol","externalID":"s:10FactoryKit0A0V14callAsFunctionxyF","modules":[{"name":"FactoryKit"}],"title":"callAsFunction()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"symbolKind":"method"},"references":{"doc://FactoryKit/documentation/FactoryKit/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"role":"symbol","kind":"symbol","title":"Factory","type":"topic","url":"\/documentation\/factorykit\/factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Factory/callAsFunction()":{"role":"symbol","kind":"symbol","url":"\/documentation\/factorykit\/factory\/callasfunction()","type":"topic","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"title":"callAsFunction()","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/callAsFunction()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://FactoryKit/documentation/FactoryKit/Scope":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","url":"\/documentation\/factorykit\/scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"code":"Singleton","type":"codeVoice"},{"type":"text","text":", "},{"code":"Cached","type":"codeVoice"},{"type":"text","text":", "},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"Scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"}}}
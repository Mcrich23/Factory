{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/unique","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"]]},"kind":"symbol","metadata":{"roleHeading":"Instance Property","role":"symbol","extendedModule":"FactoryKit","modules":[{"name":"FactoryKit"}],"title":"unique","externalID":"s:10FactoryKit0A9ModifyingPAAE6uniquexvp::SYNTHESIZED::s:10FactoryKit0A0V","symbolKind":"property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unique"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}]},"abstract":[{"type":"text","text":"Syntactic sugar defines defines unique scope. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unique","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"syntax":"swift","type":"codeListing","code":["var service: Factory<ServiceType> {","    self { MyService() }","        .unique","}"]},{"inlineContent":[{"type":"text","text":"While you can add the modifier, Factoryâ€™s are unique by default."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factorykit\/factory\/unique"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Scope":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","title":"Scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"type":"topic","url":"\/documentation\/factorykit\/scope","abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Singleton"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Cached"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Graph"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":".","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Factory/unique":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"unique"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"title":"unique","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory\/unique","url":"\/documentation\/factorykit\/factory\/unique","type":"topic","abstract":[{"type":"text","text":"Syntactic sugar defines defines unique scope. See "},{"type":"reference","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scope","isActive":true},{"type":"text","text":"."}],"role":"symbol","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"title":"Factory","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"}}}
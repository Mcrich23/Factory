{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/parameterfactory"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"metadata":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"symbolKind":"struct","role":"symbol","modules":[{"name":"FactoryKit"}],"externalID":"s:10FactoryKit09ParameterA0V","roleHeading":"Structure","title":"ParameterFactory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}],"type":"paragraph"},{"code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift","type":"codeListing"},{"inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper with ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}],"type":"paragraph"},{"code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"text":"that","type":"text"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"topicSections":[{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"]},{"title":"Instance Properties","generated":true,"anchor":"Instance-Properties","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"]},{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"]},{"title":"Default Implementations","generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"]}],"references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/callAsFunction(_:)":{"title":"callAsFunction(_:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","url":"\/documentation\/factorykit\/parameterfactory\/callasfunction(_:)"},"doc://FactoryKit/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/FactoryKit\/s8SendableP"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/register(factory:)":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","role":"symbol","type":"topic","url":"\/documentation\/factorykit\/parameterfactory\/register(factory:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","kind":"typeIdentifier","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:10FactoryKit09ParameterA0V","kind":"typeIdentifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"kind":"symbol","abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}],"title":"register(factory:)"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"url":"\/documentation\/factorykit\/factorymodifying","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"role":"symbol","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"title":"FactoryModifying","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/resolve(_:)":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Unsugared resolution function.","type":"text"}],"type":"topic","title":"resolve(_:)","url":"\/documentation\/factorykit\/parameterfactory\/resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/init(_:key:_:)":{"abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit16ManagedContainerP","text":"ManagedContainer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)","url":"\/documentation\/factorykit\/parameterfactory\/init(_:key:_:)","role":"symbol","title":"init(_:key:_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","role":"symbol","title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/registration":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration","url":"\/documentation\/factorykit\/parameterfactory\/registration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10FactoryKit0A12RegistrationV","kind":"typeIdentifier","text":"FactoryRegistration"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"kind":"symbol","abstract":[{"text":"Required registration","type":"text"}],"role":"symbol","type":"topic","title":"registration"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/preview(factory:)":{"abstract":[{"text":"Defines a convenience function that allows easy mocking in SwiftUI Previews.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"preview"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","kind":"typeIdentifier","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7SwiftUI9EmptyViewV","kind":"typeIdentifier","text":"EmptyView"}],"url":"\/documentation\/factorykit\/parameterfactory\/preview(factory:)","kind":"symbol","title":"preview(factory:)","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/FactoryModifying-Implementations":{"type":"topic","kind":"article","title":"FactoryModifying Implementations","url":"\/documentation\/factorykit\/parameterfactory\/factorymodifying-implementations","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations","role":"collectionGroup","abstract":[]},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"}}}
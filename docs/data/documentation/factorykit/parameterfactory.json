{"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/factorykit\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"metadata":{"roleHeading":"Structure","externalID":"s:10FactoryKit09ParameterA0V","role":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}],"symbolKind":"struct","modules":[{"name":"FactoryKit"}],"title":"ParameterFactory"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"],"title":"Initializers","generated":true,"anchor":"Initializers"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"],"title":"Instance Methods","generated":true,"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}]},{"type":"codeListing","code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One caveat is that you can’t use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper with "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":" as there’s no way to get"},{"type":"text","text":" "},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"type":"text","text":" "},{"type":"text","text":"probably need to reference the container directly and do something similar to the following."}]},{"type":"codeListing","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct.","type":"text"}]},{"type":"codeListing","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"inlineContent":[{"type":"text","text":"that"}],"type":"emphasis"},{"text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in","type":"text"},{"text":" ","type":"text"},{"text":"later requests will be ignored until the factory or scope is reset.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"url":"\/documentation\/factorykit\/parameterfactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"doc://FactoryKit/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/FactoryKit\/s8SendableP","title":"Swift.Sendable"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/callAsFunction(_:)":{"title":"callAsFunction(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factorykit\/parameterfactory\/callasfunction(_:)","type":"topic","abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"title":"FactoryModifying","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/resolve(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/factorykit\/parameterfactory\/resolve(_:)","type":"topic","abstract":[{"type":"text","text":"Unsugared resolution function."}],"kind":"symbol","title":"resolve(_:)","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/registration":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:10FactoryKit0A12RegistrationV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"url":"\/documentation\/factorykit\/parameterfactory\/registration","role":"symbol","title":"registration","kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration","abstract":[{"type":"text","text":"Required registration"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/init(_:key:_:)":{"title":"init(_:key:_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit16ManagedContainerP","text":"ManagedContainer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/parameterfactory\/init(_:key:_:)","abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/register(factory:)":{"title":"register(factory:)","url":"\/documentation\/factorykit\/parameterfactory\/register(factory:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ParameterFactoryType","preciseIdentifier":"s:10FactoryKit09ParameterA4Typea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"ParameterFactory","preciseIdentifier":"s:10FactoryKit09ParameterA0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/FactoryModifying-Implementations":{"title":"FactoryModifying Implementations","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/factorykit\/parameterfactory\/factorymodifying-implementations","abstract":[],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"}}}
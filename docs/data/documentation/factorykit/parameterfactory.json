{"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"],"anchor":"Initializers","generated":true,"title":"Initializers"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"],"anchor":"Instance-Properties","generated":true,"title":"Instance Properties"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"],"anchor":"Instance-Methods","generated":true,"title":"Instance Methods"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"],"kind":"relationships","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/factorykit\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}],"type":"paragraph"},{"code":["let myService = Container.shared.parameterService(n)"],"type":"codeListing","syntax":"Swift"},{"inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper with ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}],"type":"paragraph"},{"code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"externalID":"s:10FactoryKit09ParameterA0V","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","symbolKind":"struct","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"role":"symbol","modules":[{"name":"FactoryKit"}],"roleHeading":"Structure"},"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"references":{"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/registration":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration","url":"\/documentation\/factorykit\/parameterfactory\/registration","abstract":[{"text":"Required registration","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"preciseIdentifier":"s:10FactoryKit0A12RegistrationV","kind":"typeIdentifier","text":"FactoryRegistration"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"title":"registration"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/resolve(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)","url":"\/documentation\/factorykit\/parameterfactory\/resolve(_:)","abstract":[{"type":"text","text":"Unsugared resolution function."}],"role":"symbol","title":"resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/callAsFunction(_:)":{"title":"callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","url":"\/documentation\/factorykit\/parameterfactory\/callasfunction(_:)","abstract":[{"text":"Resolves a factory capable of taking parameters at runtime.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/FactoryModifying-Implementations":{"title":"FactoryModifying Implementations","kind":"article","url":"\/documentation\/factorykit\/parameterfactory\/factorymodifying-implementations","type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"},"doc://FactoryKit/s8SendableP":{"identifier":"doc:\/\/FactoryKit\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/register(factory:)":{"abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ParameterFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit09ParameterA4Typea"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"ParameterFactory","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit09ParameterA0V"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/factorykit\/parameterfactory\/register(factory:)","title":"register(factory:)","kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","url":"\/documentation\/factorykit\/factorymodifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/init(_:key:_:)":{"abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"ManagedContainer","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit16ManagedContainerP"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"ParameterFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit09ParameterA4Typea"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/factorykit\/parameterfactory\/init(_:key:_:)","kind":"symbol","title":"init(_:key:_:)","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"}}}
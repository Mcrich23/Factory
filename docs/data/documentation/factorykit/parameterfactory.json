{"metadata":{"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"modules":[{"name":"FactoryKit"}],"role":"symbol","symbolKind":"struct","title":"ParameterFactory","externalID":"s:10FactoryKit09ParameterA0V","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}]},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"code":"ParameterFactory","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the"},{"type":"text","text":" "},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"]},{"inlineContent":[{"text":"Resolving it is straightforward. Just pass the parameter to the Factory.","type":"text"}],"type":"paragraph"},{"syntax":"Swift","type":"codeListing","code":["let myService = Container.shared.parameterService(n)"]},{"inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"text":" property wrapper with ","type":"text"},{"type":"codeVoice","code":"ParameterFactory"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"]},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"]},{"inlineContent":[{"text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"that","type":"text"}]},{"text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in","type":"text"},{"text":" ","type":"text"},{"text":"later requests will be ignored until the factory or scope is reset.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/FactoryKit\/documentation\/FactoryKit"]]},"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)"],"generated":true},{"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"],"generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)"],"generated":true},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"],"generated":true}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit\/parameterfactory"]}],"sections":[],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/s8SendableP"],"kind":"relationships"}],"references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/preview(factory:)":{"url":"\/documentation\/factorykit\/parameterfactory\/preview(factory:)","type":"topic","title":"preview(factory:)","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/preview(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"preview","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EmptyView","preciseIdentifier":"s:7SwiftUI9EmptyViewV"}],"abstract":[{"text":"Defines a convenience function that allows easy mocking in SwiftUI Previews.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/registration":{"url":"\/documentation\/factorykit\/parameterfactory\/registration","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"registration","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FactoryRegistration","preciseIdentifier":"s:10FactoryKit0A12RegistrationV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Required registration"}],"kind":"symbol","title":"registration","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/registration"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/init(_:key:_:)":{"url":"\/documentation\/factorykit\/parameterfactory\/init(_:key:_:)","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/init(_:key:_:)","title":"init(_:key:_:)","abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"text":"ManagedContainer","preciseIdentifier":"s:10FactoryKit16ManagedContainerP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ParameterFactoryType","preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/callAsFunction(_:)":{"title":"callAsFunction(_:)","type":"topic","abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factorykit\/parameterfactory\/callasfunction(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/callAsFunction(_:)"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"title":"FactoryModifying","url":"\/documentation\/factorykit\/factorymodifying"},"doc://FactoryKit/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/FactoryKit\/s8SendableP"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/register(factory:)":{"role":"symbol","title":"register(factory:)","kind":"symbol","abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/register(factory:)","url":"\/documentation\/factorykit\/parameterfactory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit09ParameterA0V","text":"ParameterFactory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"title":"ParameterFactory","role":"symbol","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","url":"\/documentation\/factorykit\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/FactoryModifying-Implementations":{"title":"FactoryModifying Implementations","type":"topic","abstract":[],"url":"\/documentation\/factorykit\/parameterfactory\/factorymodifying-implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/FactoryModifying-Implementations"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory/resolve(_:)":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory\/resolve(_:)","url":"\/documentation\/factorykit\/parameterfactory\/resolve(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Unsugared resolution function."}],"kind":"symbol","title":"resolve(_:)","type":"topic"}}}
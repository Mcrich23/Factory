{"topicSections":[{"title":"The Basics","anchor":"The-Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"]},{"title":"Development and Testing","anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]},{"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]},{"title":"Additional Topics","anchor":"Additional-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"]},{"title":"Classes","generated":true,"anchor":"Classes","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"]},{"title":"Protocols","generated":true,"anchor":"Protocols","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"]},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]},{"title":"Functions","generated":true,"anchor":"Functions","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"]},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"]},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"]}],"sections":[],"metadata":{"externalID":"FactoryKit","symbolKind":"module","title":"FactoryKit","modules":[{"name":"FactoryKit"}],"roleHeading":"Framework","role":"collection"},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Adaptable","type":"text"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Powerful"}],"type":"strong"},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Flexible"}],"type":"strong"},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"text":": Factory is free and open source under the MIT License.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit"]}],"hierarchy":{"paths":[[]]},"references":{"doc://FactoryKit/documentation/FactoryKit/Functional":{"type":"topic","title":"Functional Injection","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","kind":"article","url":"\/documentation\/factorykit\/functional"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","title":"SwiftUI Previews","role":"article","type":"topic","url":"\/documentation\/factorykit\/previews"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"title":"ManagedContainer","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"url":"\/documentation\/factorykit\/managedcontainer"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","url":"\/documentation\/factorykit\/modules","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"url":"\/documentation\/factorykit\/factoryresetoptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"title":"FactoryResetOptions","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","title":"Getting Started","kind":"article","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}],"role":"symbol","url":"\/documentation\/factorykit\/injectedtype","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","title":"InjectedType","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","url":"\/documentation\/factorykit\/lazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"title":"LazyInjected","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","type":"topic","kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","type":"topic","role":"symbol","title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","title":"WeakLazyInjected","role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}],"title":"FactoryContext","navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"role":"symbol","url":"\/documentation\/factorykit\/factorycontext","abstract":[]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"url":"\/documentation\/factorykit\/resolve(_:)-22zpa","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"kind":"symbol","role":"symbol","title":"resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"Container","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit9ContainerC"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"title":"InjectedObject","url":"\/documentation\/factorykit\/injectedobject","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","url":"\/documentation\/factorykit\/optionals","title":"Optionals and Dynamic Registration","type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"url":"\/documentation\/factorykit\/migration","kind":"article","title":"Migration","type":"topic","abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","role":"article"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"url":"\/documentation\/factorykit\/dynamicinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"type":"topic","title":"DynamicInjected","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit/Container":{"role":"symbol","url":"\/documentation\/factorykit\/container","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","title":"Container","navigatorTitle":[{"text":"Container","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","title":"VoidFactoryType","kind":"symbol","url":"\/documentation\/factorykit\/voidfactorytype"},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","kind":"article","url":"\/documentation\/factorykit\/design"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","role":"collectionGroup","kind":"article","title":"Scopes","url":"\/documentation\/factorykit\/scopes"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","type":"topic","title":"Testing","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"title":"FactoryContextType","navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/factorycontexttype","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"type":"topic","title":"Contexts","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"url":"\/documentation\/factorykit\/containermanager","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","title":"ContainerManager","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"url":"\/documentation\/factorykit\/containers","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","type":"topic","role":"article","title":"Containers","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}]},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factorykit\/sharedcontainer","type":"topic","title":"SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Injected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/factorykit\/cycle","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"Resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"url":"\/documentation\/factorykit\/resolving","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"url":"\/documentation\/factorykit\/factorymodifying","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"role":"symbol","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"title":"FactoryModifying","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"title":"InjectedObservable","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"url":"\/documentation\/factorykit\/injectedobservable","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ParameterFactoryType","kind":"identifier"}],"role":"symbol","title":"ParameterFactoryType","abstract":[],"url":"\/documentation\/factorykit\/parameterfactorytype","navigatorTitle":[{"text":"ParameterFactoryType","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/autoregistering","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","title":"AutoRegistering","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","url":"\/documentation\/factorykit"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","kind":"article","title":"Circular Dependency Chains","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","url":"\/documentation\/factorykit\/chains","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","type":"topic","title":"resolve(_:)","kind":"symbol","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://FactoryKit/documentation/FactoryKit/Factory":{"title":"Factory","url":"\/documentation\/factorykit\/factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"role":"symbol","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"title":"FactoryRegistration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"kind":"symbol","url":"\/documentation\/factorykit\/factoryregistration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","type":"topic"}}}
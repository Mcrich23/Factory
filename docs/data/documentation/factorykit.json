{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"hierarchy":{"paths":[[]]},"metadata":{"modules":[{"name":"FactoryKit"}],"title":"FactoryKit","externalID":"FactoryKit","role":"collection","symbolKind":"module","roleHeading":"Framework"},"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"],"anchor":"The-Basics","title":"The Basics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"anchor":"Development-and-Testing","title":"Development and Testing"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"],"anchor":"Additional-Topics","title":"Additional Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"],"anchor":"Classes","generated":true,"title":"Classes"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"],"anchor":"Protocols","generated":true,"title":"Protocols"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"],"anchor":"Structures","generated":true,"title":"Structures"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"],"anchor":"Functions","generated":true,"title":"Functions"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"],"anchor":"Type-Aliases","generated":true,"title":"Type Aliases"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"],"anchor":"Enumerations","generated":true,"title":"Enumerations"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Factory is…","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Adaptable"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Powerful","type":"text"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Safe"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Concise","type":"text"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Flexible"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Documented"}],"type":"strong"},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Ready to get started?","type":"text"}],"type":"paragraph"}]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit"]}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"url":"\/documentation\/factorykit\/chains","kind":"article","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","title":"Circular Dependency Chains","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"role":"symbol","kind":"symbol","title":"Factory","type":"topic","url":"\/documentation\/factorykit\/factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"url":"\/documentation\/factorykit\/previews","title":"SwiftUI Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","kind":"article","url":"\/documentation\/factorykit\/testing","title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"role":"article","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"type":"topic","url":"\/documentation\/factorykit\/modules","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","role":"symbol","abstract":[],"url":"\/documentation\/factorykit\/factorycontext","navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}],"title":"FactoryContext","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"title":"ParameterFactory","url":"\/documentation\/factorykit\/parameterfactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"url":"\/documentation\/factorykit\/optionals","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","role":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","title":"AutoRegistering","url":"\/documentation\/factorykit\/autoregistering","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}],"navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","title":"Factory Modifiers","kind":"article","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"FactoryKit","type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","role":"collection"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactoryType","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","kind":"symbol","url":"\/documentation\/factorykit\/parameterfactorytype","title":"ParameterFactoryType","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"url":"\/documentation\/factorykit\/injectedobservable","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","title":"InjectedObservable","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"title":"Resolution Cycles","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","kind":"article","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","role":"collectionGroup","kind":"article","url":"\/documentation\/factorykit\/gettingstarted"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"role":"symbol","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/resolve(_:)-22zpa","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:10FactoryKit9ContainerC","kind":"typeIdentifier","text":"Container"},{"kind":"text","text":", "},{"preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"kind":"symbol","abstract":[],"role":"symbol","type":"topic","title":"VoidFactoryType","url":"\/documentation\/factorykit\/voidfactorytype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","title":"FactoryResetOptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factorykit\/factoryresetoptions","kind":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"title":"LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"kind":"symbol","url":"\/documentation\/factorykit\/lazyinjected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}],"title":"DynamicInjected","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/factorykit\/factoryregistration","title":"FactoryRegistration","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/sharedcontainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"title":"SharedContainer","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"url":"\/documentation\/factorykit\/injectedtype","title":"InjectedType","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}]},"doc://FactoryKit/documentation/FactoryKit/Tags":{"title":"Tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","role":"article","kind":"article","url":"\/documentation\/factorykit\/tags","type":"topic","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}]},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"title":"WeakLazyInjected","url":"\/documentation\/factorykit\/weaklazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"url":"\/documentation\/factorykit\/scopes","title":"Scopes","type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"url":"\/documentation\/factorykit\/contexts","role":"article","type":"topic","title":"Contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"url":"\/documentation\/factorykit\/debugging","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","title":"Debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"kind":"article","abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"type":"topic","role":"article","title":"Migration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","url":"\/documentation\/factorykit\/migration"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","title":"FactoryModifying","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"title":"FactoryContextType","kind":"symbol","abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"url":"\/documentation\/factorykit\/factorycontexttype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"kind":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","title":"Resolving","url":"\/documentation\/factorykit\/resolving","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"type":"topic","title":"resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"url":"\/documentation\/factorykit\/managedcontainer","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"title":"ManagedContainer","navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}]},"doc://FactoryKit/documentation/FactoryKit/Design":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","type":"topic","url":"\/documentation\/factorykit\/design","title":"Designing Factory","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","kind":"symbol","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factorykit\/injectedobject","role":"symbol","title":"InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Containers":{"title":"Containers","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"url":"\/documentation\/factorykit\/containers","type":"topic","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","type":"topic","url":"\/documentation\/factorykit\/functional","title":"Functional Injection","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"kind":"symbol","url":"\/documentation\/factorykit\/injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","title":"Injected"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"title":"ContainerManager","url":"\/documentation\/factorykit\/containermanager"},"doc://FactoryKit/documentation/FactoryKit/Container":{"type":"topic","url":"\/documentation\/factorykit\/container","navigatorTitle":[{"text":"Container","kind":"identifier"}],"abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","title":"Container","role":"symbol","kind":"symbol"}}}
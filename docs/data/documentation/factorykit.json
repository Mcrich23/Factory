{"sections":[],"metadata":{"externalID":"FactoryKit","symbolKind":"module","roleHeading":"Framework","role":"collection","title":"FactoryKit","modules":[{"name":"FactoryKit"}]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concise","type":"text"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Documented"}],"type":"strong"},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Tested","type":"text"}],"type":"strong"},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Free","type":"text"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}]}],"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/factorykit"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"],"title":"The Basics","anchor":"The-Basics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"title":"Development and Testing","anchor":"Development-and-Testing"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"],"title":"Additional Topics","anchor":"Additional-Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"],"title":"Classes","generated":true,"anchor":"Classes"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"],"title":"Protocols","generated":true,"anchor":"Protocols"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"],"title":"Structures","generated":true,"anchor":"Structures"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"],"title":"Functions","generated":true,"anchor":"Functions"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"],"title":"Type Aliases","generated":true,"anchor":"Type-Aliases"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"],"title":"Enumerations","generated":true,"anchor":"Enumerations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"kind":"symbol","references":{"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"kind":"symbol","title":"FactoryResetOptions","url":"\/documentation\/factorykit\/factoryresetoptions","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryResetOptions"}],"abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","kind":"article","type":"topic","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","title":"Factory Modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"kind":"article","url":"\/documentation\/factorykit\/cycle","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","type":"topic","role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"type":"topic","title":"Testing","kind":"article","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","url":"\/documentation\/factorykit\/testing"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","role":"article","type":"topic","kind":"article","url":"\/documentation\/factorykit\/migration","title":"Migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"url":"\/documentation\/factorykit\/functional","kind":"article","type":"topic","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"role":"article","title":"Functional Injection","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"url":"\/documentation\/factorykit\/containermanager","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"role":"symbol","title":"ContainerManager","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}]},"doc://FactoryKit/documentation/FactoryKit/Containers":{"kind":"article","role":"article","url":"\/documentation\/factorykit\/containers","title":"Containers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","type":"topic","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"kind":"symbol","title":"InjectedObject","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"role":"symbol","url":"\/documentation\/factorykit\/injectedobject"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","kind":"article","type":"topic","url":"\/documentation\/factorykit\/chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"role":"article","title":"Circular Dependency Chains"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/resolve(_:)-22zpa","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"Container","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit9ContainerC"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"resolve(_:)","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}]},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"title":"LazyInjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"url":"\/documentation\/factorykit\/lazyinjected","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"role":"symbol","title":"FactoryContext","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/factorycontext","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext"},"doc://FactoryKit/documentation/FactoryKit/Container":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}],"role":"symbol","title":"Container"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"title":"AutoRegistering","url":"\/documentation\/factorykit\/autoregistering"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"url":"\/documentation\/factorykit\/parameterfactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","title":"ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"title":"DynamicInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}],"navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"role":"symbol","title":"InjectedType","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedType","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"InjectedType","kind":"identifier"}],"abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","kind":"symbol","url":"\/documentation\/factorykit\/injectedtype"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"url":"\/documentation\/factorykit\/optionals","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"role":"article","title":"Optionals and Dynamic Registration","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/factorymodifying","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"title":"FactoryModifying","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"title":"FactoryRegistration","url":"\/documentation\/factorykit\/factoryregistration","kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"url":"\/documentation\/factorykit\/factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"title":"Factory","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"title":"Resolving","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolving"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","url":"\/documentation\/factorykit\/resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Resolving"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"title":"InjectedObservable","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"role":"symbol","url":"\/documentation\/factorykit\/injectedobservable","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","type":"topic","kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Design":{"url":"\/documentation\/factorykit\/design","kind":"article","type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"role":"article","title":"Designing Factory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","kind":"article","type":"topic","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"role":"article","title":"Tags","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"role":"collectionGroup","type":"topic","kind":"article","title":"Getting Started","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","url":"\/documentation\/factorykit\/gettingstarted","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"title":"resolve(_:)","kind":"symbol","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"type":"topic","title":"Contexts","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"kind":"article","url":"\/documentation\/factorykit\/scopes","title":"Scopes","type":"topic","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","title":"WeakLazyInjected","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/weaklazyinjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}]},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"role":"symbol","kind":"symbol","title":"FactoryContextType","url":"\/documentation\/factorykit\/factorycontexttype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}]},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"title":"VoidFactoryType","role":"symbol","url":"\/documentation\/factorykit\/voidfactorytype","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}],"abstract":[],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}],"kind":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"type":"topic","title":"SharedContainer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factorykit\/sharedcontainer"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","title":"ParameterFactoryType","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"url":"\/documentation\/factorykit\/parameterfactorytype","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","url":"\/documentation\/factorykit\/debugging","role":"article","kind":"article","title":"Debugging","type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}]},"doc://FactoryKit/documentation/FactoryKit/Previews":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","url":"\/documentation\/factorykit\/previews","type":"topic","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article","title":"SwiftUI Previews"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"url":"\/documentation\/factorykit\/managedcontainer","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"type":"topic","title":"ManagedContainer"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","kind":"article","type":"topic","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","title":"Modular Development","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factorykit\/injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"title":"Injected","role":"symbol","type":"topic"},"doc://FactoryKit/documentation/FactoryKit":{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"url":"\/documentation\/factorykit","type":"topic","title":"FactoryKit","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","kind":"symbol","role":"collection"}}}
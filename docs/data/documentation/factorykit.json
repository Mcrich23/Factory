{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factorykit"]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/FactoryKit\/documentation\/FactoryKit","interfaceLanguage":"swift"},"metadata":{"role":"collection","externalID":"FactoryKit","title":"FactoryKit","symbolKind":"module","modules":[{"name":"FactoryKit"}],"roleHeading":"Framework"},"topicSections":[{"anchor":"The-Basics","title":"The Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"]},{"anchor":"Development-and-Testing","title":"Development and Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]},{"anchor":"Advanced-Topics","title":"Advanced Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]},{"anchor":"Additional-Topics","title":"Additional Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"]},{"anchor":"Classes","generated":true,"title":"Classes","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"]},{"anchor":"Protocols","generated":true,"title":"Protocols","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"]},{"anchor":"Structures","generated":true,"title":"Structures","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]},{"anchor":"Functions","generated":true,"title":"Functions","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"]},{"anchor":"Type-Aliases","generated":true,"title":"Type Aliases","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"]},{"anchor":"Enumerations","generated":true,"title":"Enumerations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"]}],"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Adaptable","type":"text"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Performant"}],"type":"strong"},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concise"}],"type":"strong"},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Tested","type":"text"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Free","type":"text"}],"type":"strong"},{"text":": Factory is free and open source under the MIT License.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Ready to get started?","type":"text"}]}]}],"sections":[],"references":{"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:10FactoryKit9ContainerC","text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","title":"resolve(_:)","url":"\/documentation\/factorykit\/resolve(_:)-22zpa"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"title":"Debugging","type":"topic","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factorykit\/debugging","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"url":"\/documentation\/factorykit\/contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","role":"article","type":"topic","title":"Contexts"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"title":"WeakLazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}]},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","url":"\/documentation\/factorykit\/lazyinjected","title":"LazyInjected"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","abstract":[],"role":"symbol","kind":"symbol","title":"VoidFactoryType","type":"topic","url":"\/documentation\/factorykit\/voidfactorytype","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}],"navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}]},"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","url":"\/documentation\/factorykit\/design","title":"Designing Factory","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"url":"\/documentation\/factorykit\/modules","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://FactoryKit/documentation/FactoryKit/Functional":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","title":"Functional Injection","role":"article","type":"topic","url":"\/documentation\/factorykit\/functional","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"role":"symbol","url":"\/documentation\/factorykit\/sharedcontainer","title":"SharedContainer","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/dynamicinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"type":"topic","title":"DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"FactoryKit"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"role":"article","kind":"article","title":"Circular Dependency Chains","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","url":"\/documentation\/factorykit\/chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}]},"doc://FactoryKit/documentation/FactoryKit/Previews":{"type":"topic","role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","kind":"article","title":"SwiftUI Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"url":"\/documentation\/factorykit\/previews"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factorykit\/parameterfactory","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"title":"ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/factorycontexttype","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"title":"FactoryContextType"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"kind":"article","title":"Scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"url":"\/documentation\/factorykit\/scopes","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","role":"collectionGroup","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"url":"\/documentation\/factorykit\/migration","role":"article","kind":"article","title":"Migration","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"kind":"symbol","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"type":"topic","title":"FactoryResetOptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factorykit\/factoryresetoptions","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"url":"\/documentation\/factorykit\/gettingstarted","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"title":"Getting Started","role":"collectionGroup","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"title":"AutoRegistering","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","kind":"symbol","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}],"url":"\/documentation\/factorykit\/autoregistering","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","url":"\/documentation\/factorykit\/factorymodifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"kind":"article","url":"\/documentation\/factorykit\/containers","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"title":"Containers","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","role":"article"},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"url":"\/documentation\/factorykit\/injectedtype","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}],"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"title":"InjectedType","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"role":"symbol","kind":"symbol","title":"InjectedObservable","type":"topic","url":"\/documentation\/factorykit\/injectedobservable","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"title":"ContainerManager","kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/containermanager","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","title":"Resolution Cycles","url":"\/documentation\/factorykit\/cycle","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Container":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","title":"Container","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","url":"\/documentation\/factorykit\/container","navigatorTitle":[{"text":"Container","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"role":"symbol","url":"\/documentation\/factorykit\/injectedobject","type":"topic","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"url":"\/documentation\/factorykit\/resolving","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","kind":"symbol","title":"Resolving","role":"symbol","navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"title":"Factory","url":"\/documentation\/factorykit\/factory","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","role":"article","type":"topic","url":"\/documentation\/factorykit\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}]},"doc://FactoryKit/documentation/FactoryKit/Injected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/injected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","kind":"symbol","title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","kind":"article","title":"Testing","type":"topic","role":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"url":"\/documentation\/factorykit\/testing"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"url":"\/documentation\/factorykit\/resolve(_:)-1v66f","title":"resolve(_:)","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"kind":"symbol","url":"\/documentation\/factorykit\/factoryregistration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"title":"FactoryRegistration","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"url":"\/documentation\/factorykit\/parameterfactorytype","title":"ParameterFactoryType","abstract":[],"kind":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}]},"doc://FactoryKit/documentation/FactoryKit/Tags":{"url":"\/documentation\/factorykit\/tags","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"title":"Tags","role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"url":"\/documentation\/factorykit\/factorycontext","title":"FactoryContext","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","kind":"symbol","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}]},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","title":"Optionals and Dynamic Registration","kind":"article","role":"article","type":"topic","url":"\/documentation\/factorykit\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}]},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"url":"\/documentation\/factorykit\/managedcontainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"title":"ManagedContainer","role":"symbol","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","kind":"symbol"}}}
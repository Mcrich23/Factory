{"variants":[{"paths":["\/documentation\/factorykit"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"FactoryKit","modules":[{"name":"FactoryKit"}],"role":"collection","roleHeading":"Framework","symbolKind":"module","externalID":"FactoryKit"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"topicSections":[{"title":"The Basics","anchor":"The-Basics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"]},{"title":"Development and Testing","anchor":"Development-and-Testing","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"]},{"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"]},{"title":"Additional Topics","anchor":"Additional-Topics","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"]},{"title":"Classes","generated":true,"anchor":"Classes","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"]},{"title":"Protocols","generated":true,"anchor":"Protocols","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"]},{"title":"Structures","generated":true,"anchor":"Structures","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"]},{"title":"Functions","generated":true,"anchor":"Functions","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"]},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"]},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"text":"Factory is…","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Powerful"}],"type":"strong"},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Safe"}],"type":"strong"},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Concise","type":"text"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Lightweight","type":"text"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Free","type":"text"}]},{"text":": Factory is free and open source under the MIT License.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Ready to get started?","type":"text"}]}]}],"references":{"doc://FactoryKit/documentation/FactoryKit/Design":{"type":"topic","title":"Designing Factory","kind":"article","role":"article","url":"\/documentation\/factorykit\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"kind":"article","type":"topic","title":"Functional Injection","url":"\/documentation\/factorykit\/functional","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"url":"\/documentation\/factorykit\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","type":"topic","title":"Testing","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"title":"ParameterFactoryType","abstract":[],"url":"\/documentation\/factorykit\/parameterfactorytype","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","kind":"symbol","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/factorykit\/dynamicinjected","kind":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected"},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"url":"\/documentation\/factorykit\/factorycontext","abstract":[],"kind":"symbol","role":"symbol","title":"FactoryContext","type":"topic","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"title":"Contexts","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"type":"topic","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","role":"article"},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"type":"topic","url":"\/documentation\/factorykit\/injectedobservable","title":"InjectedObservable","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}]},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"url":"\/documentation\/factorykit\/injectedtype","kind":"symbol","type":"topic","title":"InjectedType"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","type":"topic","title":"Optionals and Dynamic Registration","kind":"article","url":"\/documentation\/factorykit\/optionals","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"role":"article","kind":"article","url":"\/documentation\/factorykit\/migration","title":"Migration","type":"topic","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","title":"Modular Development","kind":"article","type":"topic","url":"\/documentation\/factorykit\/modules"},"doc://FactoryKit/documentation/FactoryKit/Previews":{"title":"SwiftUI Previews","kind":"article","role":"article","url":"\/documentation\/factorykit\/previews","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"kind":"article","title":"Containers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","type":"topic","url":"\/documentation\/factorykit\/containers","role":"article"},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","type":"topic","url":"\/documentation\/factorykit\/gettingstarted","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","title":"Getting Started","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","url":"\/documentation\/factorykit\/injected","title":"Injected","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}]},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"role":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","title":"Factory Modifiers","kind":"article","url":"\/documentation\/factorykit\/modifiers","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"title":"FactoryRegistration","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryRegistration"}],"url":"\/documentation\/factorykit\/factoryregistration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"title":"FactoryModifying","url":"\/documentation\/factorykit\/factorymodifying"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"url":"\/documentation\/factorykit\/weaklazyinjected","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"kind":"symbol","type":"topic","title":"WeakLazyInjected"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"type":"topic","title":"Resolving","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolving"}],"abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"url":"\/documentation\/factorykit\/resolving","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"type":"topic","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","role":"article","url":"\/documentation\/factorykit\/cycle","title":"Resolution Cycles"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"kind":"symbol","title":"ManagedContainer","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","type":"topic","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factorykit\/managedcontainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"type":"topic","title":"AutoRegistering","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"url":"\/documentation\/factorykit\/autoregistering","abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"kind":"article","type":"topic","title":"Tags","url":"\/documentation\/factorykit\/tags","role":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"},"doc://FactoryKit/documentation/FactoryKit":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","title":"FactoryKit","type":"topic","url":"\/documentation\/factorykit","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://FactoryKit/documentation/FactoryKit/Factory":{"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"role":"symbol","title":"Factory","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"url":"\/documentation\/factorykit\/factory","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","type":"topic","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factorykit\/chains","role":"article"},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}],"role":"symbol","title":"VoidFactoryType","abstract":[],"url":"\/documentation\/factorykit\/voidfactorytype","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}]},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"type":"topic","url":"\/documentation\/factorykit\/sharedcontainer","title":"SharedContainer","kind":"symbol","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"role":"symbol","title":"ContainerManager","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"type":"topic","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"url":"\/documentation\/factorykit\/containermanager"},"doc://FactoryKit/documentation/FactoryKit/SwiftUI":{"abstract":[{"type":"text","text":"Defining and using dependencies in SwiftUI."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SwiftUI","type":"topic","kind":"article","title":"SwiftUI","url":"\/documentation\/factorykit\/swiftui","role":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","type":"topic","url":"\/documentation\/factorykit\/factorycontexttype","kind":"symbol","title":"FactoryContextType","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"title":"resolve(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Container","preciseIdentifier":"s:10FactoryKit9ContainerC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factorykit\/resolve(_:)-22zpa","role":"symbol","type":"topic","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"kind":"article","url":"\/documentation\/factorykit\/scopes","title":"Scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"kind":"symbol","url":"\/documentation\/factorykit\/lazyinjected","type":"topic","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","title":"LazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}]},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/debugging","kind":"article","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factorykit\/injectedobject","title":"InjectedObject","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}]},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"title":"ParameterFactory","role":"symbol","kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","url":"\/documentation\/factorykit\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryResetOptions"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"url":"\/documentation\/factorykit\/factoryresetoptions","role":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","title":"FactoryResetOptions","abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"role":"symbol","type":"topic","title":"resolve(_:)","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:10FactoryKit0A0V","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/factorykit\/resolve(_:)-1v66f"},"doc://FactoryKit/documentation/FactoryKit/Container":{"title":"Container","kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}]}}}
{"abstract":[{"text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes"],"anchor":"The-Basics","title":"The Basics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains"],"anchor":"Development-and-Testing","title":"Development and Testing"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration"],"anchor":"Additional-Topics","title":"Additional Topics"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager"],"generated":true,"anchor":"Classes","title":"Classes"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer"],"generated":true,"anchor":"Protocols","title":"Protocols"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected"],"generated":true,"anchor":"Structures","title":"Structures"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"],"generated":true,"anchor":"Functions","title":"Functions"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType"],"generated":true,"anchor":"Type-Aliases","title":"Type Aliases"},{"identifiers":["doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions"],"generated":true,"anchor":"Enumerations","title":"Enumerations"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Adaptable","type":"text"}],"type":"strong"},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Powerful"}],"type":"strong"},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Performant","type":"text"}]},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Safe","type":"text"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Concise","type":"text"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Flexible"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Documented","type":"text"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Ready to get started?","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/factorykit"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"FactoryKit"}],"externalID":"FactoryKit","roleHeading":"Framework","title":"FactoryKit","symbolKind":"module","role":"collection"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[[]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/FactoryKit\/documentation\/FactoryKit"},"kind":"symbol","references":{"doc://FactoryKit/documentation/FactoryKit/ParameterFactoryType":{"url":"\/documentation\/factorykit\/parameterfactorytype","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactoryType","title":"ParameterFactoryType"},"doc://FactoryKit/documentation/FactoryKit/Resolving":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"url":"\/documentation\/factorykit\/resolving","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Resolving","title":"Resolving","type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Contexts":{"title":"Contexts","role":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","url":"\/documentation\/factorykit\/contexts","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Contexts","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-1v66f":{"abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-1v66f","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:10FactoryKit0A0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"type":"topic","url":"\/documentation\/factorykit\/resolve(_:)-1v66f","kind":"symbol","title":"resolve(_:)"},"doc://FactoryKit/documentation/FactoryKit/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"kind":"symbol","title":"ManagedContainer","role":"symbol","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ManagedContainer","url":"\/documentation\/factorykit\/managedcontainer","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/FactoryContext":{"type":"topic","url":"\/documentation\/factorykit\/factorycontext","role":"symbol","title":"FactoryContext","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContext","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"abstract":[],"kind":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Modules":{"role":"article","url":"\/documentation\/factorykit\/modules","type":"topic","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modules","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/FactoryContextType":{"abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"kind":"symbol","title":"FactoryContextType","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContextType"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryContextType","url":"\/documentation\/factorykit\/factorycontexttype"},"doc://FactoryKit/documentation/FactoryKit/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Testing","role":"article","kind":"article","url":"\/documentation\/factorykit\/testing","title":"Testing","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Factory":{"title":"Factory","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Factory"},"doc://FactoryKit/documentation/FactoryKit/Optionals":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Optionals","title":"Optionals and Dynamic Registration","type":"topic","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"role":"article","url":"\/documentation\/factorykit\/optionals","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/DynamicInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/DynamicInjected","type":"topic","navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicInjected","kind":"identifier"}],"title":"DynamicInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"url":"\/documentation\/factorykit\/dynamicinjected","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Scopes":{"role":"collectionGroup","url":"\/documentation\/factorykit\/scopes","type":"topic","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Scopes","title":"Scopes"},"doc://FactoryKit/documentation/FactoryKit/ContainerManager":{"abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"url":"\/documentation\/factorykit\/containermanager","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ContainerManager","type":"topic","title":"ContainerManager"},"doc://FactoryKit/documentation/FactoryKit/FactoryModifying":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"title":"FactoryModifying","url":"\/documentation\/factorykit\/factorymodifying","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryModifying","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}]},"doc://FactoryKit/documentation/FactoryKit":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit","type":"topic","url":"\/documentation\/factorykit","title":"FactoryKit","abstract":[{"type":"text","text":"A modern approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection"},"doc://FactoryKit/documentation/FactoryKit/Containers":{"role":"article","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"type":"topic","kind":"article","title":"Containers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Containers","url":"\/documentation\/factorykit\/containers"},"doc://FactoryKit/documentation/FactoryKit/Modifiers":{"url":"\/documentation\/factorykit\/modifiers","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Modifiers","kind":"article","type":"topic","title":"Factory Modifiers","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/VoidFactoryType":{"abstract":[],"type":"topic","title":"VoidFactoryType","navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}],"url":"\/documentation\/factorykit\/voidfactorytype","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/VoidFactoryType","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}]},"doc://FactoryKit/documentation/FactoryKit/Design":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Design","url":"\/documentation\/factorykit\/design","title":"Designing Factory","type":"topic","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Functional":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article","title":"Functional Injection","url":"\/documentation\/factorykit\/functional","role":"article","type":"topic"},"doc://FactoryKit/documentation/FactoryKit/Chains":{"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"title":"Circular Dependency Chains","kind":"article","role":"article","url":"\/documentation\/factorykit\/chains"},"doc://FactoryKit/documentation/FactoryKit/Injected":{"title":"Injected","kind":"symbol","role":"symbol","url":"\/documentation\/factorykit\/injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Injected"},"doc://FactoryKit/documentation/FactoryKit/WeakLazyInjected":{"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factorykit\/weaklazyinjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","title":"WeakLazyInjected","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/FactoryResetOptions":{"type":"topic","role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryResetOptions","kind":"symbol","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"title":"FactoryResetOptions","url":"\/documentation\/factorykit\/factoryresetoptions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/GettingStarted":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/GettingStarted","kind":"article","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started","url":"\/documentation\/factorykit\/gettingstarted","role":"collectionGroup"},"doc://FactoryKit/documentation/FactoryKit/SharedContainer":{"url":"\/documentation\/factorykit\/sharedcontainer","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/SharedContainer","kind":"symbol","title":"SharedContainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObject":{"url":"\/documentation\/factorykit\/injectedobject","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObject","title":"InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"role":"symbol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}]},"doc://FactoryKit/documentation/FactoryKit/resolve(_:)-22zpa":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Container","preciseIdentifier":"s:10FactoryKit9ContainerC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:10FactoryKit0A0V","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"type":"topic","role":"symbol","url":"\/documentation\/factorykit\/resolve(_:)-22zpa","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"title":"resolve(_:)","kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/resolve(_:)-22zpa"},"doc://FactoryKit/documentation/FactoryKit/AutoRegistering":{"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"code":"Container","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"kind":"symbol","url":"\/documentation\/factorykit\/autoregistering","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}],"role":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/AutoRegistering","title":"AutoRegistering"},"doc://FactoryKit/documentation/FactoryKit/Cycle":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Cycle","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","kind":"article","type":"topic","url":"\/documentation\/factorykit\/cycle"},"doc://FactoryKit/documentation/FactoryKit/FactoryRegistration":{"url":"\/documentation\/factorykit\/factoryregistration","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/FactoryRegistration","type":"topic","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"title":"FactoryRegistration","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}]},"doc://FactoryKit/documentation/FactoryKit/Previews":{"title":"SwiftUI Previews","type":"topic","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Previews","url":"\/documentation\/factorykit\/previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"role":"article","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Debugging":{"kind":"article","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Debugging","role":"article","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"url":"\/documentation\/factorykit\/debugging","type":"topic","title":"Debugging"},"doc://FactoryKit/documentation/FactoryKit/ParameterFactory":{"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/ParameterFactory","type":"topic","kind":"symbol","url":"\/documentation\/factorykit\/parameterfactory","title":"ParameterFactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Container":{"role":"symbol","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"title":"Container","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"type":"topic","url":"\/documentation\/factorykit\/container","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedType":{"title":"InjectedType","url":"\/documentation\/factorykit\/injectedtype","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"kind":"symbol","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedType","role":"symbol","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}]},"doc://FactoryKit/documentation/FactoryKit/InjectedObservable":{"url":"\/documentation\/factorykit\/injectedobservable","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}],"title":"InjectedObservable","identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/InjectedObservable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObservable"}],"type":"topic","role":"symbol"},"doc://FactoryKit/documentation/FactoryKit/Tags":{"role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Tags","url":"\/documentation\/factorykit\/tags","title":"Tags","type":"topic","kind":"article"},"doc://FactoryKit/documentation/FactoryKit/Migration":{"url":"\/documentation\/factorykit\/migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/Migration","role":"article","kind":"article","type":"topic","title":"Migration"},"doc://FactoryKit/documentation/FactoryKit/LazyInjected":{"identifier":"doc:\/\/FactoryKit\/documentation\/FactoryKit\/LazyInjected","title":"LazyInjected","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/factorykit\/lazyinjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}]}}}
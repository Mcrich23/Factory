{"sections":[],"hierarchy":{"paths":[[]]},"metadata":{"externalID":"Factory","roleHeading":"Framework","modules":[{"name":"Factory"}],"role":"collection","title":"Factory","symbolKind":"module"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Adaptable"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Powerful"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Concise"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Flexible","type":"text"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Documented","type":"text"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Lightweight","type":"text"}]},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Free"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"anchor":"The-Basics"},{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"anchor":"Development-and-Testing"},{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"anchor":"Advanced-Topics"},{"title":"Additional Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"anchor":"Additional-Topics"},{"generated":true,"title":"Classes","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"anchor":"Classes"},{"generated":true,"title":"Protocols","identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"anchor":"Protocols"},{"generated":true,"title":"Structures","identifiers":["doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"anchor":"Structures"},{"generated":true,"title":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"anchor":"Functions"},{"generated":true,"title":"Type Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType"],"anchor":"Type-Aliases"},{"generated":true,"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"],"anchor":"Enumerations"}],"references":{"doc://Factory/documentation/Factory/Testing":{"type":"topic","title":"Testing","kind":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"role":"article","url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"title":"WeakLazyInjected","type":"topic","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factory\/weaklazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"},"doc://Factory/documentation/Factory/DynamicInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","url":"\/documentation\/factory\/dynamicinjected","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"title":"DynamicInjected","navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}]},"doc://Factory/documentation/Factory/Tags":{"url":"\/documentation\/factory\/tags","type":"topic","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","kind":"article","role":"article","title":"Tags"},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/factory\/resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving"},"doc://Factory/documentation/Factory/Cycle":{"abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","url":"\/documentation\/factory\/modifiers","kind":"article","title":"Factory Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","role":"article"},"doc://Factory/documentation/Factory/InjectedObservable":{"type":"topic","kind":"symbol","title":"InjectedObservable","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObservable"}],"url":"\/documentation\/factory\/injectedobservable","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}]},"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/injectedobject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","type":"topic","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}]},"doc://Factory/documentation/Factory/FactoryResolving":{"url":"\/documentation\/factory\/factoryresolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","abstract":[],"type":"topic","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResolving","kind":"identifier"}],"title":"FactoryResolving","role":"symbol","navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}]},"doc://Factory/documentation/Factory/ParameterFactory":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","kind":"symbol","url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factory\/injected","kind":"symbol","title":"Injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}]},"doc://Factory/documentation/Factory/Previews":{"type":"topic","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","title":"SwiftUI Previews","role":"article","url":"\/documentation\/factory\/previews","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"doc://Factory/documentation/Factory/GettingStarted":{"kind":"article","url":"\/documentation\/factory\/gettingstarted","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup"},"doc://Factory/documentation/Factory/ContainerManager":{"kind":"symbol","url":"\/documentation\/factory\/containermanager","title":"ContainerManager","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","role":"symbol"},"doc://Factory/documentation/Factory/FactoryContextType":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContextType"}],"kind":"symbol","role":"symbol","title":"FactoryContextType","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","url":"\/documentation\/factory\/factorycontexttype"},"doc://Factory/documentation/Factory/FactoryContext":{"url":"\/documentation\/factory\/factorycontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","role":"symbol","title":"FactoryContext","type":"topic"},"doc://Factory/documentation/Factory/Migration":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","url":"\/documentation\/factory\/migration","role":"article","kind":"article","type":"topic","title":"Migration","abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}]},"doc://Factory/documentation/Factory/Chains":{"kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","type":"topic","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/Debugging":{"type":"topic","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","title":"Debugging","role":"article","url":"\/documentation\/factory\/debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging"},"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"title":"Factory","role":"symbol","url":"\/documentation\/factory\/factory","type":"topic"},"doc://Factory/documentation/Factory/FactoryModifying":{"role":"symbol","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","type":"topic","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}]},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"title":"resolve(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Factory9ContainerC","kind":"typeIdentifier","text":"Container"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-52olu","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}]},"doc://Factory/documentation/Factory/FactoryResetOptions":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","url":"\/documentation\/factory\/factoryresetoptions","kind":"symbol","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"title":"FactoryResetOptions","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","role":"article","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"title":"Optionals and Dynamic Registration","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Design":{"type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","url":"\/documentation\/factory\/design"},"doc://Factory/documentation/Factory/ParameterFactoryType":{"abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"url":"\/documentation\/factory\/parameterfactorytype","role":"symbol","title":"ParameterFactoryType","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Container":{"abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/container","title":"Container","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},"doc://Factory/documentation/Factory/Functional":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article","title":"Functional Injection","url":"\/documentation\/factory\/functional","role":"article"},"doc://Factory/documentation/Factory/Containers":{"abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"title":"Containers","role":"article","url":"\/documentation\/factory\/containers","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","type":"topic"},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"abstract":[],"url":"\/documentation\/factory\/factorymanagedcontainer","navigatorTitle":[{"kind":"identifier","text":"FactoryManagedContainer"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryManagedContainer"}],"role":"symbol","title":"FactoryManagedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","type":"topic"},"doc://Factory/documentation/Factory/ManagedContainer":{"type":"topic","role":"symbol","title":"ManagedContainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","kind":"symbol","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}]},"doc://Factory/documentation/Factory/InjectedType":{"type":"topic","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"kind":"symbol","role":"symbol","title":"InjectedType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","url":"\/documentation\/factory\/injectedtype","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}]},"doc://Factory/documentation/Factory/FactoryContainer":{"url":"\/documentation\/factory\/factorycontainer","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainer","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryContainer","kind":"identifier"}],"abstract":[],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","role":"symbol","title":"FactoryContainer","type":"topic"},"doc://Factory/documentation/Factory/Contexts":{"title":"Contexts","role":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/FactoryScope":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","url":"\/documentation\/factory\/factoryscope","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FactoryScope"}],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryScope"}],"title":"FactoryScope","kind":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer","role":"symbol","title":"SharedContainer","kind":"symbol","type":"topic"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactorySharedContainer"}],"type":"topic","role":"symbol","url":"\/documentation\/factory\/factorysharedcontainer","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","title":"FactorySharedContainer","navigatorTitle":[{"kind":"identifier","text":"FactorySharedContainer"}]},"doc://Factory/documentation/Factory/AutoRegistering":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","url":"\/documentation\/factory\/autoregistering","title":"AutoRegistering","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"type":"topic"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"url":"\/documentation\/factory\/lazyinjected","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","type":"topic"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-632zk","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","role":"symbol","title":"resolve(_:)"},"doc://Factory/documentation/Factory/Scopes":{"url":"\/documentation\/factory\/scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"title":"Scopes","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","kind":"article"},"doc://Factory/documentation/Factory/VoidFactoryType":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType","url":"\/documentation\/factory\/voidfactorytype","abstract":[],"title":"VoidFactoryType","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryRegistration":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryRegistration"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"url":"\/documentation\/factory\/factoryregistration","role":"symbol","title":"FactoryRegistration","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/FactoryContainerManager":{"type":"topic","url":"\/documentation\/factory\/factorycontainermanager","abstract":[],"title":"FactoryContainerManager","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainerManager","kind":"identifier"}]},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"title":"Modular Development","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"url":"\/documentation\/factory\/factoryautoregistering","navigatorTitle":[{"kind":"identifier","text":"FactoryAutoRegistering"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryAutoRegistering"}],"title":"FactoryAutoRegistering","abstract":[],"kind":"symbol","type":"topic"}}}
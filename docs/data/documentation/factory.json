{"sections":[],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"metadata":{"modules":[{"name":"Factory"}],"title":"Factory","symbolKind":"module","roleHeading":"Framework","externalID":"Factory","role":"collection"},"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory"]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Performant"}],"type":"strong"},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Safe"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Free","type":"text"}],"type":"strong"},{"text":": Factory is free and open source under the MIT License.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}],"kind":"content"}],"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"anchor":"The-Basics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"anchor":"Development-and-Testing","title":"Development and Testing"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics"},{"title":"Additional Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"anchor":"Additional-Topics"},{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"anchor":"Classes","title":"Classes"},{"title":"Protocols","anchor":"Protocols","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]},{"title":"Structures","anchor":"Structures","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"]},{"generated":true,"anchor":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"title":"Functions"},{"generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType"],"title":"Type Aliases"},{"anchor":"Enumerations","title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","references":{"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","kind":"article","role":"article","title":"Functional Injection","url":"\/documentation\/factory\/functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}]},"doc://Factory/documentation/Factory/WeakLazyInjected":{"title":"WeakLazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"role":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","url":"\/documentation\/factory\/lazyinjected","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyInjected"}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"type":"topic","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","kind":"article"},"doc://Factory/documentation/Factory/InjectedObservable":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"InjectedObservable","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","url":"\/documentation\/factory\/injectedobservable","kind":"symbol","role":"symbol","title":"InjectedObservable","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}],"type":"topic","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}]},"doc://Factory/documentation/Factory/ContainerManager":{"url":"\/documentation\/factory\/containermanager","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","title":"ContainerManager"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresetoptions","title":"FactoryResetOptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryResetOptions","kind":"identifier"}]},"doc://Factory/documentation/Factory/Scopes":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/factory\/scopes","type":"topic","kind":"article","title":"Scopes"},"doc://Factory/documentation/Factory/FactoryRegistration":{"url":"\/documentation\/factory\/factoryregistration","abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"type":"topic","title":"FactoryRegistration","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/DynamicInjected":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/dynamicinjected","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","title":"DynamicInjected","role":"symbol"},"doc://Factory/documentation/Factory/InjectedType":{"role":"symbol","title":"InjectedType","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"type":"topic","abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"InjectedType","kind":"identifier"}],"url":"\/documentation\/factory\/injectedtype"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Factory9ContainerC","text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"resolve(_:)","url":"\/documentation\/factory\/resolve(_:)-52olu","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FactoryContainerManager","kind":"identifier"}],"type":"topic","title":"FactoryContainerManager","url":"\/documentation\/factory\/factorycontainermanager","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","role":"symbol","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve(_:)","url":"\/documentation\/factory\/resolve(_:)-632zk","abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"type":"topic","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryAutoRegistering"}],"type":"topic","title":"FactoryAutoRegistering","url":"\/documentation\/factory\/factoryautoregistering","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryAutoRegistering"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Previews":{"role":"article","url":"\/documentation\/factory\/previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"title":"SwiftUI Previews","type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","url":"\/documentation\/factory\/contexts","title":"Contexts","role":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"topic","title":"Injected","url":"\/documentation\/factory\/injected","role":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","kind":"symbol","title":"FactoryModifying"},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","url":"\/documentation\/factory\/resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"role":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/VoidFactoryType":{"navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}],"type":"topic","kind":"symbol","title":"VoidFactoryType","identifier":"doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType","role":"symbol","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}],"url":"\/documentation\/factory\/voidfactorytype"},"doc://Factory/documentation/Factory/AutoRegistering":{"navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"title":"AutoRegistering","role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}]},"doc://Factory/documentation/Factory/ParameterFactory":{"title":"ParameterFactory","role":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/FactoryContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontext","kind":"symbol","title":"FactoryContext","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext"},"doc://Factory/documentation/Factory/FactoryContextType":{"role":"symbol","url":"\/documentation\/factory\/factorycontexttype","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"FactoryContextType","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","kind":"symbol","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"title":"FactoryContextType"},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","url":"\/documentation\/factory\/container","title":"Container","kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic"},"doc://Factory/documentation/Factory/Factory":{"url":"\/documentation\/factory\/factory","kind":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/Design":{"role":"article","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","url":"\/documentation\/factory\/gettingstarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","title":"Factory Modifiers","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","url":"\/documentation\/factory\/modifiers"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"topic","kind":"article","role":"article","title":"Modular Development","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://Factory/documentation/Factory/Chains":{"role":"article","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"kind":"article","url":"\/documentation\/factory\/chains","type":"topic","title":"Circular Dependency Chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/ManagedContainer":{"title":"ManagedContainer","url":"\/documentation\/factory\/managedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"type":"topic","title":"FactorySharedContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactorySharedContainer"}],"navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorysharedcontainer","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","role":"symbol"},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryManagedContainer"}],"title":"FactoryManagedContainer","url":"\/documentation\/factory\/factorymanagedcontainer","abstract":[],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/Tags":{"role":"article","title":"Tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/InjectedObject":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","kind":"symbol","url":"\/documentation\/factory\/injectedobject","title":"InjectedObject","type":"topic","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedObject"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}]},"doc://Factory/documentation/Factory/Migration":{"type":"topic","title":"Migration","url":"\/documentation\/factory\/migration","abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","role":"article","kind":"article"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer","role":"symbol","type":"topic","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"title":"SharedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},"doc://Factory/documentation/Factory/Containers":{"type":"topic","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"url":"\/documentation\/factory\/containers","title":"Containers","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","role":"article"},"doc://Factory/documentation/Factory/FactoryContainer":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryContainer"}],"navigatorTitle":[{"text":"FactoryContainer","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factory\/factorycontainer","role":"symbol","abstract":[],"title":"FactoryContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","type":"topic"},"doc://Factory/documentation/Factory/FactoryResolving":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FactoryResolving","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","abstract":[],"role":"symbol","url":"\/documentation\/factory\/factoryresolving","type":"topic","kind":"symbol","title":"FactoryResolving"},"doc://Factory/documentation/Factory/ParameterFactoryType":{"title":"ParameterFactoryType","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ParameterFactoryType","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/factory\/parameterfactorytype","abstract":[],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","navigatorTitle":[{"text":"ParameterFactoryType","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryScope":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryScope"}],"title":"FactoryScope","url":"\/documentation\/factory\/factoryscope","abstract":[],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryScope"}]},"doc://Factory/documentation/Factory/Cycle":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","type":"topic","kind":"article","role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}]},"doc://Factory/documentation/Factory/Debugging":{"type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","title":"Debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","role":"article"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","type":"topic","kind":"article","role":"article","title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}]}}}
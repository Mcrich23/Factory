{"kind":"symbol","sections":[],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Adaptable"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performant"}]},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible"}]},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Lightweight","type":"text"}]},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Tested","type":"text"}]},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Free","type":"text"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Ready to get started?","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"symbolKind":"module","title":"Factory","role":"collection","externalID":"Factory","roleHeading":"Framework","modules":[{"name":"Factory"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"title":"The Basics","anchor":"The-Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"title":"Development and Testing","anchor":"Development-and-Testing"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"title":"Additional Topics","anchor":"Additional-Topics"},{"anchor":"Classes","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"title":"Classes"},{"title":"Protocols","generated":true,"anchor":"Protocols","identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]},{"anchor":"Structures","identifiers":["doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"title":"Structures","generated":true},{"anchor":"Functions","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"title":"Functions"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType"],"title":"Type Aliases","anchor":"Type-Aliases","generated":true},{"anchor":"Enumerations","title":"Enumerations","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory/FactoryContext":{"type":"topic","title":"FactoryContext","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/factory\/factorycontext","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","title":"FactoryManagedContainer","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryManagedContainer"}],"navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorymanagedcontainer","kind":"symbol"},"doc://Factory/documentation/Factory/ContainerManager":{"role":"symbol","kind":"symbol","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","url":"\/documentation\/factory\/containermanager","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"title":"ContainerManager","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"type":"topic"},"doc://Factory/documentation/Factory/Chains":{"title":"Circular Dependency Chains","type":"topic","role":"article","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"url":"\/documentation\/factory\/chains","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/Tags":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","type":"topic","title":"Tags","role":"article","kind":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}]},"doc://Factory/documentation/Factory/Scopes":{"abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","title":"Scopes","type":"topic","role":"collectionGroup","url":"\/documentation\/factory\/scopes","kind":"article"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","url":"\/documentation\/factory\/cycle","role":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"kind":"article","title":"Resolution Cycles"},"doc://Factory/documentation/Factory/Modules":{"abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"topic","url":"\/documentation\/factory\/modules","title":"Modular Development","role":"article","kind":"article"},"doc://Factory/documentation/Factory/Containers":{"title":"Containers","type":"topic","role":"article","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"url":"\/documentation\/factory\/containers","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers"},"doc://Factory/documentation/Factory/Container":{"role":"symbol","type":"topic","url":"\/documentation\/factory\/container","title":"Container","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},"doc://Factory/documentation/Factory/Factory":{"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","url":"\/documentation\/factory\/factory","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"title":"Factory","role":"symbol"},"doc://Factory/documentation/Factory/Migration":{"abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","title":"Migration","type":"topic","role":"article","url":"\/documentation\/factory\/migration","kind":"article"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Design":{"type":"topic","role":"article","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"kind":"article","url":"\/documentation\/factory\/design"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"title":"resolve(_:)","type":"topic","role":"symbol","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Factory9ContainerC","text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/resolve(_:)-52olu","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu"},"doc://Factory/documentation/Factory/InjectedObservable":{"abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","title":"InjectedObservable","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobservable","kind":"symbol"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"title":"FactorySharedContainer","type":"topic","role":"symbol","navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactorySharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorysharedcontainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","role":"symbol","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","type":"topic"},"doc://Factory/documentation/Factory/FactoryScope":{"abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","title":"FactoryScope","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryScope","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"url":"\/documentation\/factory\/factoryscope","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryContextType":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","role":"symbol","title":"FactoryContextType","type":"topic","url":"\/documentation\/factory\/factorycontexttype","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContextType"}],"kind":"symbol","abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}]},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","type":"topic","role":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"url":"\/documentation\/factory\/testing","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","title":"FactoryAutoRegistering","type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryAutoRegistering","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryAutoRegistering","kind":"identifier"}],"url":"\/documentation\/factory\/factoryautoregistering","kind":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","type":"topic","url":"\/documentation\/factory\/lazyinjected","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"title":"FactoryContainerManager","type":"topic","role":"symbol","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}],"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainerManager","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontainermanager","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","kind":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","role":"article","type":"topic","title":"Contexts","url":"\/documentation\/factory\/contexts","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}]},"doc://Factory/documentation/Factory/FactoryResolving":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResolving"}],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"abstract":[],"url":"\/documentation\/factory\/factoryresolving","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","title":"FactoryResolving","role":"symbol"},"doc://Factory/documentation/Factory/Previews":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","type":"topic","url":"\/documentation\/factory\/previews","role":"article","kind":"article","title":"SwiftUI Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"title":"resolve(_:)","type":"topic","role":"symbol","abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/resolve(_:)-632zk","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","type":"topic","url":"\/documentation\/factory\/factorycontainer","role":"symbol","kind":"symbol","title":"FactoryContainer","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FactoryContainer"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/WeakLazyInjected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"title":"WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic"},"doc://Factory/documentation/Factory/AutoRegistering":{"title":"AutoRegistering","type":"topic","role":"symbol","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AutoRegistering","kind":"identifier"}],"url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","url":"\/documentation\/factory\/managedcontainer","role":"symbol","kind":"symbol","title":"ManagedContainer","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ManagedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/ParameterFactoryType":{"title":"ParameterFactoryType","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactoryType"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ParameterFactoryType","kind":"identifier"}],"kind":"symbol","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","url":"\/documentation\/factory\/parameterfactorytype","type":"topic"},"doc://Factory/documentation/Factory/VoidFactoryType":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType","kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"VoidFactoryType"}],"abstract":[],"url":"\/documentation\/factory\/voidfactorytype","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VoidFactoryType"}],"title":"VoidFactoryType"},"doc://Factory/documentation/Factory/ParameterFactory":{"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},"doc://Factory/documentation/Factory/FactoryRegistration":{"url":"\/documentation\/factory\/factoryregistration","type":"topic","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","title":"FactoryRegistration","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryRegistration"}]},"doc://Factory/documentation/Factory/DynamicInjected":{"navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","kind":"symbol","url":"\/documentation\/factory\/dynamicinjected","title":"DynamicInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicInjected"}]},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","url":"\/documentation\/factory\/modifiers","type":"topic","title":"Factory Modifiers","role":"article","kind":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}]},"doc://Factory/documentation/Factory/Debugging":{"title":"Debugging","type":"topic","role":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article"},"doc://Factory/documentation/Factory/SharedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"type":"topic","kind":"symbol","url":"\/documentation\/factory\/sharedcontainer","role":"symbol","title":"SharedContainer"},"doc://Factory/documentation/Factory/Optionals":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","url":"\/documentation\/factory\/optionals","role":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"kind":"article","title":"Optionals and Dynamic Registration"},"doc://Factory/documentation/Factory/GettingStarted":{"title":"Getting Started","type":"topic","url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"url":"\/documentation\/factory\/factoryresetoptions","role":"symbol","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryResetOptions"}],"title":"FactoryResetOptions"},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factory\/injectedobject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"type":"topic","title":"InjectedObject"},"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","url":"\/documentation\/factory\/functional","role":"article","kind":"article","title":"Functional Injection","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}]},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","role":"symbol"},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resolving"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"url":"\/documentation\/factory\/resolving"},"doc://Factory/documentation/Factory/InjectedType":{"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"InjectedType","kind":"identifier"}],"url":"\/documentation\/factory\/injectedtype","type":"topic","kind":"symbol","role":"symbol","title":"InjectedType","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}]}}}
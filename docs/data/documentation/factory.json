{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory"},"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"hierarchy":{"paths":[[]]},"metadata":{"roleHeading":"Framework","title":"Factory","modules":[{"name":"Factory"}],"role":"collection","externalID":"Factory","symbolKind":"module"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"anchor":"The-Basics"},{"anchor":"Development-and-Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"title":"Development and Testing"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics","anchor":"Advanced-Topics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"anchor":"Additional-Topics","title":"Additional Topics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"anchor":"Classes","title":"Classes","generated":true},{"title":"Protocols","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"anchor":"Protocols"},{"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"generated":true},{"generated":true,"title":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"anchor":"Functions"},{"generated":true,"title":"Type Aliases","anchor":"Type-Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType","doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType"]},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"text":"Factory is…","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Tested","type":"text"}],"type":"strong"},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Free","type":"text"}]},{"type":"text","text":": Factory is free and open source under the MIT License."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}],"kind":"content"}],"references":{"doc://Factory/documentation/Factory/FactoryManagedContainer":{"role":"symbol","navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}],"title":"FactoryManagedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","type":"topic","url":"\/documentation\/factory\/factorymanagedcontainer","abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryManagedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryScope":{"kind":"symbol","navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryScope","kind":"identifier"}],"url":"\/documentation\/factory\/factoryscope","type":"topic","role":"symbol","title":"FactoryScope"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"type":"topic","role":"symbol","title":"resolve(_:)","url":"\/documentation\/factory\/resolve(_:)-632zk","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}]},"doc://Factory/documentation/Factory/FactoryResetOptions":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","title":"FactoryResetOptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"type":"topic","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresetoptions"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","type":"topic","url":"\/documentation\/factory\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"kind":"article"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"kind":"article","title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","role":"article","type":"topic"},"doc://Factory/documentation/Factory/SharedContainer":{"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","type":"topic","url":"\/documentation\/factory\/sharedcontainer"},"doc://Factory/documentation/Factory/Modifiers":{"title":"Factory Modifiers","type":"topic","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"},"doc://Factory/documentation/Factory/FactoryContainer":{"kind":"symbol","navigatorTitle":[{"text":"FactoryContainer","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontainer","type":"topic","role":"symbol","title":"FactoryContainer"},"doc://Factory/documentation/Factory/ManagedContainer":{"navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedContainer","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"title":"ManagedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","url":"\/documentation\/factory\/managedcontainer"},"doc://Factory/documentation/Factory/VoidFactoryType":{"role":"symbol","navigatorTitle":[{"text":"VoidFactoryType","kind":"identifier"}],"title":"VoidFactoryType","identifier":"doc:\/\/Factory\/documentation\/Factory\/VoidFactoryType","type":"topic","url":"\/documentation\/factory\/voidfactorytype","abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VoidFactoryType","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryResolving":{"kind":"symbol","navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResolving","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresolving","type":"topic","role":"symbol","title":"FactoryResolving"},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","url":"\/documentation\/factory\/container","title":"Container","role":"symbol"},"doc://Factory/documentation/Factory/Design":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","title":"Designing Factory","url":"\/documentation\/factory\/design","role":"article","type":"topic"},"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"url":"\/documentation\/factory\/injectedobject","role":"symbol","title":"InjectedObject","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}]},"doc://Factory/documentation/Factory/DynamicInjected":{"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}],"title":"DynamicInjected","type":"topic","url":"\/documentation\/factory\/dynamicinjected"},"doc://Factory/documentation/Factory/GettingStarted":{"url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","role":"collectionGroup","kind":"article"},"doc://Factory/documentation/Factory/Containers":{"type":"topic","url":"\/documentation\/factory\/containers","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"kind":"article","title":"Containers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","role":"article"},"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"topic","url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article"},"doc://Factory/documentation/Factory/InjectedObservable":{"type":"topic","role":"symbol","title":"InjectedObservable","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedObservable"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","kind":"symbol","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"url":"\/documentation\/factory\/injectedobservable","navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}]},"doc://Factory/documentation/Factory/Tags":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"title":"Tags","url":"\/documentation\/factory\/tags","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Contexts":{"title":"Contexts","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/FactoryContextType":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"title":"FactoryContextType","url":"\/documentation\/factory\/factorycontexttype","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"FactoryContextType","kind":"identifier"}]},"doc://Factory/documentation/Factory/Chains":{"type":"topic","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","role":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"kind":"article","type":"topic","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},"doc://Factory/documentation/Factory/FactoryModifying":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","type":"topic","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol"},"doc://Factory/documentation/Factory/Injected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","url":"\/documentation\/factory\/injected","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"role":"symbol"},"doc://Factory/documentation/Factory/FactoryRegistration":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","url":"\/documentation\/factory\/factoryregistration","type":"topic","title":"FactoryRegistration","role":"symbol","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}]},"doc://Factory/documentation/Factory/ParameterFactoryType":{"title":"ParameterFactoryType","role":"symbol","navigatorTitle":[{"text":"ParameterFactoryType","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactoryType"}],"abstract":[],"url":"\/documentation\/factory\/parameterfactorytype","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactoryType"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"role":"symbol","title":"resolve(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","type":"topic","url":"\/documentation\/factory\/resolve(_:)-52olu","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7Factory9ContainerC","kind":"typeIdentifier","text":"Container"},{"text":", ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://Factory/documentation/Factory/ContainerTrait":{"role":"symbol","url":"\/documentation\/factory\/containertrait","navigatorTitle":[{"kind":"identifier","text":"ContainerTrait"}],"abstract":[{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","isActive":true,"type":"reference"},{"text":" is a test trait that provides a scoped container for dependency injection in tests.","type":"text"},{"type":"text","text":" "},{"text":"It allows you to isolate the default ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" to a test case, thus allowing you to run Swift Testing tests in parallel."}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContainerTrait"}],"title":"ContainerTrait"},"doc://Factory/documentation/Factory/Previews":{"type":"topic","kind":"article","title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/AutoRegistering":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AutoRegistering","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"code":"Container","type":"codeVoice"},{"type":"text","text":"."}],"title":"AutoRegistering","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactorySharedContainer":{"role":"symbol","navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"title":"FactorySharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","type":"topic","url":"\/documentation\/factory\/factorysharedcontainer","abstract":[],"kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactorySharedContainer"}]},"doc://Factory/documentation/Factory/WeakLazyInjected":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WeakLazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","url":"\/documentation\/factory\/weaklazyinjected","title":"WeakLazyInjected","role":"symbol"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Functional":{"url":"\/documentation\/factory\/functional","kind":"article","title":"Functional Injection","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}]},"doc://Factory/documentation/Factory/ContainerManager":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","title":"ContainerManager","url":"\/documentation\/factory\/containermanager","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"url":"\/documentation\/factory\/lazyinjected","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}]},"doc://Factory/documentation/Factory/InjectedType":{"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedType"}],"title":"InjectedType","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","url":"\/documentation\/factory\/injectedtype","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"type":"topic","kind":"symbol","title":"FactoryContainerManager","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FactoryContainerManager","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontainermanager","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","abstract":[],"navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","abstract":[],"kind":"symbol","url":"\/documentation\/factory\/factoryautoregistering","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryAutoRegistering","kind":"identifier"}],"title":"FactoryAutoRegistering","navigatorTitle":[{"kind":"identifier","text":"FactoryAutoRegistering"}],"role":"symbol"},"doc://Factory/documentation/Factory/FactoryContext":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"url":"\/documentation\/factory\/factorycontext","title":"FactoryContext","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryContext"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","kind":"symbol","type":"topic"},"doc://Factory/documentation/Factory/Migration":{"role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","title":"Migration","type":"topic","url":"\/documentation\/factory\/migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"kind":"article"},"doc://Factory/documentation/Factory/Scopes":{"title":"Scopes","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","url":"\/documentation\/factory\/scopes","type":"topic","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}]},"doc://Factory/documentation/Factory/Resolving":{"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"title":"Resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","url":"\/documentation\/factory\/resolving"},"doc://Factory/documentation/Factory/ParameterFactory":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"title":"ParameterFactory","url":"\/documentation\/factory\/parameterfactory","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}]}}}
{"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Some dependency injection systems offer functionality known as tagging. Once tagged, you can ask the system for a list of all registered dependencies that conform to that tag.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let processors = container.resolve(tagged: \"processor\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes the tag is explicitly defined during the registration process, like .tag(“processors”). In other systems, you might ask the system for everything registered that conforms to a specific type."}]},{"type":"codeListing","syntax":"swift","code":["let processors = container.resolve(Processing.self)"]},{"type":"paragraph","inlineContent":[{"text":"Doing this sort of thing in Factory is somewhat problematic, in that in most cases for most instances there ","type":"text"},{"inlineContent":[{"text":"isn’t","type":"text"}],"type":"emphasis"},{"text":" a registration phase. Factory’s are lazy creatures, and they’re not evaluated until the Factory is requested.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"So what can we do?","type":"text"}]},{"level":2,"type":"heading","text":"Simple Solution","anchor":"Simple-Solution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following Factory registrations."}]},{"type":"codeListing","syntax":"swift","code":["extension SharedContainer {","    var processor1: Factory<Processor> { self { Processor1() } }","    var processor2: Factory<Processor> { self { Processor2() } }","}"]},{"type":"paragraph","inlineContent":[{"text":"And now the following container extension added to our main application.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    public static var processors: [KeyPath<Container, Factory<Processor>>] = [","        \\.processor1,","        \\.processor2,","    ]","}"]},{"inlineContent":[{"type":"text","text":"Here we build a simple list of keyPaths that defines all known processors. As discussed in multiple module support, the root application should know what systems are available to it."}],"type":"paragraph"},{"inlineContent":[{"text":"Once that’s done, accomplishing the lookup and getting the list of actual processors is a piece of cake.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    public func processors() -> [Processor] {","        Container.processors.map { self[keyPath: $0]() }","    }","}"]},{"inlineContent":[{"text":"And since the keyPath definition guarantees the type of the object, the array will also be type safe, something that can be difficult to accomplish with simple string-based tagging systems.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But we can do more."}],"type":"paragraph"},{"level":2,"text":"Appending New Processors","type":"heading","anchor":"Appending-New-Processors"},{"inlineContent":[{"text":"First, note that anything could be added to the array at any point in time.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors.append(\\.processor3)","    }","    var processor3: Factory<Processor> { self { Processor3() } }","}"]},{"level":2,"text":"Multiple Modules and Anonymous Processors","type":"heading","anchor":"Multiple-Modules-and-Anonymous-Processors"},{"inlineContent":[{"text":"Above we mentioned that that main app should know what processors are available to it. That said, sometime you may not.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In that case you could ask a set of modules for their own, anonymous contributions."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors += ModuleA.availableProcessors()","        Container.processors += ModuleB.availableProcessors()","        Container.processors += ModuleC.availableProcessors()","    }","}"]},{"anchor":"Priority","type":"heading","level":2,"text":"Priority"},{"inlineContent":[{"type":"text","text":"The basic solution can obviously be expanded as needed, perhaps by creating a struct that allows for tag priority."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Tag<T> {","    let path: KeyPath<Container, Factory<T>>","    let priority: Int","}","","extension Container {","    static var processors: [Tag<Processor>] = [","        Tag(path: \\.processor1, priority: 20),","        Tag(path: \\.processor2, priority: 10),","    ]","    func processors() -> [Processor] {","        Container.processors","            .sorted(by: { $0.priority < $1.priority })","            .map { self[keyPath: $0.path]() }","    }","}"]},{"inlineContent":[{"type":"text","text":"While Factory doesn’t currently support tags out of the box, there are a lot of ways to roll your own solutions using the tools Factory provides."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/tags"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Tags"},"seeAlsoSections":[{"generated":true,"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"article","metadata":{"modules":[{"name":"Factory"}],"role":"article","title":"Tags","roleHeading":"Article"},"abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"references":{"doc://Factory/documentation/Factory/Cycle":{"abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"title":"Modular Development","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Functional":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article","title":"Functional Injection","url":"\/documentation\/factory\/functional","role":"article"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","role":"article","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"title":"Optionals and Dynamic Registration","kind":"article","type":"topic"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Design":{"type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","url":"\/documentation\/factory\/design"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","url":"\/documentation\/factory\/modifiers","kind":"article","title":"Factory Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","role":"article"}}}
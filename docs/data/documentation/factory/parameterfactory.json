{"sections":[],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"kind":"relationships"}],"kind":"symbol","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"metadata":{"symbolKind":"struct","title":"ParameterFactory","externalID":"s:7Factory09ParameterA0V","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"modules":[{"name":"Factory"}],"roleHeading":"Structure"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"],"generated":true,"anchor":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"],"generated":true,"anchor":"Instance-Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"generated":true,"anchor":"Instance-Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the"},{"type":"text","text":" "},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}]},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Resolving it is straightforward. Just pass the parameter to the Factory.","type":"text"}]},{"code":["let myService = Container.shared.parameterService(n)"],"type":"codeListing","syntax":"Swift"},{"type":"paragraph","inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper with ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}]},{"code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}]},{"code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","type":"topic","title":"callAsFunction(_:)","url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","abstract":[{"text":"Resolves a factory capable of taking parameters at runtime.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","role":"symbol"},"doc://Factory/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Factory\/s8SendableP"},"doc://Factory/documentation/Factory/ParameterFactory/registration":{"title":"registration","url":"\/documentation\/factory\/parameterfactory\/registration","role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Required registration","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations","title":"FactoryModifying Implementations","kind":"article","abstract":[],"url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","role":"collectionGroup"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","title":"init(_:key:_:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"preciseIdentifier":"s:7Factory16ManagedContainerP","text":"ManagedContainer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","type":"topic","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)","kind":"symbol","role":"symbol","title":"resolve(_:)"},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"title":"register(factory:)","abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/factory\/parameterfactory\/register(factory:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ParameterFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA4Typea"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"ParameterFactory","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://Factory/documentation/Factory/ParameterFactory":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","kind":"symbol","url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/FactoryModifying":{"role":"symbol","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","type":"topic","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}
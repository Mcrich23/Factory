{"sections":[],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"]},{"anchor":"Instance-Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"],"title":"Instance Properties","generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"generated":true},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"metadata":{"modules":[{"name":"Factory"}],"externalID":"s:7Factory09ParameterA0V","title":"ParameterFactory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"symbolKind":"struct","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"roleHeading":"Structure"},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"type":"codeVoice","code":"ParameterFactory"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the"},{"text":" ","type":"text"},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"]},{"inlineContent":[{"text":"Resolving it is straightforward. Just pass the parameter to the Factory.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"Swift","code":["let myService = Container.shared.parameterService(n)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One caveat is that you can’t use the "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" property wrapper with "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":" as there’s no way to get"},{"text":" ","type":"text"},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}]},{"syntax":"swift","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct.","type":"text"}],"type":"paragraph"},{"code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"inlineContent":[{"text":"that","type":"text"}],"type":"emphasis"},{"text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in","type":"text"},{"text":" ","type":"text"},{"text":"later requests will be ignored until the factory or scope is reset.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/parameterfactory"]}],"references":{"doc://Factory/documentation/Factory/ParameterFactory":{"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},"doc://Factory/documentation/Factory/ParameterFactory/registration":{"abstract":[{"type":"text","text":"Required registration"}],"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"registration","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory0A12RegistrationV","kind":"typeIdentifier","text":"FactoryRegistration"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration","url":"\/documentation\/factory\/parameterfactory\/registration","type":"topic","title":"registration"},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","url":"\/documentation\/factory\/parameterfactory\/register(factory:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ParameterFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA4Typea"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA0V","kind":"typeIdentifier","text":"ParameterFactory"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"register(factory:)","role":"symbol","kind":"symbol","abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}]},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","abstract":[],"title":"FactoryModifying Implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"title":"resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"("},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","role":"symbol","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"type":"topic","abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"role":"symbol","title":"init(_:key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"text":"ManagedContainer","kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA4Typea","text":"ParameterFactoryType"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">)"}],"url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)"},"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"kind":"symbol","title":"callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"("},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","role":"symbol","type":"topic"}}}
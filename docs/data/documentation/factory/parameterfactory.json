{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"code":"ParameterFactory","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the"},{"type":"text","text":" "},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"]},{"inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}],"type":"paragraph"},{"code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift","type":"codeListing"},{"inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"text":" property wrapper with ","type":"text"},{"type":"codeVoice","code":"ParameterFactory"},{"text":" as there’s no way to get","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}]},{"syntax":"swift","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"inlineContent":[{"text":"that","type":"text"}],"type":"emphasis"},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"text":"later requests will be ignored until the factory or scope is reset.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"variants":[{"paths":["\/documentation\/factory\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"externalID":"s:7Factory09ParameterA0V","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"modules":[{"name":"Factory"}],"role":"symbol","roleHeading":"Structure","title":"ParameterFactory"},"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"anchor":"Initializers","title":"Initializers","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"]},{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"],"title":"Instance Properties","anchor":"Instance-Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"generated":true,"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"references":{"doc://Factory/documentation/Factory/ParameterFactory/registration":{"title":"registration","role":"symbol","abstract":[{"text":"Required registration","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"text":"FactoryRegistration","kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"url":"\/documentation\/factory\/parameterfactory\/registration"},"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Resolves a factory capable of taking parameters at runtime.","type":"text"}],"kind":"symbol","role":"symbol","title":"callAsFunction(_:)","url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"kind":"symbol","title":"init(_:key:_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"kind":"text","text":", "},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA4Typea","kind":"typeIdentifier","text":"ParameterFactoryType"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations","url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","abstract":[],"role":"collectionGroup","type":"topic","kind":"article","title":"FactoryModifying Implementations"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Unsugared resolution function.","type":"text"}],"kind":"symbol","role":"symbol","title":"resolve(_:)","url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"},"doc://Factory/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Factory\/s8SendableP","type":"unresolvable"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/FactoryModifying":{"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","kind":"symbol","title":"FactoryModifying"},"doc://Factory/documentation/Factory/ParameterFactory":{"title":"ParameterFactory","role":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/parameterfactory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"ParameterFactory","preciseIdentifier":"s:7Factory09ParameterA0V"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"register(factory:)","type":"topic","abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)"}}}
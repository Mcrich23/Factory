{"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}],"title":"ParameterFactory","modules":[{"name":"Factory"}],"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"externalID":"s:7Factory09ParameterA0V","role":"symbol","symbolKind":"struct","roleHeading":"Structure"},"topicSections":[{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"]},{"title":"Instance Properties","anchor":"Instance-Properties","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"anchor":"Default-Implementations","generated":true}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"code":"ParameterFactory","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}]},{"code":["let myService = Container.shared.parameterService(n)"],"type":"codeListing","syntax":"Swift"},{"type":"paragraph","inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"text":" property wrapper with ","type":"text"},{"type":"codeVoice","code":"ParameterFactory"},{"text":" as there’s no way to get","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"text":" ","type":"text"},{"text":"probably need to reference the container directly and do something similar to the following.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"]},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"type":"codeListing","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"inlineContent":[{"type":"text","text":"that"}],"type":"emphasis"},{"text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}]}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/parameterfactory"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","kind":"symbol","title":"callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"role":"symbol","url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"type":"topic","title":"FactoryModifying Implementations","kind":"article","abstract":[],"role":"collectionGroup","url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"},"doc://Factory/documentation/Factory/FactoryModifying":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","type":"topic","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"title":"ParameterFactory","url":"\/documentation\/factory\/parameterfactory","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}]},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)","abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:7Factory16ManagedContainerP","kind":"typeIdentifier","text":"ManagedContainer"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Factory09ParameterA4Typea","text":"ParameterFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","kind":"symbol","title":"init(_:key:_:)"},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Unsugared resolution function."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)","url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","title":"resolve(_:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/registration":{"abstract":[{"type":"text","text":"Required registration"}],"type":"topic","role":"symbol","kind":"symbol","title":"registration","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/factory\/parameterfactory\/registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"title":"register(factory:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"register"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"factory"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA4Typea","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA0V","kind":"typeIdentifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","url":"\/documentation\/factory\/parameterfactory\/register(factory:)"}}}
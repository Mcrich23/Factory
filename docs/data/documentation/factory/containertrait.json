{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/containertrait"]}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ContainerTrait","kind":"identifier"}],"symbolKind":"struct","title":"ContainerTrait","modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"ContainerTrait"}],"role":"symbol","roleHeading":"Structure","externalID":"s:7Factory14ContainerTraitV"},"abstract":[{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","isActive":true,"type":"reference"},{"type":"text","text":" is a test trait that provides a scoped container for dependency injection in tests."},{"type":"text","text":" "},{"text":"It allows you to isolate the default ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","isActive":true},{"text":" to a test case, thus allowing you to run Swift Testing tests in parallel.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Factory\/s8SendableP","doc:\/\/Factory\/7Testing11TestScopingP","doc:\/\/Factory\/7Testing9TestTraitP","doc:\/\/Factory\/7Testing5TraitP"],"type":"conformsTo","title":"Conforms To"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ContainerTrait","kind":"identifier"}]}]},{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"If you use a custom container, you have to create your own trait that conforms to the ","type":"text"},{"code":"TestTrait","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"That said, itâ€™s also possible to leverage this behavior in "},{"code":"XCTestCase","type":"codeVoice"},{"type":"text","text":", by using the "},{"code":"@TaskLocal","type":"codeVoice"},{"type":"text","text":" provided "},{"code":"withValue","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"See examples in the "},{"type":"codeVoice","code":"ParallelXCTests"},{"text":" file.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerTrait\/provideScope(for:testCase:performing:)"],"title":"Instance Methods","generated":true,"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerTrait\/Trait-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"references":{"doc://Factory/documentation/Factory/ContainerTrait/provideScope(for:testCase:performing:)":{"abstract":[],"url":"\/documentation\/factory\/containertrait\/providescope(for:testcase:performing:)","title":"provideScope(for:testCase:performing:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait\/provideScope(for:testCase:performing:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"provideScope"},{"text":"(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Testing4TestV","text":"Test","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"testCase","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Testing4TestV","text":"Test"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Testing4TestV4CaseV","text":"Case"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"performing"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}]},"doc://Factory/7Testing5TraitP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/7Testing5TraitP","title":"Testing.Trait"},"doc://Factory/documentation/Factory/ContainerTrait":{"role":"symbol","url":"\/documentation\/factory\/containertrait","navigatorTitle":[{"kind":"identifier","text":"ContainerTrait"}],"abstract":[{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","isActive":true,"type":"reference"},{"text":" is a test trait that provides a scoped container for dependency injection in tests.","type":"text"},{"type":"text","text":" "},{"text":"It allows you to isolate the default ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" to a test case, thus allowing you to run Swift Testing tests in parallel."}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContainerTrait"}],"title":"ContainerTrait"},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","url":"\/documentation\/factory\/container","title":"Container","role":"symbol"},"doc://Factory/documentation/Factory/ContainerTrait/Trait-Implementations":{"kind":"article","type":"topic","title":"Trait Implementations","url":"\/documentation\/factory\/containertrait\/trait-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerTrait\/Trait-Implementations"},"doc://Factory/7Testing11TestScopingP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/7Testing11TestScopingP","title":"Testing.TestScoping"},"doc://Factory/7Testing9TestTraitP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/7Testing9TestTraitP","title":"Testing.TestTrait"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"}}}
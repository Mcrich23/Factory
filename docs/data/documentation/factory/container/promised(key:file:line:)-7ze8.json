{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":" = ","kind":"text"},{"text":"#function","kind":"keyword"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":" = ","kind":"text"},{"text":"#file","kind":"keyword"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"kind":"keyword","text":"#line"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    public var accountLoader: Factory<AccountLoading?> { promised() }","}"]},{"inlineContent":[{"type":"text","text":"When run in debug mode and the application attempts to resolve an unregistered accountLoader, "},{"type":"codeVoice","code":"promised()"},{"type":"text","text":" will trigger a fatalError to"},{"text":" ","type":"text"},{"type":"text","text":"inform you of the mistake. But in a released application, "},{"type":"codeVoice","code":"promised()"},{"type":"text","text":" simply returns nil and your application can continue on."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:file:line:)-7ze8"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Container"]]},"sections":[],"variants":[{"paths":["\/documentation\/factory\/container\/promised(key:file:line:)-7ze8"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"Factory","title":"promised(key:file:line:)","modules":[{"name":"Factory"}],"symbolKind":"method","externalID":"s:7Factory16ManagedContainerPAAE8promised3key4file4lineA2AVyqd__SgGs12StaticStringV_ALSutlF::SYNTHESIZED::s:7Factory9ContainerC","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"roleHeading":"Instance Method","role":"symbol"},"abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"references":{"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","url":"\/documentation\/factory\/container","title":"Container","role":"symbol"},"doc://Factory/documentation/Factory/Container/promised(key:file:line:)-7ze8":{"type":"topic","role":"symbol","url":"\/documentation\/factory\/container\/promised(key:file:line:)-7ze8","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:file:line:)-7ze8","title":"promised(key:file:line:)"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]}}}
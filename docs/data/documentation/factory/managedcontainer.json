{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"},{"text":" : AnyObject, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"If a container only supports ManagedContainer then the container must be instantiated and passed as an instance. Hereâ€™s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an example of passing such a container to a view model for dependency resolution."}]},{"type":"codeListing","code":["class ContentViewModel {","    let service: MyServiceType","    init(container: Container) {","        service = container.service()","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","isActive":true,"type":"reference"},{"type":"text","text":" for more information."}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/factory\/managedcontainer"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager"],"anchor":"Instance-Properties"},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-9ht01","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-up8n","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:file:line:)-663f6","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:file:line:)-8l95o","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)"],"generated":true,"title":"Instance Methods"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer"},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Factory\/s8SendableP"],"kind":"relationships","type":"inheritsFrom"},{"type":"inheritedBy","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"title":"Inherited By","kind":"relationships"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"kind":"symbol","metadata":{"externalID":"s:7Factory16ManagedContainerP","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"}],"symbolKind":"protocol","title":"ManagedContainer","roleHeading":"Protocol","role":"symbol","modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Factory/documentation/Factory/ManagedContainer/with(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"with"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"with(_:)","type":"topic","url":"\/documentation\/factory\/managedcontainer\/with(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)","role":"symbol","abstract":[{"type":"text","text":"Defines a with function to allow container transformation on assignment."}]},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-9ht01":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA4Typea","kind":"typeIdentifier","text":"ParameterFactoryType"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"ParameterFactory","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-9ht01","title":"callAsFunction(key:_:)","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound ParameterFactory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-9ht01","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer","role":"symbol","type":"topic","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"title":"SharedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},"doc://Factory/documentation/Factory/ManagedContainer":{"title":"ManagedContainer","url":"\/documentation\/factory\/managedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:file:line:)-663f6":{"url":"\/documentation\/factory\/managedcontainer\/promised(key:file:line:)-663f6","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ParameterFactory","preciseIdentifier":"s:7Factory09ParameterA0V"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:file:line:)-663f6","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a parameter factory whose optional registration is promised before resolution."}],"title":"promised(key:file:line:)","role":"symbol"},"doc://Factory/s8SendableP":{"identifier":"doc:\/\/Factory\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/ManagedContainer/decorator(_:)":{"url":"\/documentation\/factory\/managedcontainer\/decorator(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"kind":"text","text":"((("},{"text":"Any","kind":"keyword"},{"kind":"text","text":") -> ())?)"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","abstract":[{"type":"text","text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container."}],"title":"decorator(_:)","role":"symbol"},"doc://Factory/documentation/Factory/Containers":{"type":"topic","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"url":"\/documentation\/factory\/containers","title":"Containers","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","role":"article"},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-up8n":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory04VoidA4Typea","text":"VoidFactoryType"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-up8n","title":"callAsFunction(key:_:)","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-up8n","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","url":"\/documentation\/factory\/container","title":"Container","kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic"},"doc://Factory/documentation/Factory/ManagedContainer/reset(options:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"FactoryResetOptions","preciseIdentifier":"s:7Factory0A12ResetOptionsO","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/factory\/managedcontainer\/reset(options:)","title":"reset(options:)","abstract":[{"type":"text","text":"Defines a thread safe access mechanism to reset the container."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","url":"\/documentation\/factory\/resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"role":"symbol","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:file:line:)-8l95o":{"url":"\/documentation\/factory\/managedcontainer\/promised(key:file:line:)-8l95o","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:file:line:)-8l95o","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution."}],"title":"promised(key:file:line:)","role":"symbol"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/ManagedContainer/manager":{"url":"\/documentation\/factory\/managedcontainer\/manager","type":"topic","abstract":[{"text":"Defines the ContainerManager used to manage registrations, resolutions, and scope caching for that container. Encapsulating the code in","type":"text"},{"text":" ","type":"text"},{"text":"this fashion makes creating and using your own custom containers much simpler.","type":"text"}],"title":"manager","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"manager"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ContainerManager","preciseIdentifier":"s:7Factory16ContainerManagerC"}],"required":true,"kind":"symbol","role":"symbol"}}}
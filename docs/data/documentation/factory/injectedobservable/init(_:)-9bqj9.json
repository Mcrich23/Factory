{"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"text":"@autoclosure ","kind":"attribute"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Still has issue with attempting to pass dependency into existing view when existing InjectedObject has keyPath.","type":"text"},{"text":" ","type":"text"},{"text":"https:\/\/forums.swift.org\/t\/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified","type":"text"}]}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9"]}],"kind":"symbol","metadata":{"title":"init(_:)","modules":[{"name":"Factory"}],"platforms":[{"beta":false,"name":"iOS","deprecated":false,"introducedAt":"17.0","unavailable":false},{"beta":false,"deprecated":false,"introducedAt":"14.0","unavailable":false,"name":"macOS"},{"name":"tvOS","unavailable":false,"deprecated":false,"introducedAt":"17.0","beta":false},{"deprecated":false,"beta":false,"name":"watchOS","unavailable":false,"introducedAt":"10.0"}],"externalID":"s:7Factory18InjectedObservableVyACyxGxyXAcfc","roleHeading":"Initializer","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Observable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"symbolKind":"init","extendedModule":"Factory","role":"symbol"},"abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable"]]},"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/InjectedObservable/init(_:)-9bqj9":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"code":"Observable","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}]},"doc://Factory/documentation/Factory/InjectedObservable":{"abstract":[{"type":"text","text":"A property wrapper that injects an Observable dependency into a SwiftUI view."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","title":"InjectedObservable","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObservable","kind":"identifier"}],"navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobservable","kind":"symbol"}}}
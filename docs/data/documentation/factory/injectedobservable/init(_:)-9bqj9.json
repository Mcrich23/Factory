{"abstract":[{"text":"Simple initializer with passed parameter bypassing injection.","type":"text"}],"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"modules":[{"name":"Factory"}],"extendedModule":"Factory","roleHeading":"Initializer","title":"init(_:)","role":"symbol","externalID":"s:7Factory18InjectedObservableVyACyxGxyXAcfc","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Observable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"platforms":[{"name":"iOS","introducedAt":"17.0","deprecated":false,"unavailable":false,"beta":false},{"beta":false,"unavailable":false,"introducedAt":"14.0","deprecated":false,"name":"macOS"},{"introducedAt":"17.0","name":"tvOS","unavailable":false,"beta":false,"deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"10.0","deprecated":false}],"symbolKind":"init"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"wrappedValue","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Still has issue with attempting to pass dependency into existing view when existing InjectedObject has keyPath."},{"text":" ","type":"text"},{"type":"text","text":"https:\/\/forums.swift.org\/t\/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9"},"variants":[{"paths":["\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable"]]},"kind":"symbol","references":{"doc://Factory/documentation/Factory/InjectedObservable/init(_:)-9bqj9":{"title":"init(_:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"Observable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9","type":"topic","abstract":[{"text":"Simple initializer with passed parameter bypassing injection.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9","kind":"symbol"},"doc://Factory/documentation/Factory/InjectedObservable":{"type":"topic","role":"symbol","title":"InjectedObservable","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedObservable"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","kind":"symbol","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}],"url":"\/documentation\/factory\/injectedobservable","navigatorTitle":[{"text":"InjectedObservable","kind":"identifier"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"}}}
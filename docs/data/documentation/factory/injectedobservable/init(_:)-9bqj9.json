{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9","interfaceLanguage":"swift"},"metadata":{"platforms":[{"name":"iOS","deprecated":false,"unavailable":false,"beta":false,"introducedAt":"17.0"},{"deprecated":false,"unavailable":false,"beta":false,"introducedAt":"14.0","name":"macOS"},{"beta":false,"deprecated":false,"introducedAt":"17.0","name":"tvOS","unavailable":false},{"unavailable":false,"introducedAt":"10.0","beta":false,"deprecated":false,"name":"watchOS"}],"modules":[{"name":"Factory"}],"externalID":"s:7Factory18InjectedObservableVyACyxGxyXAcfc","symbolKind":"init","extendedModule":"Factory","roleHeading":"Initializer","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Observable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(_:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}],"variants":[{"paths":["\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/InjectedObservable"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","text":"MainActor","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"wrappedValue","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Still has issue with attempting to pass dependency into existing view when existing InjectedObject has keyPath.","type":"text"},{"type":"text","text":" "},{"text":"https:\/\/forums.swift.org\/t\/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified","type":"text"}]}]}],"references":{"doc://Factory/documentation/Factory/InjectedObservable":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"InjectedObservable","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable","url":"\/documentation\/factory\/injectedobservable","kind":"symbol","role":"symbol","title":"InjectedObservable","navigatorTitle":[{"kind":"identifier","text":"InjectedObservable"}],"type":"topic","abstract":[{"text":"A property wrapper that injects an Observable dependency into a SwiftUI view.","type":"text"}]},"doc://Factory/documentation/Factory/InjectedObservable/init(_:)-9bqj9":{"url":"\/documentation\/factory\/injectedobservable\/init(_:)-9bqj9","conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"Observable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","kind":"symbol","role":"symbol","title":"init(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObservable\/init(_:)-9bqj9","abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"}}}
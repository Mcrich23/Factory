{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@discardableResult"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"options","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","kind":"typeIdentifier","text":"FactoryResetOptions","preciseIdentifier":"s:7Factory0A12ResetOptionsO"},{"kind":"text","text":" = .all) -> "},{"text":"Self","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"options","content":[{"inlineContent":[{"text":"Options description","type":"text"}],"type":"paragraph"}]}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/reset(_:)","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"]]},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"roleHeading":"Instance Method","extendedModule":"Factory","externalID":"s:7Factory0A9ModifyingPAAE5resetyxAA0A12ResetOptionsOF","title":"reset(_:)","modules":[{"name":"Factory"}],"role":"symbol","symbolKind":"method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factorymodifying\/reset(_:)"]}],"abstract":[{"text":"Resets the Factory’s behavior to its original state, removing any registrations and clearing any cached items from the specified scope.","type":"text"}],"references":{"doc://Factory/documentation/Factory/FactoryModifying/reset(_:)":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/reset(_:)","abstract":[{"type":"text","text":"Resets the Factory’s behavior to its original state, removing any registrations and clearing any cached items from the specified scope."}],"kind":"symbol","url":"\/documentation\/factory\/factorymodifying\/reset(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"title":"reset(_:)","role":"symbol"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","title":"FactoryResetOptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"type":"topic","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresetoptions"},"doc://Factory/documentation/Factory/FactoryModifying":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","type":"topic","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol"}}}
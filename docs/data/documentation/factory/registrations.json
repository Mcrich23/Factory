{"metadata":{"roleHeading":"Article","role":"article","title":"Sample Registrations","modules":[{"name":"Factory"}]},"primaryContentSections":[{"content":[{"type":"heading","level":3,"text":"Basic","anchor":"Basic"},{"inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"This registered dependency returns a new, unique version of ","type":"text"},{"type":"codeVoice","code":"MyServiceType"},{"text":" whenever it’s asked to do so.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"We prefer the more concise version, and that’s what we’ll use going forward.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The container helper functions are ","type":"text"},{"type":"codeVoice","code":"@inlinable"},{"text":" and as such there’s no performance penalty incurred when calling them.","type":"text"}]}],"type":"aside","name":"Note","style":"note"},{"type":"heading","level":3,"text":"Scopes","anchor":"Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}]},{"type":"codeListing","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"syntax":"swift"},{"text":"Constructor Injection","type":"heading","level":3,"anchor":"Constructor-Injection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}]},{"type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift"},{"level":3,"anchor":"Parameters","text":"Parameters","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true},{"type":"text","text":"."}]},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we also needed to specify the type of our parameter."}]},{"type":"heading","anchor":"Same-Types","text":"Same Types","level":3},{"inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"type":"codeListing"},{"text":"Inside Custom Containers","anchor":"Inside-Custom-Containers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve seen factory registrations done within container "},{"type":"emphasis","inlineContent":[{"text":"extensions","type":"text"}]},{"text":", but it should also be noted that we can also create them within our own custom containers.","type":"text"}]},{"code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"code":"service2","type":"codeVoice"},{"text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}],"type":"paragraph"},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle.","type":"text"}]}]},{"inlineContent":[{"text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Static Factory’s","anchor":"Static-Factorys"},{"inlineContent":[{"type":"text","text":"Example of a static Factory 2.0 registration container."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}]},{"type":"paragraph","inlineContent":[{"text":"While you ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"can","type":"text"}]},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"reference","isActive":true},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"]}],"kind":"content"}],"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolutions"],"anchor":"Examples","title":"Examples"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/registrations"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Registrations","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","references":{"doc://Factory/documentation/Factory/GettingStarted":{"title":"Getting Started","type":"topic","url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","role":"symbol"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/ParameterFactory":{"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},"doc://Factory/documentation/Factory/Resolutions":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"url":"\/documentation\/factory\/resolutions","title":"Sample Resolutions","type":"topic","role":"article"}}}
{"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"An object or service of the desired type."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the ","type":"text"},{"code":"shared","type":"codeVoice"},{"text":" container that’s provided for each","type":"text"},{"text":" ","type":"text"},{"text":"and every container type.","type":"text"}],"type":"paragraph"},{"code":["let service = Container.shared.service()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The resolved instance may be brand new or Factory may return a cached value from the specified ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you’re passing an instance of a container around to your views or view models, just call it directly."}],"type":"paragraph"},{"type":"codeListing","code":["let service = container.service()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency."}]},{"syntax":"swift","code":["@Injected(\\.service) var service: ServiceType"],"type":"codeListing"},{"inlineContent":[{"text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,","type":"text"},{"text":" ","type":"text"},{"text":"so the above example is functionally identical to the ","type":"text"},{"type":"codeVoice","code":"Container.shared.service()"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"text":" ","type":"text"},{"type":"text","text":"your own container."}],"type":"paragraph"},{"syntax":"swift","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory\/callasfunction()"]}],"metadata":{"symbolKind":"method","title":"callAsFunction()","modules":[{"name":"Factory"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"roleHeading":"Instance Method","role":"symbol","externalID":"s:7FactoryAAV14callAsFunctionxyF"},"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Scope":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"type":"topic","role":"symbol","title":"Scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factory\/scope","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"code":"Singleton","type":"codeVoice"},{"type":"text","text":", "},{"code":"Cached","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Shared"},{"text":".","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory":{"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","url":"\/documentation\/factory\/factory","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"title":"Factory","role":"symbol"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"role":"symbol","url":"\/documentation\/factory\/factory\/callasfunction()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"title":"callAsFunction()","type":"topic","kind":"symbol"}}}
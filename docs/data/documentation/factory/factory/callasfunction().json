{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"variants":[{"paths":["\/documentation\/factory\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"An object or service of the desired type."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the ","type":"text"},{"type":"codeVoice","code":"shared"},{"type":"text","text":" container that’s provided for each"},{"type":"text","text":" "},{"text":"and every container type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let service = Container.shared.service()"],"syntax":"swift"},{"inlineContent":[{"text":"The resolved instance may be brand new or Factory may return a cached value from the specified ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you’re passing an instance of a container around to your views or view models, just call it directly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let service = container.service()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency."}]},{"type":"codeListing","code":["@Injected(\\.service) var service: ServiceType"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,","type":"text"},{"text":" ","type":"text"},{"text":"so the above example is functionally identical to the ","type":"text"},{"type":"codeVoice","code":"Container.shared.service()"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"type":"text","text":" "},{"type":"text","text":"your own container."}]},{"type":"codeListing","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"syntax":"swift"}],"kind":"content"}],"metadata":{"modules":[{"name":"Factory"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"roleHeading":"Instance Method","symbolKind":"method","externalID":"s:7FactoryAAV14callAsFunctionxyF","title":"callAsFunction()"},"references":{"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/Scope":{"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Singleton"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Cached"},{"type":"text","text":", "},{"type":"codeVoice","code":"Graph"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":"."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","title":"Scope","type":"topic","url":"\/documentation\/factory\/scope","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory":{"url":"\/documentation\/factory\/factory","kind":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"url":"\/documentation\/factory\/factory\/callasfunction()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","title":"callAsFunction()","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}]}}}
{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory\/decorator(_:)"]}],"metadata":{"extendedModule":"Factory","modules":[{"name":"Factory"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decorator","kind":"identifier"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Factory0A9ModifyingP1TQa","kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"roleHeading":"Instance Method","externalID":"s:7Factory0A9ModifyingPAAE9decoratoryxy1TQzYbcF::SYNTHESIZED::s:7FactoryAAV","title":"decorator(_:)","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@discardableResult","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decorator","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"decorator","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:7Factory0A9ModifyingP1TQa","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"This includes previously created items that may have been cached by a scope.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var decoratedService: Factory<ParentChildService> {","   self { ParentChildService() }","       .decorated {","           $0.child.parent = $0","       }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"As shown, decorator can come in handy when you need to perform some operation or manipulation after the fact."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/decorator(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Adds a factory specific decorator. The decorator will "},{"type":"emphasis","inlineContent":[{"text":"always","type":"text"}]},{"text":" be called with the resolved dependency","type":"text"},{"type":"text","text":" "},{"text":"for further examination or manipulation.","type":"text"}],"references":{"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryModifying/T":{"role":"symbol","abstract":[{"type":"text","text":"The return type of the Factoryâ€™s dependency."}],"title":"T","url":"\/documentation\/factory\/factorymodifying\/t","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/T","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"T","kind":"identifier"}],"required":true},"doc://Factory/documentation/Factory/Factory/decorator(_:)":{"type":"topic","role":"symbol","title":"decorator(_:)","url":"\/documentation\/factory\/factory\/decorator(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decorator","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A9ModifyingP1TQa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/decorator(_:)","abstract":[{"type":"text","text":"Adds a factory specific decorator. The decorator will "},{"inlineContent":[{"text":"always","type":"text"}],"type":"emphasis"},{"type":"text","text":" be called with the resolved dependency"},{"text":" ","type":"text"},{"text":"for further examination or manipulation.","type":"text"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"}}}
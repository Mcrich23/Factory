{"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@discardableResult","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"options","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions","kind":"typeIdentifier","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"},{"text":" = .all) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"Options description","type":"text"}],"type":"paragraph"}],"name":"options"}],"kind":"parameters"}],"metadata":{"extendedModule":"Factory","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Factory0A12ResetOptionsO","kind":"typeIdentifier","text":"FactoryResetOptions"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Instance Method","role":"symbol","modules":[{"name":"Factory"}],"symbolKind":"method","title":"reset(_:)","externalID":"s:7Factory0A9ModifyingPAAE5resetyxAA0A12ResetOptionsOF::SYNTHESIZED::s:7FactoryAAV"},"variants":[{"paths":["\/documentation\/factory\/factory\/reset(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/reset(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Resets the Factory’s behavior to its original state, removing any registrations and clearing any cached items from the specified scope."}],"references":{"doc://Factory/documentation/Factory/FactoryResetOptions":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","url":"\/documentation\/factory\/factoryresetoptions","kind":"symbol","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"title":"FactoryResetOptions","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"title":"Factory","role":"symbol","url":"\/documentation\/factory\/factory","type":"topic"},"doc://Factory/documentation/Factory/Factory/reset(_:)":{"url":"\/documentation\/factory\/factory\/reset(_:)","title":"reset(_:)","abstract":[{"type":"text","text":"Resets the Factory’s behavior to its original state, removing any registrations and clearing any cached items from the specified scope."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"FactoryResetOptions","preciseIdentifier":"s:7Factory0A12ResetOptionsO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/reset(_:)","role":"symbol"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}
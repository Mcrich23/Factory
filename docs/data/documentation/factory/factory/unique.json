{"abstract":[{"type":"text","text":"Syntactic sugar defines defines unique scope. See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","isActive":true,"type":"reference"},{"text":".","type":"text"}],"metadata":{"role":"symbol","symbolKind":"property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unique"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"title":"unique","externalID":"s:7Factory0A9ModifyingPAAE6uniquexvp::SYNTHESIZED::s:7FactoryAAV","extendedModule":"Factory","modules":[{"name":"Factory"}],"roleHeading":"Instance Property"},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/unique","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unique"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"platforms":["macOS"]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"code":["var service: Factory<ServiceType> {","    self { MyService() }","        .unique","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you can add the modifier, Factoryâ€™s are unique by default."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory\/unique"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Scope":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"type":"topic","role":"symbol","title":"Scope","navigatorTitle":[{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factory\/scope","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"code":"Singleton","type":"codeVoice"},{"type":"text","text":", "},{"code":"Cached","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Shared"},{"text":".","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory/unique":{"kind":"symbol","role":"symbol","type":"topic","title":"unique","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/unique","abstract":[{"type":"text","text":"Syntactic sugar defines defines unique scope. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope"},{"text":".","type":"text"}],"url":"\/documentation\/factory\/factory\/unique","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"unique","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://Factory/documentation/Factory/Factory":{"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","url":"\/documentation\/factory\/factory","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"title":"Factory","role":"symbol"}}}
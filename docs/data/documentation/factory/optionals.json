{"kind":"article","seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true,"anchor":"Advanced-Topics"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Let’s take a look.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Dynamic Registration","anchor":"Dynamic-Registration","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"type":"codeListing","syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"level":2,"anchor":"Explicitly-Unwrapped-Optionals","text":"Explicitly Unwrapped Optionals","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"text":" explicitly unwrap the optional…","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d advise against it."}]},{"inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"type":"codeVoice","code":"@Injected"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"type":"codeVoice","code":"@OptionalInjected"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"reference","isActive":true},{"text":" for more.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Optionals"},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"variants":[{"paths":["\/documentation\/factory\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Optionals and Dynamic Registration","modules":[{"name":"Factory"}],"role":"article","roleHeading":"Article"},"references":{"doc://Factory/documentation/Factory/Modifiers":{"title":"Factory Modifiers","type":"topic","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"},"doc://Factory/documentation/Factory/Design":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","title":"Designing Factory","url":"\/documentation\/factory\/design","role":"article","type":"topic"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"kind":"article","type":"topic","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},"doc://Factory/documentation/Factory/Functional":{"url":"\/documentation\/factory\/functional","kind":"article","title":"Functional Injection","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}]},"doc://Factory/documentation/Factory/Tags":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"title":"Tags","url":"\/documentation\/factory\/tags","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","role":"article","type":"topic"}}}
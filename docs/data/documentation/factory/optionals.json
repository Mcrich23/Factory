{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Factory"}],"title":"Optionals and Dynamic Registration"},"sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Let’s take a look.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Dynamic Registration","anchor":"Dynamic-Registration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"inlineContent":[{"type":"text","text":"Here’s an example:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"text":"Explicitly Unwrapped Optionals","type":"heading","level":2,"anchor":"Explicitly-Unwrapped-Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you "},{"type":"emphasis","inlineContent":[{"text":"could","type":"text"}]},{"type":"text","text":" explicitly unwrap the optional…"}]},{"syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"inlineContent":[{"text":"Your code is guaranteed to be safe.","type":"text"}],"type":"emphasis"}]},{"inlineContent":[{"type":"text","text":"I’d advise against it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"anchor":"Optionals-and-Multiple-Modules","level":2,"text":"Optionals and Multiple Modules","type":"heading"},{"inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","isActive":true,"type":"reference"},{"text":" for more.","type":"text"}]}]}],"kind":"article","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Optionals","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"variants":[{"paths":["\/documentation\/factory\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/Design":{"type":"topic","role":"article","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"kind":"article","url":"\/documentation\/factory\/design"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","url":"\/documentation\/factory\/cycle","role":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"kind":"article","title":"Resolution Cycles"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","url":"\/documentation\/factory\/modifiers","type":"topic","title":"Factory Modifiers","role":"article","kind":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}]},"doc://Factory/documentation/Factory/Tags":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","type":"topic","title":"Tags","role":"article","kind":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}]},"doc://Factory/documentation/Factory/Modules":{"abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"topic","url":"\/documentation\/factory\/modules","title":"Modular Development","role":"article","kind":"article"},"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","url":"\/documentation\/factory\/functional","role":"article","kind":"article","title":"Functional Injection","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}]}}}
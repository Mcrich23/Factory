{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"Let’s take a look."}],"type":"paragraph"},{"level":2,"anchor":"Dynamic-Registration","type":"heading","text":"Dynamic Registration"},{"inlineContent":[{"text":"Consider the following optional factory.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}],"type":"paragraph"},{"anchor":"Explicitly-Unwrapped-Optionals","type":"heading","level":2,"text":"Explicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"type":"text","text":" explicitly unwrap the optional…"}]},{"code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}]},{"inlineContent":[{"text":"I’d advise against it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"code":"@OptionalInjected","type":"codeVoice"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"removes any cached dependency from its associated scope.","type":"text"}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"level":2,"text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","isActive":true,"type":"reference"},{"text":" for more.","type":"text"}]}]}],"sections":[],"metadata":{"modules":[{"name":"Factory"}],"role":"article","title":"Optionals and Dynamic Registration","roleHeading":"Article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/optionals"]}],"kind":"article","seeAlsoSections":[{"generated":true,"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"anchor":"Advanced-Topics"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Optionals","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"topic","kind":"article","role":"article","title":"Modular Development","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://Factory/documentation/Factory/Tags":{"role":"article","title":"Tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/Cycle":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","type":"topic","kind":"article","role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}]},"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","type":"topic","kind":"article","role":"article","title":"Functional Injection","url":"\/documentation\/factory\/functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","title":"Factory Modifiers","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","url":"\/documentation\/factory\/modifiers"},"doc://Factory/documentation/Factory/Design":{"role":"article","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","kind":"article"}}}
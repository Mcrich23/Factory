{"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Let’s take a look.","type":"text"}]},{"text":"Dynamic Registration","type":"heading","level":2,"anchor":"Dynamic-Registration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example:"}]},{"code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"text":"Explicitly Unwrapped Optionals","type":"heading","level":2,"anchor":"Explicitly-Unwrapped-Optionals"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"text":"could","type":"text"}],"type":"emphasis"},{"text":" explicitly unwrap the optional…","type":"text"}]},{"code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d advise against it."}]},{"type":"paragraph","inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"text":"Optionals and Multiple Modules","type":"heading","level":2,"anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},{"type":"text","text":" for more."}]}],"kind":"content"}],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/optionals"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"anchor":"Advanced-Topics","title":"Advanced Topics","generated":true}],"metadata":{"role":"article","title":"Optionals and Dynamic Registration","modules":[{"name":"Factory"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"sections":[],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Optionals","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Functional":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article","title":"Functional Injection","url":"\/documentation\/factory\/functional","role":"article"},"doc://Factory/documentation/Factory/Cycle":{"abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","url":"\/documentation\/factory\/modifiers","kind":"article","title":"Factory Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","role":"article"},"doc://Factory/documentation/Factory/Tags":{"url":"\/documentation\/factory\/tags","type":"topic","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","kind":"article","role":"article","title":"Tags"},"doc://Factory/documentation/Factory/Design":{"type":"topic","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","url":"\/documentation\/factory\/design"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"title":"Modular Development","kind":"article","type":"topic"}}}
{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/InjectedObject"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/injectedobject\/init(_:)-4awwf"]}],"abstract":[{"text":"Simple initializer with passed parameter bypassing injection.","type":"text"}],"kind":"symbol","sections":[],"metadata":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"roleHeading":"Initializer","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"symbolKind":"init","role":"symbol","extendedModule":"Factory","modules":[{"name":"Factory"}],"title":"init(_:)","externalID":"s:7Factory14InjectedObjectVyACyxGxcfc","platforms":[{"introducedAt":"14.0","deprecated":false,"name":"iOS","unavailable":false,"beta":false},{"introducedAt":"11.0","deprecated":false,"name":"macOS","unavailable":false,"beta":false},{"introducedAt":"14.0","deprecated":false,"name":"tvOS","unavailable":false,"beta":false},{"introducedAt":"7.0","deprecated":false,"name":"watchOS","unavailable":false,"beta":false}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Still has issue with attempting to pass dependency into existing view when existing InjectedObject has keyPath."},{"type":"text","text":" "},{"type":"text","text":"https:\/\/forums.swift.org\/t\/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified"}]}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject\/init(_:)-4awwf","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/injectedobject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","type":"topic","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}]},"doc://Factory/documentation/Factory/InjectedObject/init(_:)-4awwf":{"title":"init(_:)","role":"symbol","conformance":{"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject\/init(_:)-4awwf","abstract":[{"text":"Simple initializer with passed parameter bypassing injection.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/factory\/injectedobject\/init(_:)-4awwf","type":"topic"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}
{"kind":"article","sections":[],"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"metadata":{"role":"article","roleHeading":"Article","title":"Sample Resolutions","modules":[{"name":"Factory"}]},"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Shared Class Container","anchor":"Shared-Class-Container","type":"heading","level":3},{"inlineContent":[{"text":"Here we instantiate our dependency from a shared class container.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}],"type":"paragraph"},{"text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"syntax":"swift","type":"codeListing"},{"text":"Lazy Initialization from Passed Container","anchor":"Lazy-Initialization-from-Passed-Container","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"],"syntax":"swift","type":"codeListing"},{"text":"Injected Property Wrappers","anchor":"Injected-Property-Wrappers","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"type":"codeVoice","code":"EnvironmentObject"},{"type":"text","text":" in SwiftUI."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"One can also inject the view model itself."}],"type":"paragraph"},{"code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject"},{"text":" for more.","type":"text"}],"type":"paragraph"},{"text":"Global Keypath Resolution from Shared Container","anchor":"Global-Keypath-Resolution-from-Shared-Container","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The end result is identical to using a keypath with the @Injected property wrapper.","type":"text"}],"type":"paragraph"},{"text":"Parameterized Initialization from Passed Container","anchor":"Parameterized-Initialization-from-Passed-Container","type":"heading","level":3},{"inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},{"type":"text","text":" for more details."}],"type":"paragraph"},{"text":"Classic Factory from Static Class Member","anchor":"Classic-Factory-from-Static-Class-Member","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This was discussed in greater detail in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations"}],"type":"paragraph"},{"text":"Composition Root","anchor":"Composition-Root","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor."}],"type":"paragraph"},{"code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"],"syntax":"swift","type":"codeListing"}]}],"seeAlsoSections":[{"anchor":"Examples","title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"references":{"doc://Factory/documentation/Factory/GettingStarted":{"kind":"article","url":"\/documentation\/factory\/gettingstarted","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup"},"doc://Factory/documentation/Factory/DynamicInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","url":"\/documentation\/factory\/dynamicinjected","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"title":"DynamicInjected","navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicInjected"}]},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factory\/injected","kind":"symbol","title":"Injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Injected"}]},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","role":"collection","title":"Factory","type":"topic","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/injectedobject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"title":"InjectedObject","type":"topic","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}]},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"url":"\/documentation\/factory\/lazyinjected","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"role":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","kind":"symbol","url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/Registrations":{"kind":"article","role":"article","title":"Sample Registrations","url":"\/documentation\/factory\/registrations","type":"topic","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"title":"WeakLazyInjected","type":"topic","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"url":"\/documentation\/factory\/weaklazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol"}}}
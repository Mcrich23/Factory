{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"role":"article","title":"Sample Resolutions","roleHeading":"Article","modules":[{"name":"Factory"}]},"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/resolutions"]}],"seeAlsoSections":[{"generated":true,"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"anchor":"Examples"}],"primaryContentSections":[{"kind":"content","content":[{"level":3,"text":"Shared Class Container","type":"heading","anchor":"Shared-Class-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}]},{"code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Lazy-Initialization-from-Passed-Container","text":"Lazy Initialization from Passed Container","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"level":3,"anchor":"Injected-Property-Wrappers","text":"Injected Property Wrappers","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"text":" and ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"type":"codeVoice","code":"EnvironmentObject"},{"text":" in SwiftUI.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]},{"inlineContent":[{"text":"One can also inject the view model itself.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"reference"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","isActive":true},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","isActive":true},{"type":"text","text":" for more."}],"type":"paragraph"},{"level":3,"anchor":"Global-Keypath-Resolution-from-Shared-Container","type":"heading","text":"Global Keypath Resolution from Shared Container"},{"inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"text":"Parameterized Initialization from Passed Container","type":"heading","level":3,"anchor":"Parameterized-Initialization-from-Passed-Container"},{"inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true},{"type":"text","text":" for more details."}],"type":"paragraph"},{"type":"heading","anchor":"Classic-Factory-from-Static-Class-Member","level":3,"text":"Classic Factory from Static Class Member"},{"inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This was discussed in greater detail in "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","isActive":true}]},{"level":3,"anchor":"Composition-Root","text":"Composition Root","type":"heading"},{"inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}]}],"references":{"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","type":"topic","url":"\/documentation\/factory\/lazyinjected","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/GettingStarted":{"title":"Getting Started","type":"topic","url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"role":"collectionGroup","kind":"article"},"doc://Factory/documentation/Factory/ParameterFactory":{"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"},"doc://Factory/documentation/Factory/Registrations":{"role":"article","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"type":"topic","url":"\/documentation\/factory\/registrations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","kind":"article","title":"Sample Registrations"},"doc://Factory/documentation/Factory/DynamicInjected":{"navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"role":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","kind":"symbol","url":"\/documentation\/factory\/dynamicinjected","title":"DynamicInjected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicInjected"}]},"doc://Factory/documentation/Factory/WeakLazyInjected":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"title":"WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic"},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"kind":"symbol","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factory\/injectedobject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"type":"topic","title":"InjectedObject"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","role":"symbol"}}}
{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Functional","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Functional Injection","modules":[{"name":"Factory"}]},"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"seeAlsoSections":[{"generated":true,"title":"Advanced Topics","anchor":"Advanced-Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}],"type":"paragraph"},{"type":"heading","text":"Example","anchor":"Example","level":2},{"inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}],"type":"paragraph"},{"code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct."}]},{"inlineContent":[{"type":"text","text":"Now, here’s the view model that uses it."}],"type":"paragraph"},{"code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Testing","level":2,"type":"heading","anchor":"Testing"},{"inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"]},{"inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Or test specific error cases.","type":"text"}]},{"code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"type":"reference","isActive":true,"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"}]}]}],"references":{"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"topic","kind":"article","role":"article","title":"Modular Development","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","title":"Factory Modifiers","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","url":"\/documentation\/factory\/modifiers"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","type":"topic","kind":"article","role":"article","title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}]},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"type":"link","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}]},"doc://Factory/documentation/Factory/Design":{"role":"article","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/Tags":{"role":"article","title":"Tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","kind":"article"},"doc://Factory/documentation/Factory/Cycle":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","type":"topic","kind":"article","role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}]}}}
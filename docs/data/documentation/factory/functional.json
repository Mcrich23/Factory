{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Functional","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"kind":"article","sections":[],"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"metadata":{"role":"article","modules":[{"name":"Factory"}],"title":"Functional Injection","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"anchor":"Advanced-Topics","title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}]},{"type":"heading","anchor":"Example","text":"Example","level":2},{"inlineContent":[{"text":"Consider the following typealias and Factory.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, here’s the view model that uses it."}]},{"type":"codeListing","syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"level":2,"type":"heading","text":"Testing","anchor":"Testing"},{"inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}],"type":"paragraph"},{"code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test specific error cases."}]},{"code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"isActive":true,"type":"reference","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"}]}],"kind":"content"}],"references":{"doc://Factory/documentation/Factory/Tags":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"title":"Tags","url":"\/documentation\/factory\/tags","role":"article","type":"topic"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/Design":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","title":"Designing Factory","url":"\/documentation\/factory\/design","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"kind":"article","type":"topic","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}],"type":"link","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"kind":"article","title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"title":"Factory Modifiers","type":"topic","role":"article","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"kind":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"}}}
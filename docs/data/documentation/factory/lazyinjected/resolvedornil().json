{"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"]}]}],"variants":[{"paths":["\/documentation\/factory\/lazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/LazyInjected"]]},"metadata":{"symbolKind":"method","externalID":"s:7Factory12LazyInjectedV13resolvedOrNilxSgyF","title":"resolvedOrNil()","modules":[{"name":"Factory"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"role":"symbol"},"sections":[],"references":{"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/LazyInjected/resolvedOrNil()":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"resolvedOrNil()","type":"topic","url":"\/documentation\/factory\/lazyinjected\/resolvedornil()","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","role":"symbol","abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}]},"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","url":"\/documentation\/factory\/lazyinjected","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyInjected"}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","type":"topic","kind":"symbol"}}}
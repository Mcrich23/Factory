{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"}],"modules":[{"name":"Factory"}],"title":"Factory","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"roleHeading":"Structure","externalID":"s:7FactoryAAV","role":"symbol"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"],"generated":true,"anchor":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"],"anchor":"Instance-Properties","generated":true},{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"],"title":"Instance Methods","anchor":"Instance-Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a previously cached value from the specified scope."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Defining-a-Factory","text":"Defining a Factory"},{"inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"type":"codeVoice","code":"ServiceType"},{"type":"text","text":". To do that we need to extend a Factory "},{"code":"Container","type":"codeVoice"},{"text":" and within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that container we define a new computed variable of type "},{"type":"codeVoice","code":"Factory<ServiceType>"},{"text":". The type must be explicitly defined, and is usually a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocol to which the returned dependency conforms."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"codeVoice","code":"callAsFunction()"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,"}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing"},{"type":"heading","level":2,"text":"Transient","anchor":"Transient"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"text":" ","type":"text"},{"text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"been served."}]},{"inlineContent":[{"text":"Other operations exist for Factory. See ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory"]}],"references":{"doc://Factory/documentation/Factory/Factory/resolve()":{"title":"resolve()","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","url":"\/documentation\/factory\/factory\/resolve()","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory04VoidA4Typea","text":"VoidFactoryType","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/factory\/factory\/register(factory:)","title":"register(factory:)","abstract":[{"type":"text","text":"Registers a new factory closure capable of producing an object or service of the desired type."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","role":"symbol"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/factory\/factory\/factorymodifying-implementations","title":"FactoryModifying Implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","role":"collectionGroup","abstract":[]},"doc://Factory/documentation/Factory/Factory/registration":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"registration","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/factory\/factory\/registration","title":"registration","abstract":[{"type":"text","text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,"},{"type":"text","text":" "},{"text":"and others.","type":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","role":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","kind":"symbol","title":"FactoryModifying"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"url":"\/documentation\/factory\/factory\/callasfunction()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","title":"callAsFunction()","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}]},"doc://Factory/s8SendableP":{"identifier":"doc:\/\/Factory\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory04VoidA4Typea","text":"VoidFactoryType"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"kind":"symbol","url":"\/documentation\/factory\/factory\/init(_:key:_:)","title":"init(_:key:_:)","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","role":"symbol"},"doc://Factory/documentation/Factory/Factory":{"url":"\/documentation\/factory\/factory","kind":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}]}}}
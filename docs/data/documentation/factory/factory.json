{"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"topicSections":[{"generated":true,"anchor":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"],"title":"Initializers"},{"generated":true,"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"],"anchor":"Instance-Properties"},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"],"generated":true,"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory","interfaceLanguage":"swift"},"metadata":{"externalID":"s:7FactoryAAV","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"symbolKind":"struct","role":"symbol","title":"Factory","roleHeading":"Structure"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"type":"text","text":" "},{"text":"return a previously cached value from the specified scope.","type":"text"}]},{"type":"heading","anchor":"Defining-a-Factory","text":"Defining a Factory","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"code":"ServiceType","type":"codeVoice"},{"type":"text","text":". To do that we need to extend a Factory "},{"code":"Container","type":"codeVoice"},{"text":" and within","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that container we define a new computed variable of type "},{"code":"Factory<ServiceType>","type":"codeVoice"},{"text":". The type must be explicitly defined, and is usually a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocol to which the returned dependency conforms."}]},{"syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with","type":"text"},{"type":"text","text":" "},{"text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"code":"callAsFunction()","type":"codeVoice"},{"text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"level":2,"text":"Transient","anchor":"Transient","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers","type":"text"},{"text":" ","type":"text"},{"text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"been served."}]},{"inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"sections":[],"kind":"symbol","references":{"doc://Factory/documentation/Factory/Factory/registration":{"kind":"symbol","url":"\/documentation\/factory\/factory\/registration","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"registration","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"text":" ","type":"text"},{"text":"and others.","type":"text"}],"type":"topic","title":"registration","role":"symbol"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"kind":"symbol","url":"\/documentation\/factory\/factory\/init(_:key:_:)","type":"topic","abstract":[{"type":"text","text":"Public initializer creates a Factory capable of managing dependencies of the desired type."}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(any ","kind":"text"},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"VoidFactoryType","kind":"typeIdentifier","preciseIdentifier":"s:7Factory04VoidA4Typea"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"title":"init(_:key:_:)"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","url":"\/documentation\/factory\/factorymodifying","title":"FactoryModifying","type":"topic","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"role":"symbol"},"doc://Factory/documentation/Factory/Factory/resolve()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","url":"\/documentation\/factory\/factory\/resolve()","title":"resolve()","role":"symbol","type":"topic","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","kind":"symbol","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"type":"text","text":"return a cached value from the specified scope."}],"title":"callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/factory\/factorymodifying-implementations","type":"topic","abstract":[],"title":"FactoryModifying Implementations"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"url":"\/documentation\/factory\/factory\/register(factory:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory04VoidA4Typea","text":"VoidFactoryType","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Registers a new factory closure capable of producing an object or service of the desired type.","type":"text"}],"title":"register(factory:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","type":"topic","kind":"symbol"},"doc://Factory/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Factory\/s8SendableP"},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]}}}
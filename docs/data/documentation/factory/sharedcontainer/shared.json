{"abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This container is used by the various @Injected property wrappers to resolve the keyPath to a given Factory. Care should be taken in"},{"text":" ","type":"text"},{"text":"mixed environments where you’re passing container references AND using the @Injected property wrappers.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note this should be defined as a @TaskLocal variable to be able to use its isolation mechanism, which is especially useful for test parallelization."},{"text":" ","type":"text"},{"type":"text","text":"If you don’t want to use the @TaskLocal isolation mechanism, then you should define a ‘let’ variable, not ‘var’."},{"type":"text","text":" "},{"type":"text","text":"Using ‘static var’ (without @TaskLocal being attached to it) will cause Swift to issue concurrency warnings in the future whenever the container is accessed."}]}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","roleHeading":"Type Property","externalID":"s:7Factory15SharedContainerP6sharedxvpZ","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"symbolKind":"property","required":true,"title":"shared","modules":[{"name":"Factory"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/sharedcontainer\/shared"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer","role":"symbol","type":"topic","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"title":"SharedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/SharedContainer/shared":{"url":"\/documentation\/factory\/sharedcontainer\/shared","kind":"symbol","title":"shared","abstract":[{"text":"Defines a single “shared” container for that container type.","type":"text"}],"type":"topic","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared"}}}
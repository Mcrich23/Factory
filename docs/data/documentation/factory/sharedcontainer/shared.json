{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"shared","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This container is used by the various @Injected property wrappers to resolve the keyPath to a given Factory. Care should be taken in"},{"type":"text","text":" "},{"text":"mixed environments where you’re passing container references AND using the @Injected property wrappers.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note this should be defined as a @TaskLocal variable to be able to use its isolation mechanism, which is especially useful for test parallelization."},{"text":" ","type":"text"},{"type":"text","text":"If you don’t want to use the @TaskLocal isolation mechanism, then you should define a ‘let’ variable, not ‘var’."},{"type":"text","text":" "},{"type":"text","text":"Using ‘static var’ (without @TaskLocal being attached to it) will cause Swift to issue concurrency warnings in the future whenever the container is accessed."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/sharedcontainer\/shared"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"externalID":"s:7Factory15SharedContainerP6sharedxvpZ","modules":[{"name":"Factory"}],"symbolKind":"property","roleHeading":"Type Property","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"title":"shared","required":true,"role":"symbol"},"abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}],"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/SharedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"type":"topic","kind":"symbol","url":"\/documentation\/factory\/sharedcontainer","role":"symbol","title":"SharedContainer"},"doc://Factory/documentation/Factory/SharedContainer/shared":{"abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","url":"\/documentation\/factory\/sharedcontainer\/shared","title":"shared","kind":"symbol","type":"topic","required":true,"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}]}}}
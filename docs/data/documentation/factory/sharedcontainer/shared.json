{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/sharedcontainer\/shared"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This container is used by the various @Injected property wrappers to resolve the keyPath to a given Factory. Care should be taken in","type":"text"},{"type":"text","text":" "},{"text":"mixed environments where you’re passing container references AND using the @Injected property wrappers.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note this should be defined as a @TaskLocal variable to be able to use its isolation mechanism, which is especially useful for test parallelization."},{"text":" ","type":"text"},{"text":"If you don’t want to use the @TaskLocal isolation mechanism, then you should define a ‘let’ variable, not ‘var’.","type":"text"},{"text":" ","type":"text"},{"text":"Using ‘static var’ (without @TaskLocal being attached to it) will cause Swift to issue concurrency warnings in the future whenever the container is accessed.","type":"text"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"required":true,"title":"shared","role":"symbol","modules":[{"name":"Factory"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Type Property","externalID":"s:7Factory15SharedContainerP6sharedxvpZ","symbolKind":"property"},"references":{"doc://Factory/documentation/Factory/SharedContainer/shared":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}],"kind":"symbol","role":"symbol","required":true,"url":"\/documentation\/factory\/sharedcontainer\/shared","title":"shared"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","type":"topic","url":"\/documentation\/factory\/sharedcontainer"}}}
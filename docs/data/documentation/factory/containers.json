{"metadata":{"role":"article","roleHeading":"Article","title":"Containers","modules":[{"name":"Factory"}]},"abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/containers"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Containers","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Containers are used by Factory to manage object creation, object resolution, and object lifecycles in general."}],"type":"paragraph"},{"inlineContent":[{"text":"In Factory 1.0 with its statically defined Factory’s a “container” was really just a convenient namespace. But in Factory 2.0 a container is a distinct object that can be referenced, passed around, and deallocated as needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can even create separate instances of the same container type, each with its own registrations and scope caches."}],"type":"paragraph"},{"inlineContent":[{"text":"Factory 2.0 supports true container-based dependency injection.","type":"text"}],"type":"paragraph"},{"text":"Containers and Factories","anchor":"Containers-and-Factories","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A Factory definition is a computed property defined within a container extension. Each Factory needs a reference to its container, a scope, and it also requires a factory closure that will produce our dependency when asked to do so."}],"type":"paragraph"},{"inlineContent":[{"text":"That’s a lot of code, so we usually just ask the enclosing container to make our Factory for us…","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"]},{"inlineContent":[{"text":"This process is covered in greater detail in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Resolving a Dependency","anchor":"Resolving-a-Dependency","level":2},{"inlineContent":[{"type":"text","text":"Once you’ve added a Factory to a container you can resolve it."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let service = Container.shared.service()"]},{"inlineContent":[{"type":"text","text":"Bingo. You now have your dependency."}],"type":"paragraph"},{"type":"heading","anchor":"The-Default-Container","text":"The Default Container","level":2},{"inlineContent":[{"type":"text","text":"Factory ships with a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" already constructed for your convenience."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public final class Container: SharedContainer {","    public static let shared = MyContainer()","    public let manager = ContainerManager()","}"]},{"inlineContent":[{"type":"text","text":"You’ve seen it used and extended in all of the examples we’ve seen thus far, and most projects can simply extend it and go."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The real implementation of the default "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" will have the "},{"code":"@TaskLocal macro","type":"codeVoice"},{"type":"text","text":" attaced to the "},{"type":"codeVoice","code":"shared"},{"text":" static property if you’re using Factory with Swift 5.5 or higher. See more in ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","isActive":true}],"type":"paragraph"},{"text":"Container.shared","type":"heading","level":2,"anchor":"Containershared"},{"type":"paragraph","inlineContent":[{"text":"As the default Container definition shows, each container class defined has a statically allocated ","type":"text"},{"code":"shared","type":"codeVoice"},{"type":"text","text":" instance associated with it."}]},{"type":"paragraph","inlineContent":[{"text":"This instance can be referenced directly if you’re using a Service Locator-style pattern.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let service = Container.shared.service()"]},{"inlineContent":[{"type":"text","text":"Or you can use the “shared” container as an application root container and pass it along to wherever it’s needed. Let’s take a look."}],"type":"paragraph"},{"type":"heading","anchor":"Passing-Containers","text":"Passing Containers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of passing an instance of a container to a view model and then initializing a service from that container."}]},{"syntax":"swift","code":["class ContentViewModel {","    let service2: MyServiceType","    init(container: Container) {","        service2 = container.service()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Additional examples and methods can be seen on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions"},{"text":" page.","type":"text"}],"type":"paragraph"},{"anchor":"SharedContainer","level":2,"type":"heading","text":"SharedContainer"},{"type":"paragraph","inlineContent":[{"text":"All containers conform to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","isActive":true},{"type":"text","text":" protocol. That basically means that each one must have its own "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","isActive":true},{"text":" and implement a static ","type":"text"},{"type":"codeVoice","code":"shared"},{"type":"text","text":" instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SharedContainer also defines some common functionality for each container, like the "},{"type":"codeVoice","code":"unique"},{"text":" convenience function we’ve seen used throughout.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note that you can extend SharedContainer with your own Factory’s."}],"type":"paragraph"},{"type":"codeListing","code":["extension SharedContainer {","    var commonService: Factory<ServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"commonService","type":"codeVoice"},{"text":" Factory will now be available on every container created.","type":"text"}]},{"syntax":"swift","code":["let common1 = Container.shared.commonService()","let common2 = MyContainer.shared.commonService()"],"type":"codeListing"},{"level":2,"type":"heading","text":"Custom Containers","anchor":"Custom-Containers"},{"inlineContent":[{"type":"text","text":"In a large project you might want to segregate factories into additional, smaller containers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Defining your own container class is simple. Just use the following as a template."}]},{"syntax":"swift","code":["public final class MyContainer: SharedContainer {","     @TaskLocal public static var shared = MyContainer()","     public let manager = ContainerManager()","}","","extension MyContainer {","    var cachedService: Factory<ServiceType> {","        self { MyService() }.cached","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"As mentioned, a container must derive from "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","isActive":true},{"text":", have its own ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","type":"reference"},{"text":", and implement a static ","type":"text"},{"type":"codeVoice","code":"shared"},{"type":"text","text":" instance. It also must be marked "},{"type":"codeVoice","code":"final"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Remember to define the “shared” container as a @TaskLocal variable to be able to use its isolation mechanism, which is especially useful for test parallelization."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you don’t want to use the @TaskLocal isolation mechanism, then you should define a ‘let’ variable, not ‘var’.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using ‘static var’ (without @TaskLocal being attached to it) will cause Swift to issue concurrency warnings in the future whenever the container is accessed."}]},{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing"}],"type":"paragraph"}],"style":"note"},{"anchor":"Referencing-Other-Containers","type":"heading","level":2,"text":"Referencing Other Containers"},{"inlineContent":[{"type":"text","text":"Don’t forget that if need be you can reach across containers simply by specifying the full "},{"code":"container.factory","type":"codeVoice"},{"type":"text","text":" path."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension PaymentsContainer {","    let anotherService = Factory<AnotherService> { ","        self { AnotherService(using: Container.shared.optionalService()) }","    }","}"]},{"type":"heading","text":"Injected Property Wrappers","level":2,"anchor":"Injected-Property-Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property wrappers like "},{"code":"@Injected","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" always reference the "},{"code":"shared","type":"codeVoice"},{"text":" container for that class type. Let’s get an instance of the ","type":"text"},{"type":"codeVoice","code":"cachedService"},{"text":" object we defined above by providing a keypath to the desired class and service.","type":"text"}]},{"code":["class ContentViewModel: ObservableObject {","    @Injected(\\MyContainer.cachedService) var cachedService","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We now have an instance of ","type":"text"},{"code":"cachedService","type":"codeVoice"},{"text":" in our view model, as well as a reference to the same instance cached in ","type":"text"},{"type":"codeVoice","code":"MyContainer.shared.manager"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected"},{"type":"text","text":" and "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"reference","isActive":true},{"text":" for more.","type":"text"}]},{"text":"Registration and Scope Management","type":"heading","anchor":"Registration-and-Scope-Management","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned earlier, factory registrations and scopes are managed by the container on which the dependency was created. Adding a registration or clearing a scope cache on one container has no effect on any other container."}]},{"code":["let containerA = MyContainer()","containerA.register.cachedService { MockService() }","","\/\/ Will have a MockService","let service1 = containerA.cachedService() ","","\/\/ Will have a new or previously cached instance of ServiceType","let service2 = MyContainer.shared.cachedService() "],"syntax":"swift","type":"codeListing"},{"text":"AutoRegister","level":2,"type":"heading","anchor":"AutoRegister"},{"inlineContent":[{"text":"From time to time you may find that you need to register or change some instances prior to application initialization. If so you can do the following.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension MyContainer: AutoRegistering {","    func autoRegister() {","        someService.register { ModuleB.SomeService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Just make your container conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","isActive":true},{"type":"text","text":" and provide the "},{"type":"codeVoice","code":"autoRegister"},{"type":"text","text":" function. This function will be called "},{"type":"emphasis","inlineContent":[{"text":"once","type":"text"}]},{"type":"text","text":" prior to the very first Factory service resolution on that container."}]},{"type":"paragraph","inlineContent":[{"text":"Note that this can come in handy when you want to register instances of objects obtained across different modules, or change settings in the container manager.","type":"text"}]},{"anchor":"AutoRegister-and-the-Default-Container","type":"heading","text":"AutoRegister and the Default Container","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can add auto registration capabilities to Factory’s default container as well, but as of Swift 6 you’ll need to add the "},{"type":"codeVoice","code":"@retroactive"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute to the "},{"code":"AutoRegistering","type":"codeVoice"},{"type":"text","text":" protocol definition."}]},{"syntax":"swift","type":"codeListing","code":["extension Container: @retroactive AutoRegistering {","    func autoRegister() {","        someService.register { ModuleB.SomeService() }","    }","}"]},{"inlineContent":[{"text":"This new attribute silences the warning, “Extension declares a conformance of imported type ‘Container’ to imported protocol ‘AutoRegistering’;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this will not behave correctly if the owners of ‘Factory’ introduce this conformance in the future”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Yeah. Me too. I know the developers of Swift mean well, but sometimes…"}]},{"anchor":"Resetting-a-Container","text":"Resetting a Container","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"code":"register","type":"codeVoice"},{"type":"text","text":" on a factory lets us change the state of the system. But what if we need to revert to the original behavior?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Simple. Just reset it to bring back the original factory closure. Or, if desired, you can reset "},{"type":"emphasis","inlineContent":[{"text":"everything","type":"text"}]},{"type":"text","text":" back to square one with a single command."}]},{"syntax":"Swift","type":"codeListing","code":["container.myService.reset() \/\/ resets this factory only","container.manager.reset() \/\/ clears all registrations and caches","container.reset() \/\/ shortcut, same as above"]},{"type":"paragraph","inlineContent":[{"text":"We can also reset registrations and scope caches specifically, leaving the other intact.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Reset all registrations, restoring original factories but leaving caches intact","Container.shared.manager.reset(options: .registration)","","\/\/ Reset all scope caches, leaving registrations intact","Container.shared.manager.reset(options: .scope)"]},{"inlineContent":[{"type":"text","text":"You can also reset a specific scope cache while leaving the others intact."}],"type":"paragraph"},{"syntax":"swift","code":["Container.shared.manager.reset(scope: .cached)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that resetting registrations also resets the container’s auto registration flag."}],"type":"paragraph"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"Resetting a container or scope has no effect whatsoever on anything that’s already been resolved by Factory. It only ensures that the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"next","type":"text"}]},{"text":" time a Factory is asked to resolve a dependency that dependency will be a new instance.","type":"text"}]}],"type":"aside","style":"important"},{"type":"heading","text":"Pushing and Popping State","anchor":"Pushing-and-Popping-State","level":2},{"type":"paragraph","inlineContent":[{"text":"As with Factory 1.0, the state of a container’s registrations and scope caches can be saved (pushed), and then restored (popped). See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"reference"},{"text":" for more information on this.","type":"text"}]},{"type":"heading","text":"Releasing a Container","anchor":"Releasing-a-Container","level":2},{"content":[{"inlineContent":[{"text":"If a container ever goes out of scope, so will all of its registrations and cached objects.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"warning","name":"Warning"},{"inlineContent":[{"type":"text","text":"To demonstrate, let’s see what happens when we create and then reassign a new container. Doing so releases the previous container, along with any registrations or objects that container may have cached. We’ll use the "},{"type":"codeVoice","code":"cachedService"},{"text":" Factory we defined above.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Create an instance of our cached service.","var container = MyContainer()","let service1 = container.cachedService()","","\/\/ Repeat, which returns the same cached instance we obtained in service1.","let service2 = container.cachedService()","assert(service1.id == service2.id)","","\/\/ Replace the existing shared container with a new one.","container = MyContainer()","","\/\/ Trying again gets a new instance since the old container and cache was released.","let service3 = container.cachedService()","assert(service1.id != service3.id)","","\/\/ Repeat and receive the same cached instance we obtained in service3.","let service4 = container.cachedService()","assert(service3.id == service4.id)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"From a certain point of view, replacing a container with a new one is the ultimate reset mechanism.","type":"text"}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"As of Factory 2.2 it’s no longer possible to reassign the default “shared” container. This change clears several warnings that could be issued by Swift concurrency when “complete” checking is enabled and one attempts to access the container via the shared static variable (e.g. "},{"type":"codeVoice","code":"let s = Container.shared.myService()"},{"type":"text","text":")."}],"type":"paragraph"}],"name":"Note"}]}],"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"The-Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"title":"The Basics"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory/WeakLazyInjected":{"title":"WeakLazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WeakLazyInjected","kind":"identifier"}],"role":"symbol"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"type":"topic","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","kind":"article"},"doc://Factory/documentation/Factory/AutoRegistering":{"navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"title":"AutoRegistering","role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoRegistering"}]},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer","role":"symbol","type":"topic","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"title":"SharedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},"doc://Factory/documentation/Factory/DynamicInjected":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"DynamicInjected"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/dynamicinjected","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","title":"DynamicInjected","role":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","url":"\/documentation\/factory\/lazyinjected","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyInjected"}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Resolutions":{"type":"topic","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"kind":"article","url":"\/documentation\/factory\/resolutions","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","title":"Sample Resolutions","role":"article"},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","url":"\/documentation\/factory\/container","title":"Container","kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"type":"topic"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"topic","title":"Injected","url":"\/documentation\/factory\/injected","role":"symbol"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"},"doc://Factory/documentation/Factory/InjectedObject":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","kind":"symbol","url":"\/documentation\/factory\/injectedobject","title":"InjectedObject","type":"topic","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedObject"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}]},"doc://Factory/documentation/Factory/Scopes":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"role":"collectionGroup","url":"\/documentation\/factory\/scopes","type":"topic","kind":"article","title":"Scopes"},"doc://Factory/documentation/Factory/ContainerManager":{"url":"\/documentation\/factory\/containermanager","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","title":"ContainerManager"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","url":"\/documentation\/factory\/gettingstarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","kind":"article"}}}
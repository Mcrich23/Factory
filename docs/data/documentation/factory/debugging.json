{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"role":"article","title":"Debugging","modules":[{"name":"Factory"}],"roleHeading":"Article"},"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Chains"],"anchor":"Development-and-Testing","generated":true,"title":"Development and Testing"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Debugging","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Tracing the Resolution Cycle","type":"heading","anchor":"Tracing-the-Resolution-Cycle","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"When running in DEBUG mode Factory allows you to trace the injection process and see every object instantiated or returned from a cache during a given "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle"},{"text":".","type":"text"}]},{"syntax":null,"type":"codeListing","code":["0: Factory.Container.cycleDemo<CycleDemo> = N:105553131389696","1:     Factory.Container.aService<AServiceType> = N:105553119821680","2:         Factory.Container.implementsAB<AServiceType & BServiceType> = N:105553119821680","3:             Factory.Container.networkService<NetworkService> = N:105553119770688","1:     Factory.Container.bService<BServiceType> = N:105553119821680","2:         Factory.Container.implementsAB<AServiceType & BServiceType> = C:105553119821680"]},{"type":"paragraph","inlineContent":[{"text":"Each line in the trace shows the depth (with 0 as the root), the factory called, the type of the service created, and the id\/address of the object itself.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Each address has a prefix indicating whether or not a new object was created (N:) or if an existing object was returned from a scope cache (C:)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Just toggle the trace flag to enable\/disable logging."}],"type":"paragraph"},{"code":["Container.shared.manager.trace.toggle()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Turning on a trace can be helpful in testing when you want to get an idea of an object’s dependency tree."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that enabling trace logging enables it for "},{"inlineContent":[{"text":"all","type":"text"}],"type":"emphasis"},{"type":"text","text":" containers."}]},{"inlineContent":[{"type":"text","text":"One final consideration is that logging the construction of an object will show everything initialized as part of that resolution cycle. Anything created lazily after the fact may not appear in the trace."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Logging","anchor":"Logging"},{"type":"paragraph","inlineContent":[{"text":"Trace logs are usually just printed to the system log, but you can change that behavior if needed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.logger = {","    MyLogger.debug(\"Factory: \\($0)\")","}"]},{"inlineContent":[{"text":"Note this changes the logging behavior for ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" containers."}],"type":"paragraph"},{"type":"heading","text":"Circular Dependency Chain Detection","level":2,"anchor":"Circular-Dependency-Chain-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C was defined such that it needs an A?"}]},{"inlineContent":[{"type":"text","text":"That’s a Circular Dependency Chain."}],"type":"paragraph"},{"inlineContent":[{"text":"Factory can detect such things and warn you about them during the development process.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The subject’s a bit involved, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","type":"reference","isActive":true},{"type":"text","text":"."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/debugging"]}],"kind":"article","references":{"doc://Factory/documentation/Factory/Cycle":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Chains":{"type":"topic","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","role":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"topic","url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"title":"Contexts","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/Previews":{"type":"topic","kind":"article","title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]}}}
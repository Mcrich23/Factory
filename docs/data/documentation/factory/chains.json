{"primaryContentSections":[{"content":[{"text":"Circular Dependency Chain Detection","type":"heading","anchor":"Circular-Dependency-Chain-Detection","level":2},{"inlineContent":[{"text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Examine the following class definitions.","type":"text"}]},{"code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"type":"codeVoice","code":"CircularA"},{"type":"text","text":" is going to result in an infinite loop."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is a circular dependency chain.","type":"text"}]},{"anchor":"Resolution","text":"Resolution","type":"heading","level":2},{"inlineContent":[{"text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}],"type":"paragraph"},{"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"With the above information in hand we should be able to find the problem and fix it."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"code":"LazyInjected","type":"codeVoice"},{"text":" or, better yet, ","type":"text"},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}]},{"type":"paragraph","inlineContent":[{"text":"But a better solution would probably entail finding and breaking out the functionality that ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"CircularC"},{"text":" are depending upon into a ","type":"text"},{"inlineContent":[{"text":"third","type":"text"}],"type":"emphasis"},{"type":"text","text":" object they both could include."}]},{"type":"paragraph","inlineContent":[{"text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided.","type":"text"}]},{"type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance.","type":"text"}]}],"name":"Important"},{"anchor":"Disabling-CDC-Detection","type":"heading","level":2,"text":"Disabling CDC Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"code":["Container.shared.manager.dependencyChainTestMax = 0"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The default value for ","type":"text"},{"code":"dependencyChainTestMax","type":"codeVoice"},{"text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This value can be increased (or decreased) as needed.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"anchor":"Development-and-Testing","generated":true,"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"metadata":{"role":"article","title":"Circular Dependency Chains","roleHeading":"Article","modules":[{"name":"Factory"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/chains"]}],"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"references":{"doc://Factory/documentation/Factory/Previews":{"type":"topic","kind":"article","title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","type":"topic","url":"\/documentation\/factory\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"kind":"article"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"title":"Factory","role":"collection","type":"topic","url":"\/documentation\/factory","kind":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"title":"Contexts","role":"article","kind":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"topic","url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article"}}}
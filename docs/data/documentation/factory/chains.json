{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"sections":[],"seeAlsoSections":[{"anchor":"Development-and-Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"],"title":"Development and Testing","generated":true}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/chains"]}],"primaryContentSections":[{"content":[{"text":"Circular Dependency Chain Detection","type":"heading","level":2,"anchor":"Circular-Dependency-Chain-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examine the following class definitions."}]},{"syntax":"swift","type":"codeListing","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"code":"CircularA","type":"codeVoice"},{"text":" is going to result in an infinite loop.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum."}]},{"inlineContent":[{"type":"text","text":"This is a circular dependency chain."}],"type":"paragraph"},{"anchor":"Resolution","text":"Resolution","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}]},{"type":"paragraph","inlineContent":[{"text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"]},{"inlineContent":[{"text":"With the above information in hand we should be able to find the problem and fix it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"type":"codeVoice","code":"LazyInjected"},{"text":" or, better yet, ","type":"text"},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}]},{"inlineContent":[{"text":"But a better solution would probably entail finding and breaking out the functionality that ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CircularC","type":"codeVoice"},{"type":"text","text":" are depending upon into a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"third"}]},{"text":" object they both could include.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance."}]}],"type":"aside","style":"important","name":"Important"},{"level":2,"text":"Disabling CDC Detection","type":"heading","anchor":"Disabling-CDC-Detection"},{"inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}],"type":"paragraph"},{"syntax":"swift","code":["Container.shared.manager.dependencyChainTestMax = 0"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value for "},{"type":"codeVoice","code":"dependencyChainTestMax"},{"type":"text","text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times."}]},{"type":"paragraph","inlineContent":[{"text":"This value can be increased (or decreased) as needed.","type":"text"}]}],"kind":"content"}],"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"Factory"}],"role":"article","title":"Circular Dependency Chains"},"references":{"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","url":"\/documentation\/factory\/contexts","title":"Contexts","role":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"type":"topic","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","kind":"article"},"doc://Factory/documentation/Factory/Debugging":{"type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","title":"Debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","role":"article"},"doc://Factory/documentation/Factory/Previews":{"role":"article","url":"\/documentation\/factory\/previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"title":"SwiftUI Previews","type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"doc://Factory/documentation/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","title":"Factory","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection"}}}
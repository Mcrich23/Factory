{"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"],"title":"Development and Testing","anchor":"Development-and-Testing"}],"metadata":{"roleHeading":"Article","modules":[{"name":"Factory"}],"role":"article","title":"Circular Dependency Chains"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"kind":"article","variants":[{"paths":["\/documentation\/factory\/chains"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Circular Dependency Chain Detection","anchor":"Circular-Dependency-Chain-Detection"},{"type":"paragraph","inlineContent":[{"text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?","type":"text"}]},{"inlineContent":[{"text":"Examine the following class definitions.","type":"text"}],"type":"paragraph"},{"code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"type":"codeVoice","code":"CircularA"},{"text":" is going to result in an infinite loop.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum."}]},{"inlineContent":[{"text":"This is a circular dependency chain.","type":"text"}],"type":"paragraph"},{"anchor":"Resolution","type":"heading","level":2,"text":"Resolution"},{"inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies.","type":"text"}]},{"type":"codeListing","code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"],"syntax":null},{"inlineContent":[{"text":"With the above information in hand we should be able to find the problem and fix it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"type":"codeVoice","code":"LazyInjected"},{"type":"text","text":" or, better yet, "},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But a better solution would probably entail finding and breaking out the functionality that "},{"type":"codeVoice","code":"CircularA"},{"type":"text","text":" and "},{"code":"CircularC","type":"codeVoice"},{"type":"text","text":" are depending upon into a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"third"}]},{"type":"text","text":" object they both could include."}]},{"inlineContent":[{"type":"text","text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance."}],"type":"paragraph"}],"name":"Important","type":"aside","style":"important"},{"type":"heading","text":"Disabling CDC Detection","level":2,"anchor":"Disabling-CDC-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"syntax":"swift","type":"codeListing","code":["Container.shared.manager.dependencyChainTestMax = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value for "},{"code":"dependencyChainTestMax","type":"codeVoice"},{"text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This value can be increased (or decreased) as needed."}],"type":"paragraph"}]}],"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"kind":"symbol","title":"Factory","role":"collection","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","role":"article","type":"topic","title":"Contexts","url":"\/documentation\/factory\/contexts","kind":"article","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}]},"doc://Factory/documentation/Factory/Debugging":{"title":"Debugging","type":"topic","role":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article"},"doc://Factory/documentation/Factory/Previews":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","type":"topic","url":"\/documentation\/factory\/previews","role":"article","kind":"article","title":"SwiftUI Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","type":"topic","role":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"url":"\/documentation\/factory\/testing","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing"}}}